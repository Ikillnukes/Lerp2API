<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lerp2APIEditor</name>
    </assembly>
    <members>
        <member name="F:Lerp2API.Utility.AssetDefineManager.CustomDefines">
            <summary>
            Custom defines to add based on the file to detect the asset by, and the desired platforms
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.AddCompileDefine(System.String,UnityEditor.BuildTargetGroup[])">
            <summary>
            Attempts to add a new #define constant to the Player Settings
            </summary>
            <param name="newDefineCompileConstant">constant to attempt to define</param>
            <param name="targetGroups">platforms to add this for (null will add to all platforms)</param>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.RemoveCompileDefine(System.String,UnityEditor.BuildTargetGroup[])">
            <summary>
            Attempts to remove a #define constant from the Player Settings
            </summary>
            <param name="defineCompileConstant"></param>
            <param name="targetGroups"></param>
        </member>
        <member name="T:GenericMenuExtensions">
            <summary>
            Extension methods for <see cref="T:UnityEditor.GenericMenu"/>.
            </summary>
        </member>
        <member name="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,UnityEngine.GUIContent)">
             <summary>
             Begin adding an item to the <see cref="T:UnityEditor.GenericMenu"/>.
             </summary>
             <example>
             <para>Here are some usage examples:</para>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem(new GUIContent("Reset"))
                 .Enable(Selection.activeObject != null)
                 .Action(() => {
                     // Place reset logic here...
                 });
            
             menu.AddItem(new GUIContent("Set as Default Object"))
                 .Enable(Selection.activeObject != null)
                 .On(Selection.activeObject == currentDefaultObject)
                 .Action(() => {
                     currentDefaultObject = Selection.activeObject;
                 });
            
             menu.ShowAsContext();
             ]]></code>
             </example>
             <param name="menu">The menu that is being constructed.</param>
             <param name="content">Content of menu item.</param>
             <returns>
             Context object used whilst adding a menu item.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <list type="bullet">
             <item>If <paramref name="menu"/> is a value of <c>null</c>.</item>
             <item>If <paramref name="content"/> is a value of <c>null</c>.</item>
             </list>
             </exception>
        </member>
        <member name="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,System.String)">
             <summary>
             Begin adding an item to the <see cref="T:UnityEditor.GenericMenu"/>.
             </summary>
             <example>
             <para>Here are some usage examples:</para>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Reset")
                 .Enable(Selection.activeObject != null)
                 .Action(() => {
                     // Place reset logic here...
                 });
            
             menu.AddItem("Set as Default Object")
                 .Enable(Selection.activeObject != null)
                 .On(Selection.activeObject == currentDefaultObject)
                 .Action(() => {
                     currentDefaultObject = Selection.activeObject;
                 });
            
             menu.ShowAsContext();
             ]]></code>
             </example>
             <param name="menu">The menu that is being constructed.</param>
             <param name="text">Text of menu item.</param>
             <returns>
             Context object used whilst adding a menu item.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <list type="bullet">
             <item>If <paramref name="menu"/> is a value of <c>null</c>.</item>
             <item>If <paramref name="text"/> is a value of <c>null</c>.</item>
             </list>
             </exception>
             <exception cref="T:System.ArgumentException">
             If <paramref name="text"/> is an empty string.
             </exception>
        </member>
        <member name="M:GenericMenuExtensions.AddSeparator(UnityEditor.GenericMenu)">
            <summary>
            Adds separator to the <see cref="T:UnityEditor.GenericMenu"/>.
            </summary>
            <param name="menu">The menu that is being constructed.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="menu"/> is a value of <c>null</c>.
            </exception>
        </member>
        <member name="T:IGenericMenuAddItemContext">
            <summary>
            Describes current context of adding an item to a <see cref="T:UnityEditor.GenericMenu"/>.
            </summary>
            <seealso cref="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,UnityEngine.GUIContent)"/>
            <seealso cref="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,System.String)"/>
        </member>
        <member name="M:IGenericMenuAddItemContext.Enable(System.Boolean)">
             <summary>
             Specifies whether menu item should be enabled.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("This item is disabled!")
                 .Enable(false)
                 .Action(() => {
                     Debug.Log("User cannot make this appear in log!");
                 });
             ]]></code>
             </example>
             <param name="enable">Specifies whether item is enabled.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
        </member>
        <member name="M:IGenericMenuAddItemContext.Enable(System.Func{System.Boolean})">
             <summary>
             Specifies whether menu item should be enabled.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("This item is disabled!")
                 .Enable(() => false)
                 .Action(() => {
                     Debug.Log("User cannot make this appear in log!");
                 });
             ]]></code>
             </example>
             <param name="predicate">Predicate that determines whether item is enabled by
             by returning a value of <c>true</c>.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="predicate"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.Visible(System.Boolean)">
             <summary>
             Specifies whether menu item should be visible in menu.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Visible when item is selected!")
                 .Visible(Selection.activeObject != null)
                 .Action(() => {
                     string objectName = Selection.activeObject.name;
                     Debug.Log(string.Format("Selected object is called '{0}'.", objectName));
                 });
             ]]></code>
             </example>
             <param name="visible">Specifies whether item is visible.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
        </member>
        <member name="M:IGenericMenuAddItemContext.Visible(System.Func{System.Boolean})">
             <summary>
             Specifies whether menu item should be visible.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Visible when item is selected!")
                 .Visible(() => Selection.activeObject != null)
                 .Action(() => {
                     string objectName = Selection.activeObject.name;
                     Debug.Log(string.Format("Selected object is called '{0}'.", objectName));
                 });
             ]]></code>
             </example>
             <param name="predicate">Predicate that determines whether item is visible by
             returning a value of <c>true</c>.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="predicate"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.On(System.Boolean)">
             <summary>
             Specifies whether menu item should be in an "on" state (aka checked).
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Item is checked!")
                 .On(true)
                 .Action(() => {
                     Debug.Log("Selected checked menu item!");
                 });
             ]]></code>
             </example>
             <param name="on">Indicates if menu item is "on".</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
        </member>
        <member name="M:IGenericMenuAddItemContext.On(System.Func{System.Boolean})">
             <summary>
             Specifies whether menu item should be in an "on" state (aka checked).
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Item is checked!")
                 .On(() => true)
                 .Action(() => {
                     Debug.Log("Selected checked menu item!");
                 });
             ]]></code>
             </example>
             <param name="predicate">Predicate that determines whether item is "on" by
             returning a value of <c>true</c>.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="predicate"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.Action(UnityEditor.GenericMenu.MenuFunction)">
             <summary>
             Finalize addition of menu item by assigning an action to it.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Log message to console!")
                 .Action(() => {
                     Debug.Log("Hello, world!");
                 });
             ]]></code>
             </example>
             <param name="action">Delegate to perform menu action.</param>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="action"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.Action(UnityEditor.GenericMenu.MenuFunction2,System.Object)">
             <summary>
             Finalize addition of menu item by assigning an action to it.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Log message to console!")
                 .Action(userData => {
                     Debug.Log("Hello, {0}!", (string)userData);
                 }, "my friend");
             ]]></code>
             </example>
             <param name="action">Delegate to perform menu action.</param>
             <param name="userData">Additional data that is made available to menu action.</param>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="action"/> is a value of <c>null</c>.
             </exception>
        </member>
    </members>
</doc>
