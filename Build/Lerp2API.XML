<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lerp2API</name>
    </assembly>
    <members>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "T:SimplexNoise.Noise" -->
        <member name="M:SimplexNoise.Noise.Generate(System.Single)">
            <summary>
            1D simplex noise
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SimplexNoise.Noise.Generate(System.Single,System.Single)">
            <summary>
            2D simplex noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SimplexNoise.Noise.Generate(System.Single,System.Single,System.Single)">
            <summary>
            Generates the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="F:SimplexNoise.Noise.perm">
            <summary>
            The perm
            </summary>
        </member>
        <member name="T:NoiseModule">
            <summary>
            Class NoiseModule.
            </summary>
        </member>
        <member name="F:NoiseModule.B">
            <summary>
            The b
            </summary>
        </member>
        <member name="F:NoiseModule.m_perm">
            <summary>
            The m perm
            </summary>
        </member>
        <member name="M:NoiseModule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NoiseModule"/> class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:NoiseModule.Noise1D(System.Single)">
            <summary>
            Noise1s the d.
            </summary>
            <param name="x">The x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseModule.Noise2D(System.Single,System.Single)">
            <summary>
            Noise2s the d.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseModule.Noise3D(System.Single,System.Single,System.Single)">
            <summary>
            Noise3s the d.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseModule.FractalNoise2D(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Fractals the noise2 d.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="octNum">The oct number.</param>
            <param name="frq">The FRQ.</param>
            <param name="amp">The amp.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:NoiseUtil">
            <summary>
            Class NoiseUtil.
            </summary>
        </member>
        <member name="F:NoiseUtil.OctavesMaximum">
            <summary>
            The octaves maximum
            </summary>
        </member>
        <member name="M:NoiseUtil.FADE(System.Single)">
            <summary>
            Fades the specified t.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseUtil.LERP(System.Single,System.Single,System.Single)">
            <summary>
            Lerps the specified t.
            </summary>
            <param name="t">The t.</param>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseUtil.GRAD1(System.Int32,System.Single)">
            <summary>
            Gras the d1.
            </summary>
            <param name="hash">The hash.</param>
            <param name="x">The x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseUtil.GRAD2(System.Int32,System.Single,System.Single)">
            <summary>
            Gras the d2.
            </summary>
            <param name="hash">The hash.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:NoiseUtil.GRAD3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Gras the d3.
            </summary>
            <param name="hash">The hash.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:PerlinNoise">
            <summary>
            Class PerlinNoise.
            </summary>
        </member>
        <member name="M:PerlinNoise.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PerlinNoise"/> class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:PerlinNoise.FractalNoise1D(System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Fractals the noise1 d.
            </summary>
            <param name="x">The x.</param>
            <param name="octNum">The oct number.</param>
            <param name="frq">The FRQ.</param>
            <param name="amp">The amp.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:PerlinNoise.FractalNoise2D(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Fractals the noise2 d.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="octNum">The oct number.</param>
            <param name="frq">The FRQ.</param>
            <param name="amp">The amp.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:PerlinNoise.FractalNoise3D(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Fractals the noise3 d.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="octNum">The oct number.</param>
            <param name="frq">The FRQ.</param>
            <param name="amp">The amp.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:RidgedNoise">
            <summary>
            Class RidgedNoise.
            </summary>
        </member>
        <member name="M:RidgedNoise.FractalNoise2D(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Fractals the noise2 d.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="octNum">The oct number.</param>
            <param name="frq">The FRQ.</param>
            <param name="amp">The amp.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RidgedNoise.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RidgedNoise"/> class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="T:cNoise">
            <summary>
            Class cNoise.
            </summary>
        </member>
        <member name="M:cNoise.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:cNoise"/> class.
            </summary>
            <param name="a_Seed">a seed.</param>
        </member>
        <member name="M:cNoise.#ctor(cNoise)">
            <summary>
            Initializes a new instance of the <see cref="T:cNoise"/> class.
            </summary>
            <param name="a_Noise">a noise.</param>
        </member>
        <member name="M:cNoise.IntNoise1D(System.Int32)">
            <summary>
            Ints the noise1 d.
            </summary>
            <param name="a_X">a x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.IntNoise2D(System.Int32,System.Int32)">
            <summary>
            Ints the noise2 d.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.IntNoise3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ints the noise3 d.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_Z">a z.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.IntNoise2DInRange(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Ints the noise2 d in range.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_Min">a minimum.</param>
            <param name="a_Max">a maximum.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.IntNoise1DInt(System.Int32)">
            <summary>
            Ints the noise1 d int.
            </summary>
            <param name="a_X">a x.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:cNoise.IntNoise2DInt(System.Int32,System.Int32)">
            <summary>
            Ints the noise2 d int.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:cNoise.IntNoise3DInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ints the noise3 d int.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_Z">a z.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:cNoise.LinearNoise1D(System.Single)">
            <summary>
            Linears the noise1 d.
            </summary>
            <param name="a_X">a x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.CosineNoise1D(System.Single)">
            <summary>
            Cosines the noise1 d.
            </summary>
            <param name="a_X">a x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.CubicNoise1D(System.Single)">
            <summary>
            Cubics the noise1 d.
            </summary>
            <param name="a_X">a x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.SmoothNoise1D(System.Int32)">
            <summary>
            Smoothes the noise1 d.
            </summary>
            <param name="a_X">a x.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.CubicNoise2D(System.Single,System.Single)">
            <summary>
            Cubics the noise2 d.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.CubicNoise3D(System.Single,System.Single,System.Single)">
            <summary>
            Cubics the noise3 d.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_Z">a z.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.SetSeed(System.Int32)">
            <summary>
            Sets the seed.
            </summary>
            <param name="a_Seed">a seed.</param>
        </member>
        <member name="M:cNoise.CubicInterpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Cubics the interpolate.
            </summary>
            <param name="a_A">a a.</param>
            <param name="a_B">a b.</param>
            <param name="a_C">a c.</param>
            <param name="a_D">a d.</param>
            <param name="a_Pct">a PCT.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.CosineInterpolate(System.Single,System.Single,System.Single)">
            <summary>
            Cosines the interpolate.
            </summary>
            <param name="a_A">a a.</param>
            <param name="a_B">a b.</param>
            <param name="a_Pct">a PCT.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:cNoise.LinearInterpolate(System.Single,System.Single,System.Single)">
            <summary>
            Linears the interpolate.
            </summary>
            <param name="a_A">a a.</param>
            <param name="a_B">a b.</param>
            <param name="a_Pct">a PCT.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:cVoronoiMap">
            <summary>
            Class cVoronoiMap.
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_Noise1">
            The noise used for generating Voronoi seeds
        </member>
        <member name="F:cVoronoiMap.m_Noise2">
            <summary>
            The m noise2
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_Noise3">
            <summary>
            The m noise3
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_CellSize">
            Size of the Voronoi cells (avg X/Y distance between the seeds). Expected to be at least 2. 
            <summary>
            The m cell size
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_JitterSize">
            The amount that the cell seeds may be offset from the grid.
            	Expected to be at least 1 and less than m_CellSize. 
            <summary>
            The m jitter size
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_OddRowOffset">
            The constant amount that the cell seeds of every odd row will be offset from the grid.
            	This allows us to have non-rectangular grids.
            	Expected to be between -m_CellSize and +m_CellSize. 
            <summary>
            The m odd row offset
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_CurrentCellX">
            The X coordinate of the currently cached cell neighborhood 
            <summary>
            The m current cell x
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_CurrentCellZ">
            The Z coordinate of the currently cached cell neighborhood 
            <summary>
            The m current cell z
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_SeedX">
            The seeds of cells around m_CurrentCellX, m_CurrentCellZ, X-coords 
            <summary>
            The m seed x
            </summary>
        </member>
        <member name="F:cVoronoiMap.m_SeedZ">
            The seeds of cells around m_CurrentCellX, m_CurrentCellZ, X-coords 
            <summary>
            The m seed z
            </summary>
        </member>
        <member name="M:cVoronoiMap.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:cVoronoiMap"/> class.
            </summary>
            <param name="a_Seed">a seed.</param>
            <param name="a_CellSize">Size of a cell.</param>
        </member>
        <member name="M:cVoronoiMap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:cVoronoiMap"/> class.
            </summary>
            <param name="a_Seed">a seed.</param>
        </member>
        <member name="M:cVoronoiMap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:cVoronoiMap"/> class.
            </summary>
            <param name="a_Seed">a seed.</param>
            <param name="a_CellSize">Size of a cell.</param>
            <param name="a_JitterSize">Size of a jitter.</param>
        </member>
        <member name="M:cVoronoiMap.SetCellSize(System.Int32)">
            Sets both the cell size and jitter size used for generating the Voronoi seeds. 
            <summary>
            Sets the size of the cell.
            </summary>
            <param name="a_CellSize">Size of a cell.</param>
        </member>
        <member name="M:cVoronoiMap.SetJitterSize(System.Int32)">
            Sets the jitter size. Clamps it to current cell size. 
            <summary>
            Sets the size of the jitter.
            </summary>
            <param name="a_JitterSize">Size of a jitter.</param>
        </member>
        <member name="M:cVoronoiMap.SetOddRowOffset(System.Int32)">
            Sets the offset that is added to each odd row of cells.
            	This offset makes the voronoi cells align to a non-grid.
            	Clamps the value to [-m_CellSize, +m_CellSize]. 
            <summary>
            Sets the odd row offset.
            </summary>
            <param name="a_OddRowOffset">a odd row offset.</param>
        </member>
        <member name="M:cVoronoiMap.GetValueAt(System.Int32,System.Int32)">
            Returns the value in the cell into which the specified point lies. 
            <summary>
            Gets the value at.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:cVoronoiMap.GetValueAt(System.Int32,System.Int32,System.Int32@)">
            Returns the value in the cell into which the specified point lies,
            	and the distance to the nearest Voronoi seed. 
            <summary>
            Gets the value at.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_MinDist">a minimum dist.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:cVoronoiMap.GetValueAt(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            Returns the value in the cell into which the specified point lies,
            	and the distances to the 2 nearest Voronoi seeds. Uses a cache. 
            <summary>
            Gets the value at.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_NearestSeedX">a nearest seed x.</param>
            <param name="a_NearestSeedY">a nearest seed y.</param>
            <param name="a_MinDist2">a minimum dist2.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:cVoronoiMap.FindNearestSeeds(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            Finds the nearest and second nearest seeds, returns their coords. 
            <summary>
            Finds the nearest seeds.
            </summary>
            <param name="a_X">a x.</param>
            <param name="a_Y">a y.</param>
            <param name="a_NearestSeedX">a nearest seed x.</param>
            <param name="a_NearestSeedY">a nearest seed y.</param>
            <param name="a_SecondNearestSeedX">a second nearest seed x.</param>
            <param name="a_SecondNearestSeedY">a second nearest seed y.</param>
        </member>
        <member name="M:cVoronoiMap.UpdateCell(System.Int32,System.Int32)">
            Updates the cached cell seeds to match the specified cell. Noop if cell pos already matches.
            	Updates m_SeedX and m_SeedZ. 
            <summary>
            Updates the cell.
            </summary>
            <param name="a_CellX">a cell x.</param>
            <param name="a_CellZ">a cell z.</param>
        </member>
        <member name="T:Lerp2API.Attributes.ReadOnlyAttribute">
            <summary>
            Class ReadOnlyAttribute.
            </summary>
            <seealso cref="T:UnityEngine.PropertyAttribute" />
        </member>
        <member name="T:Lerp2API.Communication.Sockets.SocketMessage">
            <summary>
            Class SocketMessage.
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketMessage.id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketMessage.msg">
            <summary>
            The MSG
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketMessage.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketMessage"/> class.
            </summary>
            <param name="i">The i.</param>
            <param name="m">The m.</param>
        </member>
        <member name="T:Lerp2API.Communication.Sockets.SocketClient">
            <summary>
            Class SocketClient.
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketClient.ClientSocket">
            <summary>
            The client socket
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketClient.IP">
            <summary>
            The ip
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketClient.Port">
            <summary>
            The port
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketClient.Id">
            <summary>
            The port
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketClient"/> class.
            </summary>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.#ctor(System.Action,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketClient"/> class.
            </summary>
            <param name="everyFunc">The every function.</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketClient"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.#ctor(System.String,System.Int32,System.Action,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketClient"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
            <param name="everyFunc">The every function.</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.#ctor(System.String,System.Int32,System.Int32,System.Action,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketClient"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
            <param name="readEvery">The read every.</param>
            <param name="everyFunc">The every function.</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.#ctor(System.Net.IPAddress,System.Int32,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Int32,System.Action,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketClient"/> class.
            </summary>
            <param name="ipAddr">The ip addr.</param>
            <param name="port">The port.</param>
            <param name="sType">Type of the s.</param>
            <param name="pType">Type of the p.</param>
            <param name="readEvery">The read every.</param>
            <param name="everyFunc">The every function.</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.StartReceiving">
            <summary>
            Starts the receiving.
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.StopReceiving">
            <summary>
            Stops the receiving.
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.DoConnection">
            <summary>
            Does the connection.
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.Write(System.String)">
            <summary>
            Writes the specified MSG.
            </summary>
            <param name="msg">The MSG.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.WriteLine(System.String)">
            <summary>
            Writes the line.
            </summary>
            <param name="msg">The MSG.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.ReceiveMessage(System.String@)">
            <summary>
            Receives the message.
            </summary>
            <param name="msg">The MSG.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketClient.End">
            <summary>
            Ends this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Communication.Sockets.SocketServer">
            <summary>
            Class SocketServer.
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.ClientInfo.socket">
            <summary>
            The socket
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.ClientInfo.strName">
            <summary>
            The string name
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.lerpedPort">
            <summary>
            The lerped port
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.ServerSocket">
            <summary>
            The server socket
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.Permision">
            <summary>
            The permision
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.IP">
            <summary>
            The ip
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.Port">
            <summary>
            The port
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.allDone">
            <summary>
            All done
            </summary>
        </member>
        <member name="F:Lerp2API.Communication.Sockets.SocketServer.routingTable">
            <summary>
            The routing table
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketServer.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketServer"/> class.
            </summary>
            <param name="debug">if set to <c>true</c> [debug].</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketServer.#ctor(System.String,System.Int32,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketServer"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
            <param name="debug">if set to <c>true</c> [debug].</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketServer.#ctor(System.Net.SocketPermission,System.Net.IPAddress,System.Int32,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Communication.Sockets.SocketServer"/> class.
            </summary>
            <param name="permission">The permission.</param>
            <param name="ipAddr">The ip addr.</param>
            <param name="port">The port.</param>
            <param name="sType">Type of the s.</param>
            <param name="pType">Type of the p.</param>
            <param name="curDebug">if set to <c>true</c> [current debug].</param>
            <param name="fileLog">The file log.</param>
            <param name="doConnection">if set to <c>true</c> [do connection].</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketServer.ComeAlive">
            <summary>
            Comes the alive.
            </summary>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketServer.OnSend(System.IAsyncResult)">
            <summary>
            Called when [send].
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:Lerp2API.Communication.Sockets.SocketServer.CloseServer">
            <summary>
            Closes the server.
            </summary>
        </member>
        <member name="T:Lerp2API.Controllers.PersonView.LocalPersonViewToggle">
            <summary>
            Class LocalPersonViewToggle.
            Toggle Camera View in a local component, not used in the player
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.localObjPos">
            <summary>
            The local object position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.localObjRot">
            <summary>
            The local object position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.t_localObj">
            <summary>
            The t local object
            </summary>
        </member>
        <member name="P:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.worldObjPos">
            <summary>
            Gets the world object position.
            </summary>
            <value>The world object position.</value>
        </member>
        <member name="M:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.Init(UnityEngine.GameObject,Lerp2API.Hepers.Unity_Extensions.Utils.KeyMap)">
            <summary>
            Initializes the specified go.
            </summary>
            <param name="go">The go.</param>
            <param name="map">The map.</param>
            <returns>LocalPersonViewToggle.</returns>
        </member>
        <member name="M:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.Controllers.PersonView.LocalPersonViewToggle.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Controllers.PersonView.PersonViewToggle">
            <summary>
            Class PersonViewToggle.
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.me">
            <summary>
            Me
            </summary>
        </member>
        <member name="P:Lerp2API.Controllers.PersonView.PersonViewToggle.t_FirstPerson">
            <summary>
            Gets the t first person.
            </summary>
            <value>The t first person.</value>
        </member>
        <member name="P:Lerp2API.Controllers.PersonView.PersonViewToggle.t_ThirdPerson">
            <summary>
            Gets the t third person.
            </summary>
            <value>The t third person.</value>
        </member>
        <member name="P:Lerp2API.Controllers.PersonView.PersonViewToggle.o_FirstPerson">
            <summary>
            Gets the o first person.
            </summary>
            <value>The o first person.</value>
        </member>
        <member name="P:Lerp2API.Controllers.PersonView.PersonViewToggle.o_ThirdPerson">
            <summary>
            Gets the o third person.
            </summary>
            <value>The o third person.</value>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.isLocal">
            <summary>
            The is local
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.curView">
            <summary>
            The current view
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.lastView">
            <summary>
            The current view
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.changeView">
            <summary>
            The change view
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.firstPersonCameraPos">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.thirdPersonCameraPos">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.firstPersonCameraRot">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.thirdPersonCameraRot">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.firstPersonCameraLocalPos">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.thirdPersonCameraLocalPos">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.firstPersonCameraLocalRot">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonViewToggle.thirdPersonCameraLocalRot">
            <summary>
            The first person camera position
            </summary>
        </member>
        <member name="M:Lerp2API.Controllers.PersonView.PersonViewToggle.ToggleControl(Lerp2API.Controllers.PersonView.LocalPersonViewToggle)">
            <summary>
            Toggles the control.
            </summary>
            <param name="local">The local.</param>
        </member>
        <member name="M:Lerp2API.Controllers.PersonView.PersonViewToggle.RecheckChars">
            <summary>
            Rechecks the chars.
            </summary>
        </member>
        <member name="M:Lerp2API.Controllers.PersonView.PersonViewToggle.ToggleView">
            <summary>
            Toggles the view.
            </summary>
        </member>
        <member name="T:Lerp2API.Controllers.PersonView.PersonView">
            <summary>
            Enum PersonView
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonView.First">
            <summary>
            The first
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.PersonView.PersonView.Third">
            <summary>
            The third
            </summary>
        </member>
        <member name="T:Lerp2API.Controllers.Utils.DontGoThroughThings">
            <summary>
            Class DontGoThroughThings.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2API.Controllers.Utils.DontGoThroughThings.sendTriggerMessage">
            <summary>
            The send trigger message
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.Utils.DontGoThroughThings.layerMask">
            <summary>
            The layer mask
            </summary>
        </member>
        <member name="F:Lerp2API.Controllers.Utils.DontGoThroughThings.skinWidth">
            <summary>
            The skin width
            </summary>
        </member>
        <member name="T:Lerp2API.Controllers.Utils.Teleporter">
            <summary>
            Class Teleporter.
            </summary>
        </member>
        <member name="M:Lerp2API.Controllers.Utils.Teleporter.Teleport(System.Single,System.Single)">
            <summary>
            Teleports the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Lerp2API.Controllers.Utils.Teleporter.Teleport(System.Single,System.Single,System.Single)">
            <summary>
            Teleports the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Lerp2API.Controllers.Utils.Teleporter.Teleport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Teleports the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="z">The z.</param>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
        </member>
        <member name="M:Lerp2API.Controllers.Utils.Teleporter.Teleport(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Teleports the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
        </member>
        <member name="T:Lerp2API.Controllers.Utils.WindArea">
            <summary>
            Class WindArea.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:Lerp2API.Controllers._Canvas.CanvasController">
            <summary>
            Class CanvasController.
            </summary>
        </member>
        <member name="M:Lerp2API.Controllers._Canvas.CanvasController.CreateCanvas(System.String)">
            <summary>
            Creates the canvas.
            </summary>
            <param name="goName">Name of the go.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Lerp2API.Controllers._Canvas.CanvasController.AddTextToCanvas(UnityEngine.GameObject,UnityEngine.Vector2)">
            <summary>
            Adds the text to canvas.
            </summary>
            <param name="canvas">The canvas.</param>
            <param name="size">The size.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="T:Lerp2API._Debug.Debug">
            <summary>
            Class Debug.
            </summary>
            <seealso cref="T:Lerp2API.Game.GameConsole" />
        </member>
        <member name="P:Lerp2API._Debug.Debug.isEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
            <value><c>true</c> if this instance is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2API._Debug.Debug.HookLog">
            <summary>
            Hooks the log.
            </summary>
        </member>
        <member name="M:Lerp2API._Debug.Debug.UnhookLog">
            <summary>
            Unhooks the log.
            </summary>
        </member>
        <member name="P:Lerp2API._Debug.Debug.isGameVersionEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is game version enabled.
            </summary>
            <value><c>true</c> if this instance is game version enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API._Debug.Debug.developerConsoleVisible">
            <summary>
            Gets or sets a value indicating whether [developer console visible].
            </summary>
            <value><c>true</c> if [developer console visible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API._Debug.Debug.isDebugBuild">
            <summary>
            Gets a value indicating whether this instance is debug build.
            </summary>
            <value><c>true</c> if this instance is debug build; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API._Debug.Debug.logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Assert(System.Boolean)">
            <summary>
            Asserts the specified condition.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Assert(System.Boolean,System.String)">
            <summary>
            Asserts the specified condition.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Assert(System.Boolean,System.Object)">
            <summary>
            Asserts the specified condition.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Assert(System.Boolean,System.String,UnityEngine.Object)">
            <summary>
            Asserts the specified condition.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Assert(System.Boolean,System.Object,UnityEngine.Object,System.Boolean)">
            <summary>
            Asserts the specified condition.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="str">if set to <c>true</c> [string].</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.AssertFormat(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts the format.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Break">
            <summary>
            Breaks this instance.
            </summary>
        </member>
        <member name="M:Lerp2API._Debug.Debug.ClearDeveloperConsole">
            <summary>
            Clears the developer console.
            </summary>
        </member>
        <member name="M:Lerp2API._Debug.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration.</param>
            <param name="width">The width.</param>
            <param name="depthTest">if set to <c>true</c> [depth test].</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the ray.
            </summary>
            <param name="start">The start.</param>
            <param name="dir">The dir.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration.</param>
            <param name="width">The width.</param>
            <param name="depthTest">if set to <c>true</c> [depth test].</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogAssertion(System.Object,UnityEngine.Object)">
            <summary>
            Logs the assertion.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogAssertionFormat(System.String)">
            <summary>
            Logs the assertion format.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogAssertionFormat(System.String,System.Object[])">
            <summary>
            Logs the assertion format.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Log(System.String)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogFormat(System.String,System.Object[])">
            <summary>
            Logs the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogFormat(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the format.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogWarning(System.String)">
            <summary>
            Logs the warning.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogWarning(System.Object)">
            <summary>
            Logs the warning.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogWarningFormat(System.String,System.Object[])">
            <summary>
            Logs the warning format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogWarningFormat(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the warning format.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogError(System.String)">
            <summary>
            Logs the error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogError(System.Object)">
            <summary>
            Logs the error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogErrorFormat(System.String,System.Object[])">
            <summary>
            Logs the error format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogErrorFormat(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the error format.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.LogException(System.Exception,UnityEngine.Object)">
            <summary>
            Logs the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.DrawCube(UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Vector3)">
            <summary>
            Draws the cube.
            </summary>
            <param name="pos">The position.</param>
            <param name="col">The col.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.DrawRect(UnityEngine.Rect,UnityEngine.Color)">
            <summary>
            Draws the rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="col">The col.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.DrawRect(UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Vector3)">
            <summary>
            Draws the rect.
            </summary>
            <param name="pos">The position.</param>
            <param name="col">The col.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.DrawPoint(UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draws the point.
            </summary>
            <param name="pos">The position.</param>
            <param name="col">The col.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Lerp2API._Debug.Debug.WriteSafeStacktrace">
            <summary>
            Writes the safe stacktrace.
            </summary>
        </member>
        <member name="M:Lerp2API._Debug.Debug.WriteSafeStacktrace(Lerp2API.SafeECalls.Logger)">
            <summary>
            Writes the safe stacktrace.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:Lerp2API._Debug.DebugColor">
            <summary>
            Class DebugColor.
            </summary>
        </member>
        <member name="P:Lerp2API._Debug.DebugColor.normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:Lerp2API._Debug.DebugColor.warning">
            <summary>
            Gets the warning.
            </summary>
            <value>The warning.</value>
        </member>
        <member name="P:Lerp2API._Debug.DebugColor.error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Lerp2API._Debug.DebugColor.assert">
            <summary>
            Gets the assert.
            </summary>
            <value>The assert.</value>
        </member>
        <member name="P:Lerp2API._Debug.DebugColor.assertion">
            <summary>
            Gets the assertion.
            </summary>
            <value>The assertion.</value>
        </member>
        <member name="P:Lerp2API._Debug.DebugColor.exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Lerp2API.Effects._Text.Controllers.TextGuideController">
            <summary>
            Class TextGuideController.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2API.Effects._Text.Controllers.TextGuideController.transitionStarted">
            <summary>
            The transition started
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.Controllers.TextGuideController.txtGuide">
            <summary>
            The text guide
            </summary>
        </member>
        <member name="P:Lerp2API.Effects._Text.Controllers.TextGuideController.intShowed">
            <summary>
            Gets a value indicating whether [int showed].
            </summary>
            <value><c>true</c> if [int showed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2API.Effects._Text.Controllers.TextGuideController.NewInstance(Lerp2API.Effects._Text.TextGuideBase)">
            <summary>
            News the instance.
            </summary>
            <param name="tg">The tg.</param>
            <returns>TextGuideController.</returns>
        </member>
        <member name="M:Lerp2API.Effects._Text.Controllers.TextGuideController.BreakAnimation(System.Boolean)">
            <summary>
            Breaks the animation.
            </summary>
            <param name="showed">if set to <c>true</c> [showed].</param>
        </member>
        <member name="M:Lerp2API.Effects._Text.Controllers.TextGuideController.Show">
            <summary>
            Shows this instance.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:Lerp2API.Effects._Text.Controllers.TextGuideController.Hide">
            <summary>
            Hides this instance.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:Lerp2API.Effects._Text.TextSize">
            <summary>
            Class TextSize.
            </summary>
        </member>
        <member name="P:Lerp2API.Effects._Text.TextSize.width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextSize.#ctor(UnityEngine.TextMesh)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Effects._Text.TextSize"/> class.
            </summary>
            <param name="tm">The tm.</param>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextSize.FitToWidth(System.Single,System.Int32)">
            <summary>
            Fits to width.
            </summary>
            <param name="wantedWidth">Width of the wanted.</param>
            <param name="maxLines">The maximum lines.</param>
        </member>
        <member name="T:Lerp2API.Effects._Text.TextSizeUtils">
            <summary>
            Class TextSizeUtils.
            </summary>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextSizeUtils.GetSize(UnityEngine.TextMesh)">
            <summary>
            Gets the size.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="T:Lerp2API.Effects._Text.TextGuideBase">
            <summary>
            Class TextGuideBase.
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.textObj">
            <summary>
            The text object
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.backPlane">
            <summary>
            The text object
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.neededTag">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.animSecs">
            <summary>
            The anim secs
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.backStoredScale">
            <summary>
            The back stored scale
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.mainStoredScale">
            <summary>
            The back stored scale
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.freezeVisibility">
            <summary>
            The freeze visibility
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.showPlane">
            <summary>
            The freeze visibility
            </summary>
        </member>
        <member name="F:Lerp2API.Effects._Text.TextGuideBase.guide">
            <summary>
            The guide
            </summary>
        </member>
        <member name="P:Lerp2API.Effects._Text.TextGuideBase.isShowed">
            <summary>
            Gets or sets a value indicating whether this instance is showed.
            </summary>
            <value><c>true</c> if this instance is showed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.Effects._Text.TextGuideBase.casted">
            <summary>
            Gets a value indicating whether this <see cref="T:Lerp2API.Effects._Text.TextGuideBase"/> is casted.
            </summary>
            <value><c>true</c> if casted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextGuideBase.SetDefaultValues(Lerp2API.Effects._Text.TextGuideBase)">
            <summary>
            Sets the default values.
            </summary>
            <param name="tg">The tg.</param>
            <returns>TextGuideBase.</returns>
        </member>
        <member name="P:Lerp2API.Effects._Text.TextGuideBase.OutlineColor">
            <summary>
            Gets or sets the color of the outline.
            </summary>
            <value>The color of the outline.</value>
        </member>
        <member name="P:Lerp2API.Effects._Text.TextGuideBase.OutlineSize">
            <summary>
            Gets or sets the size of the outline.
            </summary>
            <value>The size of the outline.</value>
        </member>
        <member name="P:Lerp2API.Effects._Text.TextGuideBase.PlaneColor">
            <summary>
            Gets or sets the color of the plane.
            </summary>
            <value>The color of the plane.</value>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextGuideBase.#ctor(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Effects._Text.TextGuideBase"/> class.
            </summary>
            <param name="pa">The pa.</param>
            <param name="po">The po.</param>
            <param name="sc">The sc.</param>
            <param name="sz">The sz.</param>
            <param name="te">The te.</param>
            <param name="tg">The tg.</param>
            <param name="sp">if set to <c>true</c> [sp].</param>
            <param name="ans">The ans.</param>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextGuideBase.ToggleVisibility">
            <summary>
            Toggles the visibility.
            </summary>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextGuideBase.Show(System.Boolean)">
            <summary>
            Shows the specified update state.
            </summary>
            <param name="updateState">if set to <c>true</c> [update state].</param>
        </member>
        <member name="M:Lerp2API.Effects._Text.TextGuideBase.Hide(System.Boolean)">
            <summary>
            Hides the specified update state.
            </summary>
            <param name="updateState">if set to <c>true</c> [update state].</param>
        </member>
        <member name="T:Lerp2API.Game.FPSCounter">
            <summary>
            Class FPSCounter.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2API.Game.FPSCounter.m_updateInterval">
            <summary>
            The m update interval
            </summary>
        </member>
        <member name="F:Lerp2API.Game.FPSCounter.width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Lerp2API.Game.FPSCounter.height">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Lerp2API.Game.FPSCounter.m_counterPosition">
            <summary>
            The m counter position
            </summary>
        </member>
        <member name="F:Lerp2API.Game.FPSCounter.m_fontSize">
            <summary>
            The m font size
            </summary>
        </member>
        <member name="P:Lerp2API.Game.FPSCounter.FramesPerSec">
            <summary>
            Gets or sets the frames per sec.
            </summary>
            <value>The frames per sec.</value>
        </member>
        <member name="T:Lerp2API.Game.Command">
            <summary>
            Class Command.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Command.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Command.command">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Command.linkedMethod">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Command.generalHelp">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Command.aliases">
            <summary>
            The aliases
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Command.paramSets">
            <summary>
            The parameter sets
            </summary>
        </member>
        <member name="M:Lerp2API.Game.Command.ParseParams(System.String,Lerp2API.Game.Param[]@,System.Int32@)">
            <summary>
            Parses the parameters.
            </summary>
            <param name="chatParams">The chat parameters.</param>
            <param name="listOfParams">The list of parameters.</param>
            <param name="posUsed">The position used.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Game.Command.DisplayHelp">
            <summary>
            Displays the help.
            </summary>
        </member>
        <member name="T:Lerp2API.Game.ParamSet">
            <summary>
            Class ParamSet.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.ParamSet.paramSet">
            <summary>
            The parameter set
            </summary>
        </member>
        <member name="F:Lerp2API.Game.ParamSet.helpString">
            <summary>
            The help string
            </summary>
        </member>
        <member name="M:Lerp2API.Game.ParamSet.#ctor(Lerp2API.Game.Param[])">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.ParamSet"/> class.
            </summary>
            <param name="ps">The ps.</param>
        </member>
        <member name="M:Lerp2API.Game.ParamSet.#ctor(Lerp2API.Game.Param[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.ParamSet"/> class.
            </summary>
            <param name="ps">The ps.</param>
            <param name="hs">The hs.</param>
        </member>
        <member name="M:Lerp2API.Game.ParamSet.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Lerp2API.Game.ParamSet.ParamSetRecognizion(System.String[],Lerp2API.Game.Command,Lerp2API.Game.Param[]@,System.Int32@)">
            <summary>
            Parameters the set recognizion.
            </summary>
            <param name="chatParams">The chat parameters.</param>
            <param name="c">The c.</param>
            <param name="set">The set.</param>
            <param name="posUsed">The position used.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Lerp2API.Game.Param">
            <summary>
            Class Param.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Param.varType">
            <summary>
            The variable type
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Param.obj">
            <summary>
            The object
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Param.paramName">
            <summary>
            The parameter name
            </summary>
        </member>
        <member name="M:Lerp2API.Game.Param.#ctor(Lerp2API.Game.Types,Lerp2API.Game.UniCast)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.Param"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Lerp2API.Game.Param.#ctor(Lerp2API.Game.Types,Lerp2API.Game.UniCast,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.Param"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="o">The o.</param>
            <param name="pn">The pn.</param>
        </member>
        <member name="M:Lerp2API.Game.Param.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Lerp2API.Game.UniCast">
            <summary>
            Class UniCast.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.UniCast.currentType">
            <summary>
            The current type
            </summary>
        </member>
        <member name="M:Lerp2API.Game.UniCast.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.UniCast"/> class.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="M:Lerp2API.Game.UniCast.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.UniCast"/> class.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:Lerp2API.Game.UniCast.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.UniCast"/> class.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:Lerp2API.Game.UniCast.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.UniCast"/> class.
            </summary>
            <param name="b">if set to <c>true</c> [b].</param>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Implicit(System.String)~Lerp2API.Game.UniCast">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Lerp2API.Game.UniCast"/>.
            </summary>
            <param name="s">The s.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Explicit(Lerp2API.Game.UniCast)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Lerp2API.Game.UniCast"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="uc">The uc.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Implicit(System.Int32)~Lerp2API.Game.UniCast">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Lerp2API.Game.UniCast"/>.
            </summary>
            <param name="i">The i.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Explicit(Lerp2API.Game.UniCast)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Lerp2API.Game.UniCast"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="uc">The uc.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Implicit(System.Decimal)~Lerp2API.Game.UniCast">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Lerp2API.Game.UniCast"/>.
            </summary>
            <param name="d">The d.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Explicit(Lerp2API.Game.UniCast)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Lerp2API.Game.UniCast"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="uc">The uc.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Implicit(System.Boolean)~Lerp2API.Game.UniCast">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Lerp2API.Game.UniCast"/>.
            </summary>
            <param name="b">if set to <c>true</c> [b].</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.UniCast.op_Explicit(Lerp2API.Game.UniCast)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Lerp2API.Game.UniCast"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="uc">The uc.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Lerp2API.Game.GameConsole">
            <summary>
            Class GameConsole.
            </summary>
            <seealso cref="T:Lerp2API.LerpedCore" />
        </member>
        <member name="F:Lerp2API.Game.GameConsole.me">
            <summary>
            Me
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.cm">
            <summary>
            The cm
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.height">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.m_consolePosition">
            <summary>
            The m console position
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.commandList">
            <summary>
            The command list
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.m_showCursor">
            <summary>
            The m show cursor
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.m_disableDebug">
            <summary>
            The m show cursor
            </summary>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.SendMessage(System.String,System.Boolean)">
            <summary>
            Sends the message.
            </summary>
            <param name="input">The input.</param>
            <param name="resetForce">if set to <c>true</c> [reset force].</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.Draw(System.Single)">
            <summary>
            Draws the specified maximum queries.
            </summary>
            <param name="maxQueries">The maximum queries.</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.DrawUnderline(UnityEngine.Rect,Lerp2API.Game.GameConsole.FMessage)">
            <summary>
            Draws the underline.
            </summary>
            <param name="r">The r.</param>
            <param name="fm">The fm.</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.GetUnderline(UnityEngine.Rect,UnityEngine.Vector2,System.Int32,System.String,System.String,Lerp2API.Game.SStyles)">
            <summary>
            Gets the underline.
            </summary>
            <param name="r">The r.</param>
            <param name="p">The p.</param>
            <param name="rpos">The rpos.</param>
            <param name="os">The os.</param>
            <param name="s">The s.</param>
            <param name="ss">The ss.</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.GetTimes(System.Int32,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.Single,Lerp2API.Game.SStyles,System.Boolean)">
            <summary>
            Gets the times.
            </summary>
            <param name="t">The t.</param>
            <param name="r">The r.</param>
            <param name="p">The p.</param>
            <param name="rst">The RST.</param>
            <param name="w">The w.</param>
            <param name="ss">The ss.</param>
            <param name="more">if set to <c>true</c> [more].</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.RemoveUndesiredTags(System.String)">
            <summary>
            Removes the undesired tags.
            </summary>
            <param name="s">The s.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.GetRandomness(Lerp2API.Game.GameConsole.FMessage)">
            <summary>
            Gets the randomness.
            </summary>
            <param name="fm">The fm.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.GetRandString(System.Int32)">
            <summary>
            Gets the rand string.
            </summary>
            <param name="len">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Game.GameConsole.Message">
            <summary>
            Class Message.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.Message.currentIndex">
            <summary>
            The current index
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.Message.LogHistory">
            <summary>
            The log history
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.Message.firstTime">
            <summary>
            The first time
            </summary>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.Message.Add(Lerp2API.Game.GameConsole.FMessage)">
            <summary>
            Adds the specified fm.
            </summary>
            <param name="fm">The fm.</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.Message.Show">
            <summary>
            Shows this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Game.GameConsole.FMessage">
            <summary>
            Class FMessage.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.FMessage.message">
            <summary>
            The message
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.FMessage.unformatted">
            <summary>
            The message
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.FMessage.formatted">
            <summary>
            The formatted
            </summary>
        </member>
        <member name="P:Lerp2API.Game.GameConsole.FMessage.randomness">
            <summary>
            Gets the randomness.
            </summary>
            <value>The randomness.</value>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.FMessage.op_Implicit(System.String)~Lerp2API.Game.GameConsole.FMessage">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Lerp2API.Game.GameConsole.FMessage"/>.
            </summary>
            <param name="s">The s.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.FMessage.op_Explicit(Lerp2API.Game.GameConsole.FMessage)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Lerp2API.Game.GameConsole.FMessage"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="fm">The fm.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Lerp2API.Game.GameConsole.FText">
            <summary>
            Class FText.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.FText.len">
            <summary>
            The length
            </summary>
        </member>
        <member name="F:Lerp2API.Game.GameConsole.FText.style">
            <summary>
            The style
            </summary>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.FText.#ctor(System.Int32,Lerp2API.Game.SStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Game.GameConsole.FText"/> class.
            </summary>
            <param name="l">The l.</param>
            <param name="ss">The ss.</param>
        </member>
        <member name="M:Lerp2API.Game.GameConsole.FText.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Lerp2API.Game.Types">
            <summary>
            Enum Types
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Types.Unknown">
            <summary>
            Enum SStyles
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Types.Int">
            <summary>
            The int
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Types.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Types.Float">
            <summary>
            The float
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Types.Bool">
            <summary>
            The bool
            </summary>
        </member>
        <member name="T:Lerp2API.Game.Styles">
            <summary>
            Enum TaskState
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Styles.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Styles.Bold">
            <summary>
            The Optimizers namespace.
            </summary>
            <summary>
            The Optimizers namespace.
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Styles.Italic">
            <summary>
            The italic
            </summary>
        </member>
        <member name="F:Lerp2API.Game.Styles.Color">
            <summary>
            Enum Direction
            </summary>
        </member>
        <member name="T:Lerp2API.Game.SStyles">
            <summary>
            Enum SStyles
            </summary>
        </member>
        <member name="F:Lerp2API.Game.SStyles.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Lerp2API.Game.SStyles.Underline">
            <summary>
            The underline
            </summary>
        </member>
        <member name="F:Lerp2API.Game.SStyles.Obfuscated">
            <summary>
            The obfuscated
            </summary>
        </member>
        <member name="F:Lerp2API.Game.SStyles.Strike">
            <summary>
            The single quote
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Debug_Utils.DebugHelpers">
            <summary>
            Class DebugHelpers.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Debug_Utils.DebugHelpers.DetailedMessage(System.String,Lerp2API.SafeECalls.LoggerType)">
            <summary>
            Detaileds the message.
            </summary>
            <param name="message">The message.</param>
            <param name="t">The t.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.JSON_Extensions.JSONHelpers">
            <summary>
            Class JSONHelpers.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.JSON_Extensions.JSONHelpers.Serialize``1(``0,System.Boolean)">
            <summary>
            Serializes the specified pretty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="pretty">if set to <c>true</c> [pretty].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.JSON_Extensions.JSONHelpers.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified serialized state.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedState">State of the serialized.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.JSON_Extensions.JSONHelpers.SerializeToFile``1(``0,System.String,System.Boolean)">
            <summary>
            Serializes to file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <param name="value">The value.</param>
            <param name="pretty">if set to <c>true</c> [pretty].</param>
        </member>
        <member name="M:Lerp2API.Hepers.JSON_Extensions.JSONHelpers.DeserializeFromFile``1(System.String)">
            <summary>
            Deserializes from file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.JSON_Extensions.JSONHelpers.IsJson(System.String)">
            <summary>
            Determines whether the specified input is json.
            </summary>
            <param name="input">The input.</param>
            <returns><c>true</c> if the specified input is json; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Rect_Utils.RectHelpers">
            <summary>
            Class RectHelpers.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Rect_Utils.RectHelpers.GetPosition(Lerp2API.Position,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the position.
            </summary>
            <param name="pos">The position.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <param name="mh">The mh.</param>
            <param name="mv">The mv.</param>
            <returns>Rect.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Serializer_Helpers.PluginsHelper">
            <summary>
            Class PluginsHelper.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Serializer_Helpers.PluginsHelper.objList">
            <summary>
            The object list
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.PluginsHelper.Add(UnityEngine.GameObject)">
            <summary>
            Adds the specified go.
            </summary>
            <param name="go">The go.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.PluginsHelper.FindMeshFilter(UnityEngine.GameObject,UnityEngine.GameObject@)">
            <summary>
            Finds the mesh filter.
            </summary>
            <param name="go">The go.</param>
            <param name="foundGo">The found go.</param>
            <returns>MeshFilter.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.PluginsHelper.FindSkinnedMeshRenderer(UnityEngine.GameObject,UnityEngine.GameObject@)">
            <summary>
            Finds the skinned mesh renderer.
            </summary>
            <param name="go">The go.</param>
            <param name="foundGo">The found go.</param>
            <returns>SkinnedMeshRenderer.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.PluginsHelper.FindMesh(UnityEngine.GameObject,UnityEngine.GameObject@)">
            <summary>
            Finds the mesh.
            </summary>
            <param name="obj">The object.</param>
            <param name="foundGo">The found go.</param>
            <returns>Mesh.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers">
            <summary>
            Class SerializerHelpers.
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter">
            <summary>
            Class Transporter.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter.write">
            <summary>
            The write
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter.obj">
            <summary>
            The object
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter"/> class.
            </summary>
            <param name="o">The o.</param>
            <param name="w">if set to <c>true</c> [w].</param>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.SaveAsAsset``1(System.String,``0,System.String,System.Boolean)">
            <summary>
            Saves as asset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str">The string.</param>
            <param name="obj">The object.</param>
            <param name="name">The name.</param>
            <param name="w">if set to <c>true</c> [w].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.SaveAsAsset``1(System.String[],``0,System.String)">
            <summary>
            Saves as asset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strs">The STRS.</param>
            <param name="obj">The object.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.SaveAsAsset``1(System.Byte[],``0,System.String)">
            <summary>
            Saves as asset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">The arr.</param>
            <param name="obj">The object.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.SaveAsAsset``1(Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.Transporter,``0,System.String)">
            <summary>
            Saves as asset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="obj">The object.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Not recognised type!</exception>
        </member>
        <member name="M:Lerp2API.Hepers.Serializer_Helpers.SerializerHelpers.LoadAsset(System.String)">
            <summary>
            Loads the asset.
            </summary>
            <param name="fpath">The fpath.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine">
            <summary>
            Class AdvancedCoroutine.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine.startTime">
            <summary>
            The start time
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine.cor">
            <summary>
            The cor
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine.#ctor(UnityEngine.MonoBehaviour,System.Action{Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine"/> class.
            </summary>
            <param name="m">The m.</param>
            <param name="a">a.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine.StopCoroutine">
            <summary>
            Stops the coroutine.
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.BadOptimized">
            <summary>
            Class BadOptimized.
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.RequiredAttrs">
            <summary>
            Class RequiredAttrs.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.RequiredAttrs.Attributes">
            <summary>
            The attributes
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.RequiredAttrs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Hepers.Unity_Extensions.RequiredAttrs"/> class.
            </summary>
            <param name="attrs">The attrs.</param>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.AppReflection">
            <summary>
            Class AppReflection.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.AppReflection.SetField(System.Object,System.String,System.Object)">
            <summary>
            Sets the field.
            </summary>
            <param name="inObj">The in object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.AppReflection.GetField(System.Object,System.String)">
            <summary>
            Gets the field.
            </summary>
            <param name="inObj">The in object.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.AppReflection.GetProp(System.Object,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="inObj">The in object.</param>
            <param name="propName">Name of the property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.CharacterUtils">
            <summary>
            Class CharacterUtils.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.CharacterUtils.isInit">
            <summary>
            The is initialize
            </summary>
        </member>
        <member name="P:Lerp2API.Hepers.Unity_Extensions.Utils.CharacterUtils.IsControlled">
            <summary>
            Gets a value indicating whether this instance is controlled.
            </summary>
            <value><c>true</c> if this instance is controlled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.CharacterUtils.Init(UnityEngine.Transform)">
            <summary>
            Initializes the specified player.
            </summary>
            <param name="player">The player.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.CharacterUtils.ToggleControl">
            <summary>
            Toggles the control.
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.KeyMap">
            <summary>
            Class KeyMap.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.KeyMap.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Hepers.Unity_Extensions.Utils.KeyMap"/> class.
            </summary>
            <param name="n">The n.</param>
            <param name="kc">The kc.</param>
        </member>
        <member name="P:Lerp2API.Hepers.Unity_Extensions.Utils.KeyMap.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.KeyCode"/> with the specified s.
            </summary>
            <param name="s">The s.</param>
            <returns>KeyCode.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.KeyMap.IsKeyDef(System.String)">
            <summary>
            Determines whether [is key definition] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if [is key definition] [the specified key]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils">
            <summary>
            Class LayerUtils.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.AllLayers(System.Int32,System.String[])">
            <summary>
            Alls the layers.
            </summary>
            <param name="cullingMask">The culling mask.</param>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.OneLayer(System.Int32,System.String)">
            <summary>
            Called when [layer].
            </summary>
            <param name="cullingMask">The culling mask.</param>
            <param name="layer">The layer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.ExceptLayers(System.Int32,System.String[])">
            <summary>
            Excepts the layers.
            </summary>
            <param name="cullingMask">The culling mask.</param>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.ExceptOneLayer(System.Int32,System.String)">
            <summary>
            Excepts the one layer.
            </summary>
            <param name="cullingMask">The culling mask.</param>
            <param name="layer">The layer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.MultiXORLayers(System.Int32,System.String[])">
            <summary>
            Multis the xor layers.
            </summary>
            <param name="cullingMask">The culling mask.</param>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.SingleXORLayer(System.Int32,System.String)">
            <summary>
            Singles the xor layer.
            </summary>
            <param name="cullingMask">The culling mask.</param>
            <param name="layer">The layer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.AllLayers(System.String[])">
            <summary>
            Alls the layers.
            </summary>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.OneLayer(System.String)">
            <summary>
            Called when [layer].
            </summary>
            <param name="layer">The layer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.ExceptLayers(System.String[])">
            <summary>
            Excepts the layers.
            </summary>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.ExceptOneLayer(System.String)">
            <summary>
            Excepts the one layer.
            </summary>
            <param name="layer">The layer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.MultiXORLayers(System.String[])">
            <summary>
            Multis the xor layers.
            </summary>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LayerUtils.SingleXORLayer(System.String)">
            <summary>
            Singles the xor layer.
            </summary>
            <param name="layer">The layer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils">
            <summary>
            Class LineRendererUtils.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.maxNodes">
            <summary>
            The maximum nodes
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.Instantiate(System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,UnityEngine.GameObject@,UnityEngine.LineRenderer@)">
            <summary>
            Instantiates the specified start width.
            </summary>
            <param name="startWidth">The start width.</param>
            <param name="endWidth">The end width.</param>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
            <param name="obj">The object.</param>
            <param name="lr">The lr.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.Instantiate(Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle,UnityEngine.GameObject@,UnityEngine.LineRenderer@)">
            <summary>
            Instantiates the specified LRS.
            </summary>
            <param name="lrs">The LRS.</param>
            <param name="obj">The object.</param>
            <param name="lr">The lr.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.AddPoint(UnityEngine.Vector3,UnityEngine.LineRenderer@)">
            <summary>
            Adds the point.
            </summary>
            <param name="point">The point.</param>
            <param name="lr">The lr.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.Instatiate(UnityEngine.GameObject,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Instatiates the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="startWidth">The start width.</param>
            <param name="endWidth">The end width.</param>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
            <returns>LineRenderer.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.GetFirstPoint(UnityEngine.LineRenderer)">
            <summary>
            Gets the first point.
            </summary>
            <param name="lr">The lr.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.GetLastPoint(UnityEngine.LineRenderer)">
            <summary>
            Gets the last point.
            </summary>
            <param name="lr">The lr.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererUtils.GetPoint(UnityEngine.LineRenderer,System.Int32)">
            <summary>
            Gets the point.
            </summary>
            <param name="lr">The lr.</param>
            <param name="index">The index.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle">
            <summary>
            Class LineRendererStyle.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.mat">
            <summary>
            The mat
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.startWidth">
            <summary>
            The start width
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.endWidth">
            <summary>
            The start width
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.startColor">
            <summary>
            The start color
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.endColor">
            <summary>
            The start color
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.#ctor(UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,UnityEngine.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle"/> class.
            </summary>
            <param name="sc">The sc.</param>
            <param name="ec">The ec.</param>
            <param name="sw">The sw.</param>
            <param name="ew">The ew.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.LineRendererStyle.ApplyStyles(UnityEngine.LineRenderer@)">
            <summary>
            Applies the styles.
            </summary>
            <param name="lr">The lr.</param>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.PlayerUtils">
            <summary>
            Class PlayerUtils.
            </summary>
        </member>
        <member name="P:Lerp2API.Hepers.Unity_Extensions.Utils.PlayerUtils.player">
            <summary>
            Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:Lerp2API.Hepers.Unity_Extensions.Utils.PlayerUtils.FPSControllerObject">
            <summary>
            Gets the FPS controller object.
            </summary>
            <value>The FPS controller object.</value>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.PlayerUtils.GetCurView">
            <summary>
            Gets the current view.
            </summary>
            <returns>PersonView.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.Utils.RequiredHaviour">
            <summary>
            Class RequiredHaviour.
            </summary>
        </member>
        <member name="F:Lerp2API.Hepers.Unity_Extensions.Utils.RequiredHaviour.me">
            <summary>
            Me
            </summary>
        </member>
        <member name="P:Lerp2API.Hepers.Unity_Extensions.Utils.RequiredHaviour.allowContinue">
            <summary>
            Gets or sets a value indicating whether [allow continue].
            </summary>
            <value><c>true</c> if [allow continue]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.Hepers.Unity_Extensions.Utils.RequiredHaviour.parentClass">
            <summary>
            Gets or sets the parent class.
            </summary>
            <value>The parent class.</value>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.Utils.RequiredHaviour.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Hepers.Unity_Extensions.Utils.RequiredHaviour"/> class.
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.ColorHelpers">
            <summary>
            Class UnityColorHelpers.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.ColorHelpers.InvertColor(UnityEngine.Color)">
            <summary>
            Inverts the color.
            </summary>
            <param name="c">The c.</param>
            <returns>Color.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.ComponentHelpers">
            <summary>
            Class ComponentHelpers.
            </summary>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.FuncHepers">
            <summary>
            Class FuncHepers.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.FuncHepers.TryAction``1(System.Func{``0})">
            <summary>
            Tries the action.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="action">The action.</param>
            <returns>TResult.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.FuncHepers.GetCurrentMethod">
            <summary>
            Gets the current method.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.GenericsHelpers`1">
            <summary>
            Class GenericsHelpers.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.GenericsHelpers`1.ArrayParams(`0[])">
            <summary>
            Arrays the parameters.
            </summary>
            <param name="pars">The pars.</param>
            <returns>T[].</returns>
        </member>
        <member name="T:Lerp2API.Hepers.Unity_Extensions.UnityHelpers">
            <summary>
            Class UnityHelpers.
            </summary>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.CoolRepeating(UnityEngine.MonoBehaviour,System.Action{Lerp2API.Hepers.Unity_Extensions.AdvancedCoroutine},System.Single,System.Single)">
            <summary>
            Cools the repeating.
            </summary>
            <param name="mono">The mono.</param>
            <param name="act">The act.</param>
            <param name="d">The d.</param>
            <param name="lt">The lt.</param>
            <returns>AdvancedCoroutine.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.FadePosition(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Action)">
            <summary>
            Fades the position.
            </summary>
            <param name="tr">The tr.</param>
            <param name="pos1">The pos1.</param>
            <param name="pos2">The pos2.</param>
            <param name="time">The time.</param>
            <param name="local">if set to <c>true</c> [local].</param>
            <param name="fin">The fin.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.DelayedStart(System.Action,System.Single)">
            <summary>
            Delayeds the start.
            </summary>
            <param name="a">a.</param>
            <param name="t">The t.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.LoadClip(UnityEngine.AudioSource,UnityEngine.AudioClip)">
            <summary>
            Loads the clip.
            </summary>
            <param name="source">The source.</param>
            <param name="clip">The clip.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.IsGrounded(UnityEngine.Transform)">
            <summary>
            Determines whether the specified transform is grounded.
            </summary>
            <param name="transform">The transform.</param>
            <returns><c>true</c> if the specified transform is grounded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.IsTouchingSomething(UnityEngine.Transform)">
            <summary>
            Determines whether [is touching something] [the specified transform].
            </summary>
            <param name="transform">The transform.</param>
            <returns><c>true</c> if [is touching something] [the specified transform]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.IsTouchingSomething(UnityEngine.Transform,UnityEngine.Collider[]@)">
            <summary>
            Determines whether [is touching something] [the specified cols].
            </summary>
            <param name="transform">The transform.</param>
            <param name="cols">The cols.</param>
            <returns><c>true</c> if [is touching something] [the specified cols]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.GetRadius(UnityEngine.Transform)">
            <summary>
            Gets the radius.
            </summary>
            <param name="tr">The tr.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.VerticalLookAt(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Verticals the look at.
            </summary>
            <param name="transform">The transform.</param>
            <param name="worldPos">The world position.</param>
            <param name="worldUp">The world up.</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.ClampRotation(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Clamps the rotation.
            </summary>
            <param name="t">The t.</param>
            <param name="angle">The angle.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="local">if set to <c>true</c> [local].</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.ClampRotation(UnityEngine.Transform,System.Single,System.Single,System.Single,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Clamps the rotation.
            </summary>
            <param name="t">The t.</param>
            <param name="angle">The angle.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="dir">The dir.</param>
            <param name="local">if set to <c>true</c> [local].</param>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.MultiplyVectors(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Multiplies the vectors.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.ClampAngle(System.Single,System.Single,System.Single)">
            Normalize angles to a range from -180 to 180 an then clamp the angle
            with min and max.
            <summary>
            Clamps the angle.
            </summary>
            <param name="angle">The angle.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.NormalizeAngle(System.Single)">
            If angles over 360 or under 360 degree, then normalize them.
            <summary>
            Normalizes the angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.CopyComponent``1(UnityEngine.GameObject,``0)">
            <summary>
            Copies the component.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="destination">The destination.</param>
            <param name="original">The original.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.IsPrefab(UnityEngine.Transform)">
            <summary>
            Determines whether the specified this is prefab.
            </summary>
            <param name="This">The this.</param>
            <returns><c>true</c> if the specified this is prefab; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Hepers.Unity_Extensions.UnityHelpers.IsDestroyed(UnityEngine.GameObject)">
            <summary>
            Checks if a GameObject has been destroyed.
            </summary>
            <param name="gameObject">GameObject reference to check for destructedness</param>
            <returns>If the game object has been marked as destroyed by UnityEngine</returns>
        </member>
        <member name="T:Lerp2API.NativeHelpers">
            <summary>
            Class NativeHelpers.
            </summary>
        </member>
        <member name="M:Lerp2API.NativeHelpers.FirstCharToUpper(System.String)">
            <summary>
            Firsts the character to upper.
            </summary>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            Replaces the last.
            </summary>
            <param name="Source">The source.</param>
            <param name="Find">The find.</param>
            <param name="Replace">The replace.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.IsEmptyOrWhiteSpace(System.String)">
            <summary>
            Determines whether [is empty or white space] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is empty or white space] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ReplaceAt(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Replaces at.
            </summary>
            <param name="str">The string.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="replace">The replace.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.OddEvenReplace(System.String,System.String,System.String,System.String)">
            <summary>
            Odds the even replace.
            </summary>
            <param name="inpt">The inpt.</param>
            <param name="find">The find.</param>
            <param name="oddrpl">The oddrpl.</param>
            <param name="evenrpl">The evenrpl.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.MultiReplace(System.String,System.String,System.String,System.String)">
            <summary>
            Multis the replace.
            </summary>
            <param name="inpt">The inpt.</param>
            <param name="pattern">The pattern.</param>
            <param name="find">The find.</param>
            <param name="rpl">The RPL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ReplaceSeveralChars(System.String,System.String,System.Char[])">
            <summary>
            Replaces the several chars.
            </summary>
            <param name="s">The s.</param>
            <param name="newVal">The new value.</param>
            <param name="seps">The seps.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ToTexture(UnityEngine.Color,System.Int32,System.Int32)">
            <summary>
            To the texture.
            </summary>
            <param name="c">The c.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <returns>Texture2D.</returns>
            <exception cref="T:System.Exception">This method doesn't avoid zero or negative dimensions.</exception>
        </member>
        <member name="M:Lerp2API.NativeHelpers.Push``1(``0[],``0)">
            <summary>
            Pushes the specified item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="item">The item.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Removes at.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.Merge``1(System.Object[])">
            <summary>
            Merges the specified arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrays">The arrays.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.GetWWW(System.String[])">
            <summary>
            Gets the WWW.
            </summary>
            <param name="a">a.</param>
            <returns>WWW[].</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.RenameKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <summary>
            Renames the key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dic">The dic.</param>
            <param name="fromKey">From key.</param>
            <param name="toKey">To key.</param>
            <returns>Dictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Fors the each.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ie">The ie.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Lerp2API.NativeHelpers.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="target_dir">The target dir.</param>
        </member>
        <member name="M:Lerp2API.NativeHelpers.LatestModification(System.String)">
            <summary>
            Latests the modification.
            </summary>
            <param name="dir">The dir.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.getRoot(UnityEngine.GameObject)">
            <summary>
            Gets the root.
            </summary>
            <param name="go">The go.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ToUString(System.Object)">
            <summary>
            To the u string.
            </summary>
            <param name="message">The message.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ColorToHex(UnityEngine.Color)">
            <summary>
            Colors to hexadecimal.
            </summary>
            <param name="color">The color.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ColorToHex(UnityEngine.Color32)">
            <summary>
            Colors to hexadecimal.
            </summary>
            <param name="color">The color.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.HexToColor(System.String)">
            <summary>
            Hexadecimals to color.
            </summary>
            <param name="hex">The hexadecimal.</param>
            <returns>UnityEngine.Color.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.Convert``2(System.Action{``0})">
            <summary>
            Converts the specified my action t.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="myActionT">My action t.</param>
            <returns>Action&lt;T2&gt;.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.Clone``1(``0)">
            <summary>
            Clones the specified real object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="RealObject">The real object.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Takes the last.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="N">The n.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.UnpackNl(System.String)">
            <summary>
            Unpacks the nl.
            </summary>
            <param name="str">The string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.PackNl(System.String)">
            <summary>
            Packs the nl.
            </summary>
            <param name="str">The string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.Base64Encode(System.String)">
            <summary>
            Base64s the encode.
            </summary>
            <param name="plainText">The plain text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.Base64Decode(System.String)">
            <summary>
            Base64s the decode.
            </summary>
            <param name="base64EncodedData">The base64 encoded data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.SafeArguments(System.String)">
            <summary>
            Safes the arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.UnsafeArguments(System.String)">
            <summary>
            Unsafes the arguments.
            </summary>
            <param name="unargs">The unargs.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Lerp2API.NativeHelpers.ToLoggerType(UnityEngine.LogType)">
            <summary>
            To the type of the logger.
            </summary>
            <param name="logtype">The logtype.</param>
            <returns>LoggerType.</returns>
        </member>
        <member name="T:Lerp2API.LerpedCore">
            <summary>
            Class LerpedCore.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2API.LerpedCore.UnityBoot">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.enabledDebug">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.loggerPath">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.consoleSymLinkPath">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.disabledMissingAssets">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.disableFileSysWatcher">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.disableTagCheck">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.disableLayerCheck">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.disableAxisCheck">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.defaultLogFilePath">
            <summary>
            The unity boot
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.lerpedCore">
            <summary>
            The lerped core
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.lerpedHook">
            <summary>
            The lerped hook
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.socketDebug">
            <summary>
            The socket debug
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.safeECallEnabled">
            <summary>
            The socket debug
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.cancelSocketClient">
            <summary>
            The socket debug
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.cancelSocketServer">
            <summary>
            The socket debug
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.consoleClient">
            <summary>
            The console client
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.isEditor">
            <summary>
            The is editor
            </summary>
        </member>
        <member name="F:Lerp2API.LerpedCore.isPlaying">
            <summary>
            The is editor
            </summary>
        </member>
        <member name="P:Lerp2API.LerpedCore.isMssingAssetsDisabled">
            <summary>
            Gets or sets a value indicating whether this instance is mssing assets disabled.
            </summary>
            <value><c>true</c> if this instance is mssing assets disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.LerpedCore.isFSWDisabled">
            <summary>
            Gets or sets a value indicating whether this instance is FSW disabled.
            </summary>
            <value><c>true</c> if this instance is FSW disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.LerpedCore.SystemTime">
            <summary>
            Gets the system time.
            </summary>
            <value>The system time.</value>
        </member>
        <member name="P:Lerp2API.LerpedCore.UnityTick">
            <summary>
            Gets the unity tick.
            </summary>
            <value>The unity tick.</value>
        </member>
        <member name="M:Lerp2API.LerpedCore.CheckUnityVersion(System.Int32,System.Int32)">
            <summary>
            Checks the unity version.
            </summary>
            <param name="mainVer">The main ver.</param>
            <param name="subVer">The sub ver.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.GetBool(System.String)">
            <summary>
            Gets the bool.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the bool.
            </summary>
            <param name="key">The key.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Lerp2API.LerpedCore.GetString(System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.SetString(System.String,System.String)">
            <summary>
            Sets the string.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2API.LerpedCore.GetInt(System.String)">
            <summary>
            Gets the int.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.SetInt(System.String,System.Int32)">
            <summary>
            Sets the int.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2API.LerpedCore.GetLong(System.String)">
            <summary>
            Gets the long.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.SetLong(System.String,System.Int64)">
            <summary>
            Sets the long.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2API.LerpedCore.ExistsKey(System.String)">
            <summary>
            Existses the key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.AutoHookCore">
            <summary>
            Automatics the hook core.
            </summary>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Lerp2API.LerpedCore.HookThis(System.Type,System.Int32)">
            <summary>
            Hooks the this.
            </summary>
            <param name="type">The type.</param>
            <param name="waitSecs">The wait secs.</param>
        </member>
        <member name="M:Lerp2API.LerpedCore.ChangeRequiredASM(System.String,System.String)">
            <summary>
            Changes the required asm.
            </summary>
            <param name="ASMName">Name of the asm.</param>
            <param name="ASMFolder">The asm folder.</param>
        </member>
        <member name="M:Lerp2API.LerpedCore.SafeClose">
            <summary>
            Safes the close.
            </summary>
        </member>
        <member name="T:Lerp2API.ConsoleServer">
            <summary>
            Class ConsoleServer.
            </summary>
        </member>
        <member name="M:Lerp2API.ConsoleServer.BeReady(System.String)">
            <summary>
            Bes the ready.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Lerp2API.ConsoleServer.StartConsole(System.String)">
            <summary>
            Starts the console.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Lerp2API.ConsoleServer.CloseConsole">
            <summary>
            Closes the console.
            </summary>
        </member>
        <member name="T:Lerp2API.ConsoleSender">
            <summary>
            Class ConsoleSender.
            </summary>
        </member>
        <member name="F:Lerp2API.ConsoleSender.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:Lerp2API.ConsoleSender.lerpedClient">
            <summary>
            The lerped client
            </summary>
        </member>
        <member name="M:Lerp2API.ConsoleSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.ConsoleSender"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Lerp2API.ConsoleSender.CreateInstance(System.String)">
            <summary>
            Creates the instance.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Lerp2API.ConsoleSender.SendMessage(UnityEngine.LogType,System.String,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="lt">The lt.</param>
            <param name="ls">The ls.</param>
            <param name="st">The st.</param>
        </member>
        <member name="T:Lerp2API.ConsoleMessage">
            <summary>
            Class ConsoleMessage.
            </summary>
        </member>
        <member name="F:Lerp2API.ConsoleMessage.logType">
            <summary>
            The log type
            </summary>
        </member>
        <member name="F:Lerp2API.ConsoleMessage.logString">
            <summary>
            The log string
            </summary>
        </member>
        <member name="F:Lerp2API.ConsoleMessage.stackTrace">
            <summary>
            The log string
            </summary>
        </member>
        <member name="M:Lerp2API.ConsoleMessage.#ctor(UnityEngine.LogType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.ConsoleMessage"/> class.
            </summary>
            <param name="lt">The lt.</param>
            <param name="ls">The ls.</param>
            <param name="st">The st.</param>
        </member>
        <member name="T:Lerp2API.CronTask">
            <summary>
            Class CronTask.
            </summary>
        </member>
        <member name="F:Lerp2API.CronTask.myAction">
            <summary>
            My action
            </summary>
        </member>
        <member name="F:Lerp2API.CronTask.delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="F:Lerp2API.CronTask.times">
            <summary>
            The times
            </summary>
        </member>
        <member name="F:Lerp2API.CronTask.debugTasks">
            <summary>
            The debug tasks
            </summary>
        </member>
        <member name="M:Lerp2API.CronTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.CronTask"/> class.
            </summary>
        </member>
        <member name="M:Lerp2API.CronTask.CreateInstance(System.Action,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates the instance.
            </summary>
            <param name="a">a.</param>
            <param name="delay">The delay.</param>
            <param name="times">The times.</param>
            <param name="startInmediatly">if set to <c>true</c> [start inmediatly].</param>
            <returns>CronTask.</returns>
        </member>
        <member name="M:Lerp2API.CronTask.RunDelayed">
            <summary>
            Runs the delayed.
            </summary>
        </member>
        <member name="M:Lerp2API.CronTask.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.CronTask.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.CronTask.ExistsTask(System.UInt64)">
            <summary>
            Existses the task.
            </summary>
            <param name="id">The identifier.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.CronTask.GetTask(System.UInt64)">
            <summary>
            Gets the task.
            </summary>
            <param name="id">The identifier.</param>
            <returns>CronTask.</returns>
        </member>
        <member name="T:Lerp2API.CoroutineDatabase">
            <summary>
            Class CoroutineDatabase.
            </summary>
        </member>
        <member name="F:Lerp2API.CoroutineDatabase.database">
            <summary>
            The database
            </summary>
        </member>
        <member name="T:Lerp2API.CoroutineEntity">
            <summary>
            Class CoroutineEntity.
            </summary>
        </member>
        <member name="F:Lerp2API.CoroutineEntity.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Lerp2API.CoroutineEntity.body">
            <summary>
            The body
            </summary>
        </member>
        <member name="M:Lerp2API.CoroutineEntity.#ctor(System.String,System.Collections.IEnumerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.CoroutineEntity"/> class.
            </summary>
            <param name="n">The n.</param>
            <param name="b">The b.</param>
        </member>
        <member name="T:Lerp2API.Position">
            <summary>
            Enum Position
            </summary>
        </member>
        <member name="F:Lerp2API.Position.UpperLeft">
            <summary>
            The upper left
            </summary>
        </member>
        <member name="F:Lerp2API.Position.UpperRight">
            <summary>
            The upper right
            </summary>
        </member>
        <member name="F:Lerp2API.Position.BottomLeft">
            <summary>
            The Optimizers namespace.
            </summary>
            <summary>
            The Optimizers namespace.
            </summary>
        </member>
        <member name="F:Lerp2API.Position.BottomRight">
            <summary>
            The bottom right
            </summary>
        </member>
        <member name="T:Lerp2API.TaskState">
            <summary>
            Enum TaskState
            </summary>
        </member>
        <member name="F:Lerp2API.TaskState.NotStarted">
            <summary>
            The HtmlAgilityPack namespace.
            </summary>
            <summary>
            The HtmlAgilityPack namespace.
            </summary>
        </member>
        <member name="F:Lerp2API.TaskState.Running">
            <summary>
            The running
            </summary>
        </member>
        <member name="F:Lerp2API.TaskState.Paused">
            <summary>
            Enum AttributeValueQuote
            </summary>
            <summary>
            Enum AttributeValueQuote
            </summary>
        </member>
        <member name="F:Lerp2API.TaskState.Stopped">
            <summary>
            The stopped
            </summary>
        </member>
        <member name="T:Lerp2API.Optimizers.Direction">
            <summary>
            Enum Direction
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.upperRight">
            <summary>
            The upper right
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.downRight">
            <summary>
            Down right
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.downLeft">
            <summary>
            Down left
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Direction.upperLeft">
            <summary>
            The upper left
            </summary>
        </member>
        <member name="T:Lerp2API.Optimizers.Color">
            <summary>
            Struct Color
            </summary>
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="M:Lerp2API.Optimizers.Color.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="F:Lerp2API.Optimizers.Color.r">
            <summary>
            The r
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Color.g">
            <summary>
            The r
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Color.b">
            <summary>
            The r
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Color.a">
            <summary>
            The r
            </summary>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.white">
            <summary>
            Gets the white.
            </summary>
            <value>The white.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.red">
            <summary>
            Gets the red.
            </summary>
            <value>The red.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.green">
            <summary>
            Gets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.blue">
            <summary>
            Gets the blue.
            </summary>
            <value>The blue.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.yellow">
            <summary>
            Gets the yellow.
            </summary>
            <value>The yellow.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.gray">
            <summary>
            Gets the gray.
            </summary>
            <value>The gray.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.black">
            <summary>
            Gets the black.
            </summary>
            <value>The black.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Color.transparent">
            <summary>
            Gets the transparent.
            </summary>
            <value>The transparent.</value>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Optimizers.Color"/> struct.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Optimizers.Color"/> struct.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <param name="a">a.</param>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.op_Equality(Lerp2API.Optimizers.Color,Lerp2API.Optimizers.Color)">
            <summary>
            Implements the ==.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.op_Inequality(Lerp2API.Optimizers.Color,Lerp2API.Optimizers.Color)">
            <summary>
            Implements the !=.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.op_Subtraction(Lerp2API.Optimizers.Color,Lerp2API.Optimizers.Color)">
            <summary>
            Implements the -.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.op_Addition(Lerp2API.Optimizers.Color,Lerp2API.Optimizers.Color)">
            <summary>
            Implements the +.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.Lerp(Lerp2API.Optimizers.Color,System.Single)">
            <summary>
            Lerps the specified c2.
            </summary>
            <param name="c2">The c2.</param>
            <param name="t">The t.</param>
            <returns>Color.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.Invert">
            <summary>
            Inverts this instance.
            </summary>
            <returns>Color.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.op_Explicit(UnityEngine.Color)~Lerp2API.Optimizers.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:UnityEngine.Color"/> to <see cref="T:Lerp2API.Optimizers.Color"/>.
            </summary>
            <param name="c">The c.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.op_Implicit(Lerp2API.Optimizers.Color)~UnityEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:Lerp2API.Optimizers.Color"/> to <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="ic">The ic.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Color.Fill(System.Int32,System.Int32)">
            <summary>
            Fills the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Color[].</returns>
        </member>
        <member name="T:Lerp2API.Optimizers.Point">
            <summary>
            Struct Point
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Point.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:Lerp2API.Optimizers.Point.y">
            <summary>
            The x
            </summary>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.zero">
            <summary>
            Gets the zero.
            </summary>
            <value>The zero.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.down">
            <summary>
            Gets down.
            </summary>
            <value>Down.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.up">
            <summary>
            Gets up.
            </summary>
            <value>Up.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.upperLeft">
            <summary>
            Gets the upper left.
            </summary>
            <value>The upper left.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.upperRight">
            <summary>
            Gets the upper right.
            </summary>
            <value>The upper right.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.downLeft">
            <summary>
            Gets down left.
            </summary>
            <value>Down left.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.downRight">
            <summary>
            Gets down right.
            </summary>
            <value>Down right.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.sqrMagnitude">
            <summary>
            Gets the SQR magnitude.
            </summary>
            <value>The SQR magnitude.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.magnitude">
            <summary>
            Gets the magnitude.
            </summary>
            <value>The magnitude.</value>
        </member>
        <member name="P:Lerp2API.Optimizers.Point.normalized">
            <summary>
            Gets the normalized.
            </summary>
            <value>The normalized.</value>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Optimizers.Point"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Addition(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Subtraction(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Multiply(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Division(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Multiply(Lerp2API.Optimizers.Point,System.Int32)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Division(Lerp2API.Optimizers.Point,System.Int32)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Implicit(Lerp2API.Optimizers.Point)~UnityEngine.Vector2">
            <summary>
            Performs an implicit conversion from <see cref="T:Lerp2API.Optimizers.Point"/> to <see cref="T:UnityEngine.Vector2"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Explicit(UnityEngine.Vector2)~Lerp2API.Optimizers.Point">
            <summary>
            Performs an explicit conversion from <see cref="T:UnityEngine.Vector2"/> to <see cref="T:Lerp2API.Optimizers.Point"/>.
            </summary>
            <param name="v">The v.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Equality(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Implements the ==.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.op_Inequality(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Implements the !=.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.GetPoint(Lerp2API.Optimizers.Direction)">
            <summary>
            Gets the point.
            </summary>
            <param name="dir">The dir.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Point.NewPos(Lerp2API.Optimizers.Direction)">
            <summary>
            News the position.
            </summary>
            <param name="dir">The dir.</param>
            <returns>Point.</returns>
        </member>
        <member name="T:Lerp2API.Optimizers.Dirs">
            <summary>
            Class Dirs.
            </summary>
        </member>
        <member name="M:Lerp2API.Optimizers.Dirs.GetPerpendicular(Lerp2API.Optimizers.Direction)">
            <summary>
            Gets the perpendicular.
            </summary>
            <param name="dir">The dir.</param>
            <returns>Direction.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Dirs.GetClockwise(Lerp2API.Optimizers.Direction)">
            <summary>
            Gets the clockwise.
            </summary>
            <param name="dir">The dir.</param>
            <returns>Direction.</returns>
        </member>
        <member name="M:Lerp2API.Optimizers.Dirs.GetCounterClockwise(Lerp2API.Optimizers.Direction)">
            <summary>
            Gets the counter clockwise.
            </summary>
            <param name="dir">The dir.</param>
            <returns>Direction.</returns>
        </member>
        <member name="T:Lerp2API.SafeECalls.LoggerType">
            <summary>
            Enum LoggerType
            </summary>
        </member>
        <member name="F:Lerp2API.SafeECalls.LoggerType.INFO">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:Lerp2API.SafeECalls.LoggerType.WARN">
            <summary>
            The warn
            </summary>
        </member>
        <member name="F:Lerp2API.SafeECalls.LoggerType.ERROR">
            <summary>
            The error
            </summary>
        </member>
        <member name="T:Lerp2API.SafeECalls.JsonUtility">
            <summary>
            Class JsonUtility.
            </summary>
            <seealso cref="T:Lerp2API.SafeECalls.SafeECall" />
        </member>
        <member name="M:Lerp2API.SafeECalls.JsonUtility.ToJson(System.Object)">
            <summary>
            To the json.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.SafeECalls.JsonUtility.ToJson(System.Object,System.Boolean)">
            <summary>
            To the json.
            </summary>
            <param name="obj">The object.</param>
            <param name="prettyPrint">if set to <c>true</c> [pretty print].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.SafeECalls.JsonUtility.FromJson``1(System.String)">
            <summary>
            Froms the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.SafeECalls.JsonUtility.FromJson(System.String)">
            <summary>
            Froms the json.
            </summary>
            <param name="json">The json.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Lerp2API.SafeECalls.Logger">
            <summary>
            Class Logger.
            </summary>
            <seealso cref="T:Lerp2API.SafeECalls.SafeECall" />
        </member>
        <member name="F:Lerp2API.SafeECalls.Logger.path">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:Lerp2API.SafeECalls.Logger.saveOnGoing">
            <summary>
            The save on going
            </summary>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.SafeECalls.Logger"/> class.
            </summary>
            <param name="p">The p.</param>
            <param name="sog">if set to <c>true</c> [sog].</param>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.Log">
            <summary>
            Logs this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.Log(System.String,System.Object[])">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="pars">The pars.</param>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.LogWarning(System.String,System.Object[])">
            <summary>
            Logs the warning.
            </summary>
            <param name="message">The message.</param>
            <param name="pars">The pars.</param>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.LogError(System.String,System.Object[])">
            <summary>
            Logs the error.
            </summary>
            <param name="message">The message.</param>
            <param name="pars">The pars.</param>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.SafeECalls.Logger.SaveToFile">
            <summary>
            Saves to file.
            </summary>
        </member>
        <member name="T:Lerp2API.SafeECalls.SafeECall">
            <summary>
            Class SafeECall.
            </summary>
        </member>
        <member name="F:Lerp2API.SafeECalls.SafeECall.error">
            <summary>
            The error
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.FileBrowserType">
            <summary>
            Enum FileBrowserType
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowserType.File">
            <summary>
            The file
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowserType.Directory">
            <summary>
            The directory
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.BorderType">
            <summary>
            Enum BorderType
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Solid">
            <summary>
            The solid
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Dashed">
            <summary>
            The dashed
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Dotted">
            <summary>
            The dotted
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Groove">
            <summary>
            The groove
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Ridge">
            <summary>
            The ridge
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Inset">
            <summary>
            The inset
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.BorderType.Outset">
            <summary>
            The outset
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.RequiredData">
            <summary>
            Enum RequiredData
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.RequiredData.Tags">
            <summary>
            The tags
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.RequiredData.Layers">
            <summary>
            The layers
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.CSG.CSGType">
            <summary>
            Enum CSGType
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.CSGType.Union">
            <summary>
            The union
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.CSGType.Difference">
            <summary>
            The difference
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.CSGType.Intersection">
            <summary>
            The intersection
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.CSG.BooleanMesh">
            <summary>
            Class BooleanMesh.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.BooleanMesh.#ctor(UnityEngine.MeshCollider,UnityEngine.MeshCollider)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.BooleanMesh"/> class.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.A">
            <summary>
            a
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.B">
            <summary>
            a
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.meshColliderB">
            <summary>
            The mesh collider b
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.triangleA">
            <summary>
            The triangle a
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.customDistance">
            <summary>
            The custom distance
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.r1">
            <summary>
            The r1
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.r2">
            <summary>
            The r1
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.hit">
            <summary>
            The hit
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA.#ctor(Lerp2API.Utility.CSG.Triangulation,Lerp2API.Utility.CSG.Triangulation,UnityEngine.MeshCollider)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.BooleanMesh.intersectionDATA"/> class.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.BooleanMesh.Union">
            <summary>
            Unions this instance.
            </summary>
            <returns>Mesh.</returns>
        </member>
        <member name="M:Lerp2API.Utility.CSG.BooleanMesh.Intersection">
            <summary>
            Intersections this instance.
            </summary>
            <returns>Mesh.</returns>
        </member>
        <member name="M:Lerp2API.Utility.CSG.BooleanMesh.Difference">
            <summary>
            Differences this instance.
            </summary>
            <returns>Mesh.</returns>
        </member>
        <member name="M:Lerp2API.Utility.CSG.BooleanMesh.CSG(Lerp2API.Utility.CSG.CSGType)">
            <summary>
            CSGs the specified t.
            </summary>
            <param name="t">The t.</param>
            <returns>Mesh.</returns>
        </member>
        <member name="T:Lerp2API.Utility.CSG.Triangulation">
            <summary>
            Class Triangulation.
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.CSG.Triangulation.Vertex">
            <summary>
            Class Vertex.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.Vertex.localPos">
            <summary>
            The local position
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.Vertex.pos">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.Vertex.normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.Vertex.uv">
            <summary>
            The uv
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.Vertex.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Vertex.#ctor(UnityEngine.Vector3,System.Int32,UnityEngine.Vector3,UnityEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.Triangulation.Vertex"/> class.
            </summary>
            <param name="p">The p.</param>
            <param name="t">The t.</param>
            <param name="n">The n.</param>
            <param name="u">The u.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Vertex.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,UnityEngine.Vector3,UnityEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.Triangulation.Vertex"/> class.
            </summary>
            <param name="lp">The lp.</param>
            <param name="p">The p.</param>
            <param name="t">The t.</param>
            <param name="n">The n.</param>
            <param name="u">The u.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Vertex.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Vertex.</returns>
        </member>
        <member name="T:Lerp2API.Utility.CSG.Triangulation.Polygon">
            <summary>
            Class Polygon.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.Polygon.indexVertice">
            <summary>
            The index vertice
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Polygon.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.Triangulation.Polygon"/> class.
            </summary>
            <param name="indexVertices">The index vertices.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Polygon.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Polygon.</returns>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.triangles">
            <summary>
            The triangles
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.CSG.Triangulation.lowerAngle">
            <summary>
            The lower angle
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.Triangulation"/> class.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.#ctor(UnityEngine.MeshCollider)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.CSG.Triangulation"/> class.
            </summary>
            <param name="meshC">The mesh c.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Triangulation.</returns>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.AddWorldPointOnTriangle(UnityEngine.RaycastHit,System.Int32)">
            <summary>
            Adds the world point on triangle.
            </summary>
            <param name="hit">The hit.</param>
            <param name="onTriangle">The on triangle.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.AddWorldPointOnTriangle(UnityEngine.Vector3,System.Int32)">
            <summary>
            Adds the world point on triangle.
            </summary>
            <param name="pos">The position.</param>
            <param name="onTriangle">The on triangle.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.AddWorldPointOnTriangle(UnityEngine.RaycastHit)">
            <summary>
            Adds the world point on triangle.
            </summary>
            <param name="hit">The hit.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.updateLocalPosition(UnityEngine.Transform)">
            <summary>
            Updates the local position.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.updateWorldPosition(UnityEngine.Transform)">
            <summary>
            Updates the world position.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.AddTriangles(Lerp2API.Utility.CSG.Triangulation.Vertex[],Lerp2API.Utility.CSG.Triangulation.Polygon[])">
            <summary>
            Adds the triangles.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="polygons">The polygons.</param>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.invertNormals">
            <summary>
            Inverts the normals.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.CSG.Triangulation.Calculate">
            <summary>
            Calculates this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.StandardInstaller.AssetLocation">
            <summary>
            Enum AssetLocation
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.StandardInstaller.AssetLocation.Local">
            <summary>
            The local
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.StandardInstaller.AssetLocation.URL">
            <summary>
            The URL
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.StandardInstaller.AssetLocation.HDD">
            <summary>
            The HDD
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.WWWHandler">
            <summary>
            Class WWWHandler.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.WWWHandler.Add(UnityEngine.WWW)">
            <summary>
            Adds the specified WWW.
            </summary>
            <param name="www">The WWW.</param>
        </member>
        <member name="M:Lerp2API.Utility.WWWHandler.Add(UnityEngine.WWW[])">
            <summary>
            Adds the specified WWS.
            </summary>
            <param name="wws">The WWS.</param>
        </member>
        <member name="M:Lerp2API.Utility.WWWHandler.AddAndStart(UnityEngine.WWW,System.Boolean,System.Action{UnityEngine.WWW})">
            <summary>
            Adds the and start.
            </summary>
            <param name="www">The WWW.</param>
            <param name="play">if set to <c>true</c> [play].</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Lerp2API.Utility.WWWHandler.AddAndStart(UnityEngine.WWW[],System.Boolean,System.Action{UnityEngine.WWW[]})">
            <summary>
            Adds the and start.
            </summary>
            <param name="wws">The WWS.</param>
            <param name="play">if set to <c>true</c> [play].</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Lerp2API.Utility.WWWHandler.Start``1(System.Boolean,System.Action{``0})">
            <summary>
            Starts the specified play.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="play">if set to <c>true</c> [play].</param>
            <param name="finishedAction">The finished action.</param>
        </member>
        <member name="T:Lerp2API.Utility.ContinuationManager`1">
            <summary>
            Class ContinuationManager.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lerp2API.Utility.ContinuationManager`1.Job.#ctor(`0[],System.Func{System.Boolean},System.Action{`0[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.ContinuationManager`1.Job"/> class.
            </summary>
            <param name="objs">The objs.</param>
            <param name="completed">The completed.</param>
            <param name="finish">The finish.</param>
        </member>
        <member name="F:Lerp2API.Utility.ContinuationManager`1.Job.Completed">
            <summary>
            The completed
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.ContinuationManager`1.Job.Finish">
            <summary>
            The finish
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.ContinuationManager`1.Job.Objects">
            <summary>
            The objects
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.ContinuationManager`1.assignedJobId">
            <summary>
            The assigned job identifier
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.ContinuationManager`1.SetJob(`0[],System.Func{System.Boolean},System.Action{`0[]})">
            <summary>
            Sets the job.
            </summary>
            <param name="objs">The objs.</param>
            <param name="completed">The completed.</param>
            <param name="continueWith">The continue with.</param>
        </member>
        <member name="M:Lerp2API.Utility.ContinuationManager`1.Start(System.Boolean)">
            <summary>
            Starts the specified force play.
            </summary>
            <param name="forcePlay">if set to <c>true</c> [force play].</param>
        </member>
        <member name="T:Lerp2API.Utility.FileBrowser">
            <summary>
            Class FileBrowser.
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.CurrentDirectory">
            <summary>
            Gets or sets the current directory.
            </summary>
            <value>The current directory.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_currentDirectory">
            <summary>
            The m current directory
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.SelectionPattern">
            <summary>
            Gets or sets the selection pattern.
            </summary>
            <value>The selection pattern.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_filePattern">
            <summary>
            The m file pattern
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.DirectoryImage">
            <summary>
            Gets or sets the directory image.
            </summary>
            <value>The directory image.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_directoryImage">
            <summary>
            The m directory image
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.FileImage">
            <summary>
            Gets or sets the file image.
            </summary>
            <value>The file image.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_fileImage">
            <summary>
            The m file image
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.BrowserType">
            <summary>
            Gets or sets the type of the browser.
            </summary>
            <value>The type of the browser.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_browserType">
            <summary>
            The m browser type
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_newDirectory">
            <summary>
            The m new directory
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_currentDirectoryParts">
            <summary>
            The m current directory parts
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_files">
            <summary>
            The m files
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_filesWithImages">
            <summary>
            The m files with images
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_selectedFile">
            <summary>
            The m selected file
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_nonMatchingFiles">
            <summary>
            The m non matching files
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_nonMatchingFilesWithImages">
            <summary>
            The m non matching files with images
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_selectedNonMatchingDirectory">
            <summary>
            The m selected non matching directory
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_directories">
            <summary>
            The m directories
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_directoriesWithImages">
            <summary>
            The m directories with images
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_selectedDirectory">
            <summary>
            The m selected directory
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_nonMatchingDirectories">
            <summary>
            The m non matching directories
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_nonMatchingDirectoriesWithImages">
            <summary>
            The m non matching directories with images
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_currentDirectoryMatches">
            <summary>
            The m current directory matches
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.CentredText">
            <summary>
            Gets the centred text.
            </summary>
            <value>The centred text.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_centredText">
            <summary>
            The m centred text
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_name">
            <summary>
            The m name
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_screenRect">
            <summary>
            The m screen rect
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.FileBrowser.screenRect">
            <summary>
            Gets the screen rect.
            </summary>
            <value>The screen rect.</value>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_scrollPosition">
            <summary>
            The m scroll position
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.FileBrowser.m_callback">
            <summary>
            The m callback
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.#ctor(UnityEngine.Rect,Lerp2API.Utility.FileBrowserType,System.String,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.FileBrowser"/> class.
            </summary>
            <param name="_screenRect">The screen rect.</param>
            <param name="browserType">Type of the browser.</param>
            <param name="name">The name.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.SetNewDirectory(System.String)">
            <summary>
            Sets the new directory.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.SwitchDirectoryNow">
            <summary>
            Switches the directory now.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.ReadDirectoryContents">
            <summary>
            Reads the directory contents.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.BuildContent">
            <summary>
            Builds the content.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.OnGUI">
            <summary>
            Called when [GUI].
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.FileDoubleClickCallback(System.Int32)">
            <summary>
            Files the double click callback.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.DirectoryDoubleClickCallback(System.Int32)">
            <summary>
            Directories the double click callback.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:Lerp2API.Utility.FileBrowser.NonMatchingDirectoryDoubleClickCallback(System.Int32)">
            <summary>
            Nons the matching directory double click callback.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="T:Lerp2API.Utility.LerpedInputs">
            <summary>
            Class LerpedInputs.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.LerpedInputs.configName">
            <summary>
            The configuration name
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.ObjectKvp">
            <summary>
            Class ObjectKvp. This class cannot be inherited.
            </summary>
            <seealso cref="!:Lerp2API.Utility.UnityNameValuePair&lt;UnityEngine.Object&gt;" />
        </member>
        <member name="F:Lerp2API.Utility.ObjectKvp.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.ObjectKvp.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Lerp2API.Utility.ObjectKvp.#ctor(System.String,UnityEngine.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.ObjectKvp"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Lerp2API.Utility.ObjectDictionary">
            <summary>
            Class ObjectDictionary.
            </summary>
            <seealso cref="!:Lerp2API.Utility.UnityDictionary&lt;UnityEngine.Object&gt;" />
        </member>
        <member name="F:Lerp2API.Utility.ObjectDictionary.values">
            <summary>
            The values
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.ObjectDictionary.KeyValuePairs">
            <summary>
            Gets or sets the key value pairs.
            </summary>
            <value>The key value pairs.</value>
        </member>
        <member name="M:Lerp2API.Utility.ObjectDictionary.SetKeyValuePair(System.String,UnityEngine.Object)">
            <summary>
            Sets the key value pair.
            </summary>
            <param name="k">The k.</param>
            <param name="v">The v.</param>
        </member>
        <member name="T:Lerp2API.Utility.NamedData">
            <summary>
            Class NamedData.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.NamedData.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.NamedData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.NamedData"/> class.
            </summary>
            <param name="n">The n.</param>
        </member>
        <member name="T:Lerp2API.Utility.LayerData">
            <summary>
            Class LayerData.
            </summary>
            <seealso cref="T:Lerp2API.Utility.NamedData" />
        </member>
        <member name="F:Lerp2API.Utility.LayerData.Layer">
            <summary>
            The layer
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.LayerData.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.LayerData"/> class.
            </summary>
            <param name="n">The n.</param>
            <param name="l">The l.</param>
        </member>
        <member name="T:Lerp2API.Utility.SerializableDictionary`2">
            <summary>
            Class SerializableDictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <seealso cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.AsDictionary">
            <summary>
            Gets as dictionary.
            </summary>
            <value>As dictionary.</value>
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.Item(`0,`1)">
            <summary>
            Gets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>TValue.</returns>
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>TValue.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.SerializableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.SerializableDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity</exception>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value contains value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key contains key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Lerp2API.Utility.SerializableDictionary`2.PrimeHelper.Primes">
            <summary>
            The primes
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.PrimeHelper.IsPrime(System.Int32)">
            <summary>
            Determines whether the specified candidate is prime.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns><c>true</c> if the specified candidate is prime; otherwise, <c>false</c>.</returns>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Lerp2API.Utility.SerializableDictionary`2.PrimeHelper.GetPrime(System.Int32)" -->
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.PrimeHelper.ExpandPrime(System.Int32)">
            <summary>
            Expands the prime.
            </summary>
            <param name="oldSize">The old size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Lerp2API.Utility.SerializableDictionary`2.Enumerator">
            <summary>
            Struct Enumerator
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt;&gt;" />
        </member>
        <member name="P:Lerp2API.Utility.SerializableDictionary`2.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Enumerator.MoveNext">
            <summary>
            Moves the next.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Lerp2API.Utility.SerializableDictionary`2.Enumerator.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.TextureUtils">
            <summary>
            Class TextureUtils.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureUtils.Fill(UnityEngine.Color,System.Int32,System.Int32)">
            <summary>
            Fills the specified c.
            </summary>
            <param name="c">The c.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <returns>Texture2D.</returns>
        </member>
        <member name="M:Lerp2API.Utility.TextureUtils.FillColor(UnityEngine.Color,System.Int32,System.Int32)">
            <summary>
            Fills the color.
            </summary>
            <param name="c">The c.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <returns>Color[].</returns>
        </member>
        <member name="T:Lerp2API.Utility.TextureCrop">
            <summary>
            Class TextureCrop.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureCrop.#ctor(UnityEngine.Texture2D,UnityEngine.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureCrop"/> class.
            </summary>
            <param name="initialTexture">The initial texture.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureCrop.GetTexture">
            <summary>
            Gets the texture.
            </summary>
            <returns>Texture2D.</returns>
        </member>
        <member name="T:Lerp2API.Utility.TextureAutocrop">
            <summary>
            Class TextureAutocrop.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureAutocrop.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureAutocrop"/> class.
            </summary>
            <param name="initialTexture">The initial texture.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureAutocrop.GetTexture">
            <summary>
            Gets the texture.
            </summary>
            <returns>Texture2D.</returns>
        </member>
        <member name="T:Lerp2API.Utility.TextureRotate">
            <summary>
            Class TextureRotate.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureRotate.#ctor(UnityEngine.Texture2D,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureRotate"/> class.
            </summary>
            <param name="initialTexture">The initial texture.</param>
            <param name="degrees">The degrees.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureRotate.GetTexture">
            <summary>
            Gets the texture.
            </summary>
            <returns>Texture2D.</returns>
        </member>
        <member name="T:Lerp2API.Utility.TextureBorder">
            <summary>
            Class TextureBorder.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.processedTexture">
            <summary>
            The processed texture
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.initTex">
            <summary>
            The processed texture
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.generalBorder">
            <summary>
            The general border
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.generalBorderType">
            <summary>
            The general border type
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.generalBorderColor">
            <summary>
            The general border color
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.leftBorder">
            <summary>
            The left border
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.leftBorderType">
            <summary>
            The left border type
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.leftBorderColor">
            <summary>
            The left border color
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.topBorder">
            <summary>
            The top border
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.topBorderType">
            <summary>
            The top border type
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.topBorderColor">
            <summary>
            The top border color
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.rightBorder">
            <summary>
            The right border
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.rightBorderType">
            <summary>
            The right border type
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.rightBorderColor">
            <summary>
            The right border color
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.bottomBorder">
            <summary>
            The bottom border
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.bottomBorderType">
            <summary>
            The bottom border type
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.bottomBorderColor">
            <summary>
            The bottom border color
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureBorder.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureBorder"/> class.
            </summary>
            <param name="initialTexture">The initial texture.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureBorder.GetTexture(System.Boolean)">
            <summary>
            Gets the texture.
            </summary>
            <param name="trans">if set to <c>true</c> [trans].</param>
            <returns>Texture2D.</returns>
        </member>
        <member name="M:Lerp2API.Utility.TextureBorder.SimpleBorder(UnityEngine.Texture2D,UnityEngine.Color)">
            <summary>
            Simples the border.
            </summary>
            <param name="t">The t.</param>
            <param name="c">The c.</param>
            <returns>Texture2D.</returns>
        </member>
        <member name="M:Lerp2API.Utility.TextureBorder.BorderPoint.#ctor(System.Single,System.Single,UnityEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureBorder.BorderPoint"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="cl">The cl.</param>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.BorderPoint.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.BorderPoint.y">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureBorder.BorderPoint.c">
            <summary>
            The c
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.TextureFixer">
            <summary>
            Class TextureFixer.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureFixer.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureFixer"/> class.
            </summary>
            <param name="initialTexture">The initial texture.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureFixer.Fix">
            <summary>
            Fixes this instance.
            </summary>
            <returns>Texture2D.</returns>
        </member>
        <member name="T:Lerp2API.Utility.TextureScale">
            <summary>
            Class TextureScale.
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.TextureScale.ThreadData">
            <summary>
            Class ThreadData.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureScale.ThreadData.start">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.TextureScale.ThreadData.end">
            <summary>
            The end
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.TextureScale.ThreadData.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.TextureScale.ThreadData"/> class.
            </summary>
            <param name="s">The s.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureScale.Point(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
            Points the specified tex.
            </summary>
            <param name="tex">The tex.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureScale.Bilinear(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
            Bilinears the specified tex.
            </summary>
            <param name="tex">The tex.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureScale.BilinearScale(System.Object)">
            <summary>
            Bilinears the scale.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Lerp2API.Utility.TextureScale.PointScale(System.Object)">
            <summary>
            Points the scale.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Lerp2API.Utility.Triangulator">
            <summary>
            Class Triangulator.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.Triangulator.#ctor(UnityEngine.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.Triangulator"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Lerp2API.Utility.Triangulator.Triangulate">
            <summary>
            Triangulates this instance.
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:Lerp2API.Utility.Triangulator.GetMesh(UnityEngine.Vector2[])">
            <summary>
            Gets the mesh.
            </summary>
            <param name="vertices2D">The vertices2 d.</param>
            <returns>Mesh.</returns>
        </member>
        <member name="T:Lerp2API.Utility.UnityNameValuePair`1">
            <summary>
            Class UnityNameValuePair.
            </summary>
            <typeparam name="V"></typeparam>
            <seealso cref="!:Lerp2API.Utility.UnityKeyValuePair&lt;System.String, V&gt;" />
        </member>
        <member name="F:Lerp2API.Utility.UnityNameValuePair`1.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.UnityNameValuePair`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityNameValuePair`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.UnityNameValuePair`1"/> class.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.UnityNameValuePair`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.UnityNameValuePair`1"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Lerp2API.Utility.UnityKeyValuePair`2">
            <summary>
            Class UnityKeyValuePair.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="P:Lerp2API.Utility.UnityKeyValuePair`2.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityKeyValuePair`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityKeyValuePair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.UnityKeyValuePair`2"/> class.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.UnityKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.UnityKeyValuePair`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Lerp2API.Utility.UnityDictionary`2">
            <summary>
            Class UnityDictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <seealso cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.KeyValuePairs">
            <summary>
            Gets or sets the key value pairs.
            </summary>
            <value>The key value pairs.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.SetKeyValuePair(`0,`1)">
            <summary>
            Sets the key value pair.
            </summary>
            <param name="k">The k.</param>
            <param name="v">The v.</param>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:V"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>V.</returns>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified KVP.
            </summary>
            <param name="kvp">The KVP.</param>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key contains key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified KVP].
            </summary>
            <param name="kvp">The KVP.</param>
            <returns><c>true</c> if [contains] [the specified KVP]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.SyncRoot">
            <summary>
            Gets the synchronize root.
            </summary>
            <value>The synchronize root.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether this instance is fixed size.
            </summary>
            <value><c>true</c> if this instance is fixed size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value><c>true</c> if this instance is synchronized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.Entry">
            <summary>
            Gets the entry.
            </summary>
            <value>The entry.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.MoveNext">
            <summary>
            Moves the next.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2API.Utility.UnityDictionary`2.UnityDictionaryEnumerator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.UnityDictionary`1">
            <summary>
            Class UnityDictionary.
            </summary>
            <typeparam name="V"></typeparam>
            <seealso cref="!:Lerp2API.Utility.UnityDictionary&lt;System.String, V&gt;" />
        </member>
        <member name="T:Lerp2API.Utility.UnityLib.Vector3Int">
            <summary>
            Class Vector3Int. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Lerp2API.Utility.UnityLib.Vector3Int.x">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityLib.Vector3Int.y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:Lerp2API.Utility.UnityLib.Vector3Int.z">
            <summary>
            Gets or sets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="M:Lerp2API.Utility.UnityLib.Vector3Int.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.UnityLib.Vector3Int"/> class.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.UnityLib.Vector3Int.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.UnityLib.Vector3Int"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="T:Lerp2API.Utility.UpdateEventHooks">
            <summary>
            Class UpdateEventHooks.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="E:Lerp2API.Utility.UpdateEventHooks.UpdateHook">
            <summary>
            Occurs when [update hook].
            </summary>
        </member>
        <member name="E:Lerp2API.Utility.UpdateEventHooks.FixedUpdateHook">
            <summary>
            Occurs when [fixed update hook].
            </summary>
        </member>
        <member name="E:Lerp2API.Utility.UpdateEventHooks.LateUpdateHook">
            <summary>
            Occurs when [late update hook].
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.UpdateEventHooks.OnDestroy">
            <summary>
            Called when [destroy].
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.xGUI.ProgressBar">
            <summary>
            Class ProgressBar.
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.xGUI.ProgressBar.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.xGUI.ProgressBar.backgroundColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.xGUI.ProgressBar.progressColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.xGUI.ProgressBar.outlineColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.xGUI.ProgressBar.#ctor(UnityEngine.Rect,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.xGUI.ProgressBar"/> class.
            </summary>
            <param name="pos">The position.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="progressColor">Color of the progress.</param>
            <param name="outlineColor">Color of the outline.</param>
        </member>
        <member name="M:Lerp2API.Utility.xGUI.ProgressBar.#ctor(UnityEngine.Rect,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.xGUI.ProgressBar"/> class.
            </summary>
            <param name="pos">The position.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="progressColor">Color of the progress.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="eta">The eta.</param>
        </member>
        <member name="M:Lerp2API.Utility.xGUI.ProgressBar.Show(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Shows the specified percentage.
            </summary>
            <param name="percentage">The percentage.</param>
            <param name="finished">if set to <c>true</c> [finished].</param>
            <param name="showPercentage">if set to <c>true</c> [show percentage].</param>
        </member>
        <member name="M:Lerp2API.Utility.xGUI.ProgressBar.GetDuration(System.Double)">
            <summary>
            Gets the duration.
            </summary>
            <param name="per">The per.</param>
        </member>
        <member name="T:Lerp2API.Mono.LerpedMono">
            <summary>
            Class LerpedMono.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2API.Mono.LerpedMono.me">
            <summary>
            Me
            </summary>
        </member>
        <member name="M:Lerp2API.Mono.LerpedMono.SetInstance(Lerp2API.Mono.LerpedMono)">
            <summary>
            Sets the instance.
            </summary>
            <param name="ins">The ins.</param>
        </member>
        <member name="M:Lerp2API.Mono.LerpedMono.GetInstance``1">
            <summary>
            Gets the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.Mono.LerpedMono.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="T:Lerp2API.Properties.Resources">
            <summary>
              Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:Lerp2API.Properties.Resources.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:Lerp2API.Properties.Resources.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
            </summary>
        </member>
        <member name="T:Lerp2API.Serializers.Ikillnukes.XMLTools">
            <summary>
            Class XMLTools.
            </summary>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.Serialize``1(``0,System.Boolean)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="indented">if set to <c>true</c> [indented].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.SerializeToFile``1(``0,System.String,System.Boolean)">
            <summary>
            Serializes to file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="filePath">The file path.</param>
            <param name="indented">if set to <c>true</c> [indented].</param>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.DeserializeFromFile``1(System.String)">
            <summary>
            Deserializes from file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath">The file path.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.Beautify(System.Object)">
            <summary>
            Beautifies the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.ObjectToByteArray(System.Object)">
            <summary>
            Objects to byte array.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Lerp2API.Serializers.Ikillnukes.XMLTools.ByteArrayToObject(System.Byte[])">
            <summary>
            Bytes the array to object.
            </summary>
            <param name="arrBytes">The arr bytes.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Lerp2API.Tests.GUITest">
            <summary>
            Class GUITest.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="M:Lerp2API.Tests.GUITest.OnGUI">
            <summary>
            Called when [GUI].
            </summary>
        </member>
        <member name="T:Lerp2API.Tests.Test">
            <summary>
            Class Test.
            </summary>
        </member>
        <member name="P:Lerp2API.Tests.Test.Hola">
            <summary>
            Gets or sets the hola.
            </summary>
            <value>The hola.</value>
        </member>
        <member name="M:Lerp2API.Tests.Test.Suma(System.Int32,System.Int32)">
            <summary>
            Sumas the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Lerp2API.Tests.Test.Resta(System.Int32,System.Int32)">
            <summary>
            Restas the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Client.PipeClient">
            <summary>
            Class PipeClient.
            </summary>
            <seealso cref="T:ClientServerUsingNamedPipes.Interfaces.ICommunicationClient" />
        </member>
        <member name="M:ClientServerUsingNamedPipes.Client.PipeClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ClientServerUsingNamedPipes.Client.PipeClient"/> class.
            </summary>
            <param name="serverId">The server identifier.</param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Client.PipeClient.Start">
            <summary>
            Starts the client. Connects to the server.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Client.PipeClient.Stop">
            <summary>
            Stops the client. Waits for pipe drain, closes and disposes it.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Client.PipeClient.SendMessage(System.String)">
            <summary>
            This method sends the given message asynchronously over the communication channel
            </summary>
            <param name="message">The message.</param>
            <returns>A task of TaskResult</returns>
            <exception cref="T:System.IO.IOException">pipe is not connected</exception>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Client.PipeClient.EndWriteCallBack(System.IAsyncResult)">
            <summary>
            This callback is called when the BeginWrite operation is completed.
            It can be called whether the connection is valid or not.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Interfaces.ICommunication">
            <summary>
            Interface ICommunication
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Interfaces.ICommunication.Start">
            <summary>
            Starts the communication channel
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Interfaces.ICommunication.Stop">
            <summary>
            Stops the communication channel
            </summary>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Interfaces.ICommunicationClient">
            <summary>
            Interface ICommunicationClient
            </summary>
            <seealso cref="T:ClientServerUsingNamedPipes.Interfaces.ICommunication" />
        </member>
        <member name="M:ClientServerUsingNamedPipes.Interfaces.ICommunicationClient.SendMessage(System.String)">
            <summary>
            This method sends the given message asynchronously over the communication channel
            </summary>
            <param name="message"></param>
            <returns>A task of TaskResult</returns>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Interfaces.ICommunicationServer">
            <summary>
            Interface ICommunicationServer
            </summary>
            <seealso cref="T:ClientServerUsingNamedPipes.Interfaces.ICommunication" />
        </member>
        <member name="P:ClientServerUsingNamedPipes.Interfaces.ICommunicationServer.ServerId">
            <summary>
            The server id
            </summary>
        </member>
        <member name="E:ClientServerUsingNamedPipes.Interfaces.ICommunicationServer.MessageReceivedEvent">
            <summary>
            This event is fired when a message is received
            </summary>
        </member>
        <member name="E:ClientServerUsingNamedPipes.Interfaces.ICommunicationServer.ClientConnectedEvent">
            <summary>
            This event is fired when a client connects
            </summary>
        </member>
        <member name="E:ClientServerUsingNamedPipes.Interfaces.ICommunicationServer.ClientDisconnectedEvent">
            <summary>
            This event is fired when a client disconnects
            </summary>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Interfaces.ClientConnectedEventArgs">
            <summary>
            Class ClientConnectedEventArgs.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:ClientServerUsingNamedPipes.Interfaces.ClientConnectedEventArgs.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>The client identifier.</value>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Interfaces.ClientDisconnectedEventArgs">
            <summary>
            Class ClientDisconnectedEventArgs.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:ClientServerUsingNamedPipes.Interfaces.ClientDisconnectedEventArgs.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>The client identifier.</value>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Interfaces.MessageReceivedEventArgs">
            <summary>
            Class MessageReceivedEventArgs.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:ClientServerUsingNamedPipes.Interfaces.MessageReceivedEventArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new NamedPipeServerStream
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.Start">
            <summary>
            This method begins an asynchronous operation to wait for a client to connect.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.Stop">
            <summary>
            This method disconnects, closes and disposes the server
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.BeginRead(ClientServerUsingNamedPipes.Server.InternalPipeServer.Info)">
            <summary>
            This method begins an asynchronous read operation.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.WaitForConnectionCallBack(System.IAsyncResult)">
            <summary>
            This callback is called when the async WaitForConnection operation is completed,
            whether a connection was made or not. WaitForConnection can be completed when the server disconnects.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.EndReadCallBack(System.IAsyncResult)">
            <summary>
            This callback is called when the BeginRead operation is completed.
            We can arrive here whether the connection is valid or not
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.OnMessageReceived(System.String)">
            <summary>
            This method fires MessageReceivedEvent with the given message
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.OnConnected">
            <summary>
            This method fires ConnectedEvent
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.InternalPipeServer.OnDisconnected">
            <summary>
            This method fires DisconnectedEvent
            </summary>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Server.PipeServer">
            <summary>
            Class PipeServer.
            </summary>
            <seealso cref="T:ClientServerUsingNamedPipes.Interfaces.ICommunicationServer" />
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClientServerUsingNamedPipes.Server.PipeServer"/> class.
            </summary>
        </member>
        <member name="E:ClientServerUsingNamedPipes.Server.PipeServer.MessageReceivedEvent">
            <summary>
            This event is fired when a message is received
            </summary>
        </member>
        <member name="E:ClientServerUsingNamedPipes.Server.PipeServer.ClientConnectedEvent">
            <summary>
            This event is fired when a client connects
            </summary>
        </member>
        <member name="E:ClientServerUsingNamedPipes.Server.PipeServer.ClientDisconnectedEvent">
            <summary>
            This event is fired when a client disconnects
            </summary>
        </member>
        <member name="P:ClientServerUsingNamedPipes.Server.PipeServer.ServerId">
            <summary>
            The server id
            </summary>
            <value>The server identifier.</value>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.Start">
            <summary>
            Starts the communication channel
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.Stop">
            <summary>
            Stops the communication channel
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.StartNamedPipeServer">
            <summary>
            Starts a new NamedPipeServerStream that waits for connection
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.StopNamedPipeServer(System.String)">
            <summary>
            Stops the server that belongs to the given id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.UnregisterFromServerEvents(ClientServerUsingNamedPipes.Interfaces.ICommunicationServer)">
            <summary>
            Unregisters from the given server's events
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.OnMessageReceived(ClientServerUsingNamedPipes.Interfaces.MessageReceivedEventArgs)">
            <summary>
            Fires MessageReceivedEvent in the current thread
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.OnClientConnected(ClientServerUsingNamedPipes.Interfaces.ClientConnectedEventArgs)">
            <summary>
            Fires ClientConnectedEvent in the current thread
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.OnClientDisconnected(ClientServerUsingNamedPipes.Interfaces.ClientDisconnectedEventArgs)">
            <summary>
            Fires ClientDisconnectedEvent in the current thread
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.ClientConnectedHandler(System.Object,ClientServerUsingNamedPipes.Interfaces.ClientConnectedEventArgs)">
            <summary>
            Handles a client connection. Fires the relevant event and prepares for new connection.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.ClientDisconnectedHandler(System.Object,ClientServerUsingNamedPipes.Interfaces.ClientDisconnectedEventArgs)">
            <summary>
            Hanldes a client disconnection. Fires the relevant event ans removes its server from the pool
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Server.PipeServer.MessageReceivedHandler(System.Object,ClientServerUsingNamedPipes.Interfaces.MessageReceivedEventArgs)">
            <summary>
            Handles a message that is received from the client. Fires the relevant event.
            </summary>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Utilities.EventHandlerExtensions">
            <summary>
            Class EventHandlerExtensions.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Utilities.EventHandlerExtensions.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            This method is a safe way to fire an event in a multithreaded process.
            Since there is a tiny chance that the event becomes null after the null check but before the invocation,
            we use this extension where the event is passed as an argument.
            Why is this helpful? MulticastDelagates are immutable, so if you first assign a variable, null check against the variable and invoke through it,
            you are safe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Utilities.Logger">
            <summary>
            Class Logger.
            </summary>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Utilities.Logger.Error(System.Object)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Utilities.Logger.Debug(System.Object)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ClientServerUsingNamedPipes.Utilities.Logger.Info(System.Object)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ClientServerUsingNamedPipes.Utilities.TaskResult">
            <summary>
            Class TaskResult.
            </summary>
        </member>
        <member name="P:ClientServerUsingNamedPipes.Utilities.TaskResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether this instance is success.
            </summary>
            <value><c>true</c> if this instance is success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClientServerUsingNamedPipes.Utilities.TaskResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:Lerp2Assets.Vehicles.Ball.Ball">
            <summary>
            Class Ball.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="M:Lerp2Assets.Vehicles.Ball.Ball.Move(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Moves the specified move direction.
            </summary>
            <param name="moveDirection">The move direction.</param>
            <param name="jump">if set to <c>true</c> [jump].</param>
        </member>
        <member name="T:Lerp2Assets.Vehicles.Ball.BallUserControl">
            <summary>
            Class BallUserControl.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager">
            <summary>
            Class CrossPlatformInputManager.
            </summary>
            <summary>
            Class CrossPlatformInputManager.
            </summary>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SwitchActiveInputMethod(Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.ActiveInputMethod)">
            <summary>
            Switches the active input method.
            </summary>
            <param name="activeInputMethod">The active input method.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.AxisExists(System.String)">
            <summary>
            Axises the exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.ButtonExists(System.String)">
            <summary>
            Buttons the exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.RegisterVirtualAxis(Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis)">
            <summary>
            Registers the virtual axis.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.RegisterVirtualButton(Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton)">
            <summary>
            Registers the virtual button.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.UnRegisterVirtualAxis(System.String)">
            <summary>
            Uns the register virtual axis.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.UnRegisterVirtualButton(System.String)">
            <summary>
            Uns the register virtual button.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxisReference(System.String)">
            <summary>
            Virtuals the axis reference.
            </summary>
            <param name="name">The name.</param>
            <returns>VirtualAxis.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.GetAxis(System.String)">
            <summary>
            Gets the axis.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.GetAxisRaw(System.String)">
            <summary>
            Gets the axis raw.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.GetButtonDown(System.String)">
            <summary>
            Gets the button down.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.GetButtonUp(System.String)">
            <summary>
            Gets the button up.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetButtonDown(System.String)">
            <summary>
            Sets the button down.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetButtonUp(System.String)">
            <summary>
            Sets the button up.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetAxisPositive(System.String)">
            <summary>
            Sets the axis positive.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetAxisNegative(System.String)">
            <summary>
            Sets the axis negative.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetAxisZero(System.String)">
            <summary>
            Sets the axis zero.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetAxis(System.String,System.Single)">
            <summary>
            Sets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.mousePosition">
            <summary>
            Gets the mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetVirtualMousePositionX(System.Single)">
            <summary>
            Sets the virtual mouse position x.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetVirtualMousePositionY(System.Single)">
            <summary>
            Sets the virtual mouse position y.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.SetVirtualMousePositionZ(System.Single)">
            <summary>
            Sets the virtual mouse position z.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis">
            <summary>
            Class VirtualAxis.
            </summary>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.matchWithInputManager">
            <summary>
            Gets a value indicating whether [match with input manager].
            </summary>
            <value><c>true</c> if [match with input manager]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="matchToInputSettings">if set to <c>true</c> [match to input settings].</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.Update(System.Single)">
            <summary>
            Updates the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.GetValue">
            <summary>
            Gets the get value.
            </summary>
            <value>The get value.</value>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis.GetValueRaw">
            <summary>
            Gets the get value raw.
            </summary>
            <value>The get value raw.</value>
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton">
            <summary>
            Class VirtualButton.
            </summary>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.matchWithInputManager">
            <summary>
            Gets a value indicating whether [match with input manager].
            </summary>
            <value><c>true</c> if [match with input manager]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="matchToInputSettings">if set to <c>true</c> [match to input settings].</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.Pressed">
            <summary>
            Presseds this instance.
            </summary>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.Released">
            <summary>
            Releaseds this instance.
            </summary>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.GetButton">
            <summary>
            Gets a value indicating whether [get button].
            </summary>
            <value><c>true</c> if [get button]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.GetButtonDown">
            <summary>
            Gets a value indicating whether [get button down].
            </summary>
            <value><c>true</c> if [get button down]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton.GetButtonUp">
            <summary>
            Gets a value indicating whether [get button up].
            </summary>
            <value><c>true</c> if [get button up]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.ActiveInputMethod">
            <summary>
            Enum ActiveInputMethod
            </summary>
        </member>
        <member name="F:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.ActiveInputMethod.Hardware">
            <summary>
            The hardware
            </summary>
        </member>
        <member name="F:Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.ActiveInputMethod.Touch">
            <summary>
            The touch
            </summary>
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput">
            <summary>
            Class MobileInput.
            </summary>
            <seealso cref="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput" />
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.GetAxis(System.String,System.Boolean)">
            <summary>
            Gets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="raw">if set to <c>true</c> [raw].</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.SetButtonDown(System.String)">
            <summary>
            Sets the button down.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.SetButtonUp(System.String)">
            <summary>
            Sets the button up.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.SetAxisPositive(System.String)">
            <summary>
            Sets the axis positive.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.SetAxisNegative(System.String)">
            <summary>
            Sets the axis negative.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.SetAxisZero(System.String)">
            <summary>
            Sets the axis zero.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.SetAxis(System.String,System.Single)">
            <summary>
            Sets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.GetButtonDown(System.String)">
            <summary>
            Gets the button down.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.GetButtonUp(System.String)">
            <summary>
            Gets the button up.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.MobileInput.MousePosition">
            <summary>
            Mouses the position.
            </summary>
            <returns>Vector3.</returns>
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput">
            <summary>
            Class StandaloneInput.
            </summary>
            <seealso cref="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput" />
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.GetAxis(System.String,System.Boolean)">
            <summary>
            Gets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="raw">if set to <c>true</c> [raw].</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.GetButtonDown(System.String)">
            <summary>
            Gets the button down.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.GetButtonUp(System.String)">
            <summary>
            Gets the button up.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.SetButtonDown(System.String)">
            <summary>
            Sets the button down.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.Exception">This is not possible to be called for standalone input. Please check your platform and code where this is called</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.SetButtonUp(System.String)">
            <summary>
            Sets the button up.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.Exception">This is not possible to be called for standalone input. Please check your platform and code where this is called</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.SetAxisPositive(System.String)">
            <summary>
            Sets the axis positive.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.Exception">This is not possible to be called for standalone input. Please check your platform and code where this is called</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.SetAxisNegative(System.String)">
            <summary>
            Sets the axis negative.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.Exception">This is not possible to be called for standalone input. Please check your platform and code where this is called</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.SetAxisZero(System.String)">
            <summary>
            Sets the axis zero.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.Exception">This is not possible to be called for standalone input. Please check your platform and code where this is called</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.SetAxis(System.String,System.Single)">
            <summary>
            Sets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.Exception">This is not possible to be called for standalone input. Please check your platform and code where this is called</exception>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.PlatformSpecific.StandaloneInput.MousePosition">
            <summary>
            Mouses the position.
            </summary>
            <returns>Vector3.</returns>
        </member>
        <member name="T:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput">
            <summary>
            Class VirtualInput.
            </summary>
        </member>
        <member name="P:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.virtualMousePosition">
            <summary>
            Gets the virtual mouse position.
            </summary>
            <value>The virtual mouse position.</value>
        </member>
        <member name="F:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.m_VirtualAxes">
            <summary>
            The m virtual axes
            </summary>
        </member>
        <member name="F:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.m_VirtualButtons">
            <summary>
            The m virtual buttons
            </summary>
        </member>
        <member name="F:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.m_AlwaysUseVirtual">
            <summary>
            The m always use virtual
            </summary>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.AxisExists(System.String)">
            <summary>
            Axises the exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.ButtonExists(System.String)">
            <summary>
            Buttons the exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.RegisterVirtualAxis(Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualAxis)">
            <summary>
            Registers the virtual axis.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.RegisterVirtualButton(Lerp2Assets.CrossPlatformInput.CrossPlatformInputManager.VirtualButton)">
            <summary>
            Registers the virtual button.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.UnRegisterVirtualAxis(System.String)">
            <summary>
            Uns the register virtual axis.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.UnRegisterVirtualButton(System.String)">
            <summary>
            Uns the register virtual button.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.VirtualAxisReference(System.String)">
            <summary>
            Virtuals the axis reference.
            </summary>
            <param name="name">The name.</param>
            <returns>CrossPlatformInputManager.VirtualAxis.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetVirtualMousePositionX(System.Single)">
            <summary>
            Sets the virtual mouse position x.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetVirtualMousePositionY(System.Single)">
            <summary>
            Sets the virtual mouse position y.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetVirtualMousePositionZ(System.Single)">
            <summary>
            Sets the virtual mouse position z.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.GetAxis(System.String,System.Boolean)">
            <summary>
            Gets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="raw">if set to <c>true</c> [raw].</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.GetButtonDown(System.String)">
            <summary>
            Gets the button down.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.GetButtonUp(System.String)">
            <summary>
            Gets the button up.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetButtonDown(System.String)">
            <summary>
            Sets the button down.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetButtonUp(System.String)">
            <summary>
            Sets the button up.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetAxisPositive(System.String)">
            <summary>
            Sets the axis positive.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetAxisNegative(System.String)">
            <summary>
            Sets the axis negative.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetAxisZero(System.String)">
            <summary>
            Sets the axis zero.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.SetAxis(System.String,System.Single)">
            <summary>
            Sets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Lerp2Assets.CrossPlatformInput.CrossPlatformInput.VirtualInput.MousePosition">
            <summary>
            Mouses the position.
            </summary>
            <returns>Vector3.</returns>
        </member>
        <member name="T:Lerp2Assets.Characters.FirstPerson.FirstPersonController">
            <summary>
            Class FirstPersonController.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.FirstPersonController.m_PreviouslyGrounded">
            <summary>
            The m previously grounded
            </summary>
        </member>
        <member name="T:Lerp2Assets.Characters.FirstPerson.HeadBob">
            <summary>
            Class HeadBob.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.HeadBob.Camera">
            <summary>
            The camera
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.HeadBob.motionBob">
            <summary>
            The motion bob
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.HeadBob.jumpAndLandingBob">
            <summary>
            The jump and landing bob
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.HeadBob.rigidbodyFirstPersonController">
            <summary>
            The rigidbody first person controller
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.HeadBob.StrideInterval">
            <summary>
            The stride interval
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.HeadBob.RunningStrideLengthen">
            <summary>
            The running stride lengthen
            </summary>
        </member>
        <member name="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController">
            <summary>
            Class RigidbodyFirstPersonController.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings">
            <summary>
            Class MovementSettings.
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.ForwardSpeed">
            <summary>
            The forward speed
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.BackwardSpeed">
            <summary>
            The backward speed
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.StrafeSpeed">
            <summary>
            The strafe speed
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.RunMultiplier">
            <summary>
            The run multiplier
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.RunKey">
            <summary>
            The run key
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.JumpForce">
            <summary>
            The jump force
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.SlopeCurveModifier">
            <summary>
            The slope curve modifier
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.CurrentTargetSpeed">
            <summary>
            The current target speed
            </summary>
        </member>
        <member name="M:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.UpdateDesiredTargetSpeed(UnityEngine.Vector2)">
            <summary>
            Updates the desired target speed.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings.Running">
            <summary>
            Gets a value indicating whether this <see cref="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.MovementSettings"/> is running.
            </summary>
            <value><c>true</c> if running; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.AdvancedSettings">
            <summary>
            Class AdvancedSettings.
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.AdvancedSettings.groundCheckDistance">
            <summary>
            The ground check distance
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.AdvancedSettings.stickToGroundHelperDistance">
            <summary>
            The stick to ground helper distance
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.AdvancedSettings.slowDownRate">
            <summary>
            The slow down rate
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.AdvancedSettings.airControl">
            <summary>
            The air control
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.AdvancedSettings.shellOffset">
            <summary>
            The shell offset
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.cam">
            <summary>
            The cam
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.movementSettings">
            <summary>
            The movement settings
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.mouseLook">
            <summary>
            The mouse look
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.advancedSettings">
            <summary>
            The advanced settings
            </summary>
        </member>
        <member name="P:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.Velocity">
            <summary>
            Gets the velocity.
            </summary>
            <value>The velocity.</value>
        </member>
        <member name="P:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.Grounded">
            <summary>
            Gets a value indicating whether this <see cref="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController"/> is grounded.
            </summary>
            <value><c>true</c> if grounded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.Jumping">
            <summary>
            Gets a value indicating whether this <see cref="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController"/> is jumping.
            </summary>
            <value><c>true</c> if jumping; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.Running">
            <summary>
            Gets a value indicating whether this <see cref="T:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController"/> is running.
            </summary>
            <value><c>true</c> if running; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2Assets.Characters.FirstPerson.RigidbodyFirstPersonController.GroundCheck">
            sphere cast down just beyond the bottom of the capsule to see if the capsule is colliding round the bottom
        </member>
        <member name="T:Lerp2Assets.Characters.FirstPerson.MouseLook">
            <summary>
            Class MouseLook.
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.XSensitivity">
            <summary>
            The x sensitivity
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.YSensitivity">
            <summary>
            The y sensitivity
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.clampVerticalRotation">
            <summary>
            The clamp vertical rotation
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.MinimumX">
            <summary>
            The minimum x
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.MaximumX">
            <summary>
            The maximum x
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.smooth">
            <summary>
            The smooth
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.smoothTime">
            <summary>
            The smooth time
            </summary>
        </member>
        <member name="F:Lerp2Assets.Characters.FirstPerson.MouseLook.lockCursor">
            <summary>
            The lock cursor
            </summary>
        </member>
        <member name="M:Lerp2Assets.Characters.FirstPerson.MouseLook.Init(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Initializes the specified character.
            </summary>
            <param name="character">The character.</param>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:Lerp2Assets.Characters.FirstPerson.MouseLook.LookRotation(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Looks the rotation.
            </summary>
            <param name="character">The character.</param>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:Lerp2Assets.Characters.FirstPerson.MouseLook.SetCursorLock(System.Boolean)">
            <summary>
            Sets the cursor lock.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Lerp2Assets.Characters.FirstPerson.MouseLook.UpdateCursorLock">
            <summary>
            Updates the cursor lock.
            </summary>
        </member>
        <member name="T:Lerp2Assets.Characters.ThirdPerson.AICharacterControl">
            <summary>
            Class AICharacterControl.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:Lerp2Assets.Characters.ThirdPerson.AICharacterControl.agent">
            <summary>
            Gets the agent.
            </summary>
            <value>The agent.</value>
        </member>
        <member name="P:Lerp2Assets.Characters.ThirdPerson.AICharacterControl.character">
            <summary>
            Gets the character.
            </summary>
            <value>The character.</value>
        </member>
        <member name="F:Lerp2Assets.Characters.ThirdPerson.AICharacterControl.target">
            <summary>
            The target
            </summary>
        </member>
        <member name="M:Lerp2Assets.Characters.ThirdPerson.AICharacterControl.SetTarget(UnityEngine.Transform)">
            <summary>
            Sets the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="T:Lerp2Assets.Characters.ThirdPerson.ThirdPersonCharacter">
            <summary>
            Class ThirdPersonCharacter.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="M:Lerp2Assets.Characters.ThirdPerson.ThirdPersonCharacter.Move(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Moves the specified move.
            </summary>
            <param name="move">The move.</param>
            <param name="crouch">if set to <c>true</c> [crouch].</param>
            <param name="jump">if set to <c>true</c> [jump].</param>
        </member>
        <member name="M:Lerp2Assets.Characters.ThirdPerson.ThirdPersonCharacter.OnAnimatorMove">
            <summary>
            Called when [animator move].
            </summary>
        </member>
        <member name="T:Lerp2Assets.Characters.ThirdPerson.ThirdPersonUserControl">
            <summary>
            Class ThirdPersonUserControl.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:Lerp2Assets.Utility.CurveControlledBob">
            <summary>
            Class CurveControlledBob.
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.CurveControlledBob.HorizontalBobRange">
            <summary>
            The horizontal bob range
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.CurveControlledBob.VerticalBobRange">
            <summary>
            The vertical bob range
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.CurveControlledBob.Bobcurve">
            <summary>
            The bobcurve
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.CurveControlledBob.VerticaltoHorizontalRatio">
            <summary>
            The verticalto horizontal ratio
            </summary>
        </member>
        <member name="M:Lerp2Assets.Utility.CurveControlledBob.Setup(UnityEngine.Camera,System.Single)">
            <summary>
            Setups the specified camera.
            </summary>
            <param name="camera">The camera.</param>
            <param name="bobBaseInterval">The bob base interval.</param>
        </member>
        <member name="M:Lerp2Assets.Utility.CurveControlledBob.DoHeadBob(System.Single)">
            <summary>
            Does the head bob.
            </summary>
            <param name="speed">The speed.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="T:Lerp2Assets.Utility.FOVKick">
            <summary>
            Class FOVKick.
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.FOVKick.Camera">
            <summary>
            The camera
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.FOVKick.originalFov">
            <summary>
            The original fov
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.FOVKick.FOVIncrease">
            <summary>
            The fov increase
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.FOVKick.TimeToIncrease">
            <summary>
            The time to increase
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.FOVKick.TimeToDecrease">
            <summary>
            The time to decrease
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.FOVKick.IncreaseCurve">
            <summary>
            The increase curve
            </summary>
        </member>
        <member name="M:Lerp2Assets.Utility.FOVKick.Setup(UnityEngine.Camera)">
            <summary>
            Setups the specified camera.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:Lerp2Assets.Utility.FOVKick.ChangeCamera(UnityEngine.Camera)">
            <summary>
            Changes the camera.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:Lerp2Assets.Utility.FOVKick.FOVKickUp">
            <summary>
            Fovs the kick up.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:Lerp2Assets.Utility.FOVKick.FOVKickDown">
            <summary>
            Fovs the kick down.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:Lerp2Assets.Utility.LerpControlledBob">
            <summary>
            Class LerpControlledBob.
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.LerpControlledBob.BobDuration">
            <summary>
            The bob duration
            </summary>
        </member>
        <member name="F:Lerp2Assets.Utility.LerpControlledBob.BobAmount">
            <summary>
            The bob amount
            </summary>
        </member>
        <member name="M:Lerp2Assets.Utility.LerpControlledBob.Offset">
            <summary>
            Offsets this instance.
            </summary>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Lerp2Assets.Utility.LerpControlledBob.DoBobCycle">
            <summary>
            Does the bob cycle.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:Lerp2Assets.Utility.SmoothFollow">
            <summary>
            Class SmoothFollow.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:FallingAvoider">
            <summary>
            Class FallingAvoider.
            </summary>
        </member>
        <member name="F:FallingAvoider.m_current">
            <summary>
            The m current
            </summary>
        </member>
        <member name="F:FallingAvoider.m_message">
            <summary>
            The m message
            </summary>
        </member>
        <member name="F:FallingAvoider.m_underZero">
            <summary>
            The m under zero
            </summary>
        </member>
        <member name="F:FallingAvoider.m_findGroundAtStart">
            <summary>
            The m find ground at start
            </summary>
        </member>
        <member name="F:FallingAvoider.teleported">
            <summary>
            The teleported
            </summary>
        </member>
        <member name="M:FallingAvoider.FindGround(System.Boolean)">
            <summary>
            Finds the ground.
            </summary>
            <param name="debug">if set to <c>true</c> [debug].</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:BoxOutline">
            <summary>
            Class BoxOutline.
            </summary>
        </member>
        <member name="P:BoxOutline.halfSampleCountX">
            <summary>
            Gets or sets the half sample count x.
            </summary>
            <value>The half sample count x.</value>
        </member>
        <member name="P:BoxOutline.halfSampleCountY">
            <summary>
            Gets or sets the half sample count y.
            </summary>
            <value>The half sample count y.</value>
        </member>
        <member name="M:BoxOutline.ModifyVertices(System.Collections.Generic.List{UnityEngine.UIVertex})">
            <summary>
            Modifies the vertices.
            </summary>
            <param name="verts">The verts.</param>
        </member>
        <member name="T:CircleOutline">
            <summary>
            Class CircleOutline.
            </summary>
        </member>
        <member name="M:CircleOutline.OnValidate">
            <summary>
            Called when [validate].
            </summary>
        </member>
        <member name="P:CircleOutline.circleCount">
            <summary>
            Gets or sets the circle count.
            </summary>
            <value>The circle count.</value>
        </member>
        <member name="P:CircleOutline.firstSample">
            <summary>
            Gets or sets the first sample.
            </summary>
            <value>The first sample.</value>
        </member>
        <member name="P:CircleOutline.sampleIncrement">
            <summary>
            Gets or sets the sample increment.
            </summary>
            <value>The sample increment.</value>
        </member>
        <member name="M:CircleOutline.ModifyVertices(System.Collections.Generic.List{UnityEngine.UIVertex})">
            <summary>
            Modifies the vertices.
            </summary>
            <param name="verts">The verts.</param>
        </member>
        <member name="T:ModifiedShadow">
            <summary>
            The behaviour of this class is almost the same as the original except:
            1. It absorbs version differences.
            2. It corrects the calculation of vertex list capacity (Unity 5.3 or older).
            </summary>
        </member>
        <member name="M:ModifiedShadow.ApplyShadow(System.Collections.Generic.List{UnityEngine.UIVertex},UnityEngine.Color32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Applies the shadow.
            </summary>
            <param name="verts">The verts.</param>
            <param name="color">The color.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:ModifiedShadow.ModifyMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            Modifies the mesh.
            </summary>
            <param name="vh">The vh.</param>
        </member>
        <member name="M:ModifiedShadow.ModifyVertices(System.Collections.Generic.List{UnityEngine.UIVertex})">
            <summary>
            Modifies the vertices.
            </summary>
            <param name="verts">The verts.</param>
        </member>
        <member name="T:ObjectPool`1">
            <summary>
            Class ObjectPool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ObjectPool`1.countAll">
            <summary>
            Gets the count all.
            </summary>
            <value>The count all.</value>
        </member>
        <member name="P:ObjectPool`1.countActive">
            <summary>
            Gets the count active.
            </summary>
            <value>The count active.</value>
        </member>
        <member name="P:ObjectPool`1.countInactive">
            <summary>
            Gets the count inactive.
            </summary>
            <value>The count inactive.</value>
        </member>
        <member name="M:ObjectPool`1.#ctor(UnityEngine.Events.UnityAction{`0},UnityEngine.Events.UnityAction{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ObjectPool`1"/> class.
            </summary>
            <param name="actionOnGet">The action on get.</param>
            <param name="actionOnRelease">The action on release.</param>
        </member>
        <member name="M:ObjectPool`1.Get">
            <summary>
            Gets this instance.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:ObjectPool`1.Release(`0)">
            <summary>
            Releases the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:Outline8">
            <summary>
            Class Outline8.
            </summary>
        </member>
        <member name="M:Outline8.ModifyVertices(System.Collections.Generic.List{UnityEngine.UIVertex})">
            <summary>
            Modifies the vertices.
            </summary>
            <param name="verts">The verts.</param>
        </member>
        <member name="T:UnityEngine.Mathd">
            <summary>
            Struct Mathd
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.PI">
            <summary>
            The pi
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Infinity">
            <summary>
            The infinity
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.NegativeInfinity">
            <summary>
            The negative infinity
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Deg2Rad">
            <summary>
            The deg2 RAD
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Rad2Deg">
            <summary>
            The rad2 deg
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Epsilon">
            <summary>
            The epsilon
            </summary>
        </member>
        <member name="M:UnityEngine.Mathd.Sin(System.Double)">
            <summary>
            Sins the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Cos(System.Double)">
            <summary>
            Coses the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Tan(System.Double)">
            <summary>
            Tans the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Asin(System.Double)">
            <summary>
            Asins the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Acos(System.Double)">
            <summary>
            Acoses the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Atan(System.Double)">
            <summary>
            Atans the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Atan2(System.Double,System.Double)">
            <summary>
            Atan2s the specified y.
            </summary>
            <param name="y">The y.</param>
            <param name="x">The x.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Sqrt(System.Double)">
            <summary>
            SQRTs the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Abs(System.Double)">
            <summary>
            Abses the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Abs(System.Int32)">
            <summary>
            Abses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Double,System.Double)">
            <summary>
            Minimums the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Double[])">
            <summary>
            Minimums the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Int32,System.Int32)">
            <summary>
            Minimums the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Int32[])">
            <summary>
            Minimums the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Double,System.Double)">
            <summary>
            Maximums the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Double[])">
            <summary>
            Maximums the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Int32,System.Int32)">
            <summary>
            Maximums the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Int32[])">
            <summary>
            Maximums the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Pow(System.Double,System.Double)">
            <summary>
            Pows the specified d.
            </summary>
            <param name="d">The d.</param>
            <param name="p">The p.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Exp(System.Double)">
            <summary>
            Exps the specified power.
            </summary>
            <param name="power">The power.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Log(System.Double,System.Double)">
            <summary>
            Logs the specified d.
            </summary>
            <param name="d">The d.</param>
            <param name="p">The p.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Log(System.Double)">
            <summary>
            Logs the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Log10(System.Double)">
            <summary>
            Log10s the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Ceil(System.Double)">
            <summary>
            Ceils the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Floor(System.Double)">
            <summary>
            Floors the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Round(System.Double)">
            <summary>
            Rounds the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.CeilToInt(System.Double)">
            <summary>
            Ceils to int.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.FloorToInt(System.Double)">
            <summary>
            Floors to int.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.RoundToInt(System.Double)">
            <summary>
            Rounds to int.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Sign(System.Double)">
            <summary>
            Signs the specified d.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Clamp01(System.Double)">
            <summary>
            Clamp01s the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Lerps the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.LerpAngle(System.Double,System.Double,System.Double)">
            <summary>
            Lerps the angle.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.MoveTowards(System.Double,System.Double,System.Double)">
            <summary>
            Moves the towards.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="maxDelta">The maximum delta.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.MoveTowardsAngle(System.Double,System.Double,System.Double)">
            <summary>
            Moves the towards angle.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="maxDelta">The maximum delta.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Gamma(System.Double,System.Double,System.Double)">
            <summary>
            Gammas the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="absmax">The absmax.</param>
            <param name="gamma">The gamma.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Approximately(System.Double,System.Double)">
            <summary>
            Approximatelies the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothDamp(System.Double,System.Double,System.Double@,System.Double,System.Double)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothDamp(System.Double,System.Double,System.Double@,System.Double)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothDamp(System.Double,System.Double,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothDampAngle(System.Double,System.Double,System.Double@,System.Double,System.Double)">
            <summary>
            Smoothes the damp angle.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothDampAngle(System.Double,System.Double,System.Double@,System.Double)">
            <summary>
            Smoothes the damp angle.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothDampAngle(System.Double,System.Double,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Smoothes the damp angle.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Repeat(System.Double,System.Double)">
            <summary>
            Repeats the specified t.
            </summary>
            <param name="t">The t.</param>
            <param name="length">The length.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.PingPong(System.Double,System.Double)">
            <summary>
            Pings the pong.
            </summary>
            <param name="t">The t.</param>
            <param name="length">The length.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
            Inverses the lerp.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.DeltaAngle(System.Double,System.Double)">
            <summary>
            Deltas the angle.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:UnityEngine.Vector2d">
            <summary>
            Struct Vector2d
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2d.kEpsilon">
            <summary>
            The k epsilon
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2d.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2d.y">
            <summary>
            The y
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Invalid Vector2d index!
            or
            Invalid Vector2d index!
            </exception>
        </member>
        <member name="P:UnityEngine.Vector2d.normalized">
            <summary>
            Gets the normalized.
            </summary>
            <value>The normalized.</value>
        </member>
        <member name="P:UnityEngine.Vector2d.magnitude">
            <summary>
            Gets the magnitude.
            </summary>
            <value>The magnitude.</value>
        </member>
        <member name="P:UnityEngine.Vector2d.sqrMagnitude">
            <summary>
            Gets the SQR magnitude.
            </summary>
            <value>The SQR magnitude.</value>
        </member>
        <member name="P:UnityEngine.Vector2d.zero">
            <summary>
            Gets the zero.
            </summary>
            <value>The zero.</value>
        </member>
        <member name="P:UnityEngine.Vector2d.one">
            <summary>
            Gets the one.
            </summary>
            <value>The one.</value>
        </member>
        <member name="P:UnityEngine.Vector2d.up">
            <summary>
            Gets up.
            </summary>
            <value>Up.</value>
        </member>
        <member name="P:UnityEngine.Vector2d.right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="M:UnityEngine.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector2d"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Implicit(UnityEngine.Vector3d)~UnityEngine.Vector2d">
            <summary>
            Performs an implicit conversion from <see cref="T:UnityEngine.Vector3d"/> to <see cref="T:UnityEngine.Vector2d"/>.
            </summary>
            <param name="v">The v.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Implicit(UnityEngine.Vector2d)~UnityEngine.Vector3d">
            <summary>
            Performs an implicit conversion from <see cref="T:UnityEngine.Vector2d"/> to <see cref="T:UnityEngine.Vector3d"/>.
            </summary>
            <param name="v">The v.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Addition(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Subtraction(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_UnaryNegation(UnityEngine.Vector2d)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Multiply(UnityEngine.Vector2d,System.Double)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">a.</param>
            <param name="d">The d.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Multiply(System.Single,UnityEngine.Vector2d)">
            <summary>
            Implements the *.
            </summary>
            <param name="d">The d.</param>
            <param name="a">a.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Division(UnityEngine.Vector2d,System.Double)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">a.</param>
            <param name="d">The d.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Equality(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Implements the ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Inequality(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Implements the !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Set(System.Double,System.Double)">
            <summary>
            Sets the specified new x.
            </summary>
            <param name="new_x">The new x.</param>
            <param name="new_y">The new y.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.Lerp(UnityEngine.Vector2d,UnityEngine.Vector2d,System.Double)">
            <summary>
            Lerps the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">The t.</param>
            <returns>Vector2d.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.MoveTowards(UnityEngine.Vector2d,UnityEngine.Vector2d,System.Double)">
            <summary>
            Moves the towards.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="maxDistanceDelta">The maximum distance delta.</param>
            <returns>Vector2d.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Scale(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Scales the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>Vector2d.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Scale(UnityEngine.Vector2d)">
            <summary>
            Scales the specified scale.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Vector2d.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Dot(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Dots the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Angle(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Angles the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Distance(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Distances the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.ClampMagnitude(UnityEngine.Vector2d,System.Double)">
            <summary>
            Clamps the magnitude.
            </summary>
            <param name="vector">The vector.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>Vector2d.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.SqrMagnitude(UnityEngine.Vector2d)">
            <summary>
            SQRs the magnitude.
            </summary>
            <param name="a">a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.SqrMagnitude">
            <summary>
            SQRs the magnitude.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Min(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>Vector2d.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Max(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>Vector2d.</returns>
        </member>
        <member name="T:UnityEngine.Vector3d">
            <summary>
            Struct Vector3d
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.kEpsilon">
            <summary>
            The k epsilon
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.y">
            <summary>
            The y
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.z">
            <summary>
            The z
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Invalid index!
            or
            Invalid Vector3d index!
            </exception>
        </member>
        <member name="P:UnityEngine.Vector3d.normalized">
            <summary>
            Gets the normalized.
            </summary>
            <value>The normalized.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.magnitude">
            <summary>
            Gets the magnitude.
            </summary>
            <value>The magnitude.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.sqrMagnitude">
            <summary>
            Gets the SQR magnitude.
            </summary>
            <value>The SQR magnitude.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.zero">
            <summary>
            Gets the zero.
            </summary>
            <value>The zero.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.one">
            <summary>
            Gets the one.
            </summary>
            <value>The one.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.forward">
            <summary>
            Gets the forward.
            </summary>
            <value>The forward.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.back">
            <summary>
            Gets the back.
            </summary>
            <value>The back.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.up">
            <summary>
            Gets up.
            </summary>
            <value>Up.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.down">
            <summary>
            Gets down.
            </summary>
            <value>Down.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:UnityEngine.Vector3d.fwd">
            <summary>
            Gets the forward.
            </summary>
            <value>The forward.</value>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector3d"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector3d"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector3d"/> struct.
            </summary>
            <param name="v3">The v3.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector3d"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Addition(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Subtraction(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_UnaryNegation(UnityEngine.Vector3d)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Multiply(UnityEngine.Vector3d,System.Double)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">a.</param>
            <param name="d">The d.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Multiply(System.Double,UnityEngine.Vector3d)">
            <summary>
            Implements the *.
            </summary>
            <param name="d">The d.</param>
            <param name="a">a.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Division(UnityEngine.Vector3d,System.Double)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">a.</param>
            <param name="d">The d.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Equality(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Implements the ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Inequality(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Implements the !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Explicit(UnityEngine.Vector3d)~UnityEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:UnityEngine.Vector3d"/> to <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="vector3d">The vector3d.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Lerp(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Lerps the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">The t.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Slerp(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Slerps the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">The t.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.OrthoNormalize(UnityEngine.Vector3d@,UnityEngine.Vector3d@)">
            <summary>
            Orthoes the normalize.
            </summary>
            <param name="normal">The normal.</param>
            <param name="tangent">The tangent.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.OrthoNormalize(UnityEngine.Vector3d@,UnityEngine.Vector3d@,UnityEngine.Vector3d@)">
            <summary>
            Orthoes the normalize.
            </summary>
            <param name="normal">The normal.</param>
            <param name="tangent">The tangent.</param>
            <param name="binormal">The binormal.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.MoveTowards(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Moves the towards.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="maxDistanceDelta">The maximum distance delta.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.RotateTowards(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double,System.Double)">
            <summary>
            Rotates the towards.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="maxRadiansDelta">The maximum radians delta.</param>
            <param name="maxMagnitudeDelta">The maximum magnitude delta.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SmoothDamp(UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@,System.Double,System.Double)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SmoothDamp(UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@,System.Double)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SmoothDamp(UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@,System.Double,System.Double,System.Double)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Set(System.Double,System.Double,System.Double)">
            <summary>
            Sets the specified new x.
            </summary>
            <param name="new_x">The new x.</param>
            <param name="new_y">The new y.</param>
            <param name="new_z">The new z.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.Scale(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Scales the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Scale(UnityEngine.Vector3d)">
            <summary>
            Scales the specified scale.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.Cross(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Crosses the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Reflect(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Reflects the specified in direction.
            </summary>
            <param name="inDirection">The in direction.</param>
            <param name="inNormal">The in normal.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Normalize(UnityEngine.Vector3d)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Vector3d.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Dot(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Dots the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Project(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Projects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="onNormal">The on normal.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Exclude(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Excludes the specified exclude this.
            </summary>
            <param name="excludeThis">The exclude this.</param>
            <param name="fromThat">From that.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Angle(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Angles the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Distance(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Distances the specified a.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.ClampMagnitude(UnityEngine.Vector3d,System.Double)">
            <summary>
            Clamps the magnitude.
            </summary>
            <param name="vector">The vector.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Magnitude(UnityEngine.Vector3d)">
            <summary>
            Magnitudes the specified a.
            </summary>
            <param name="a">a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SqrMagnitude(UnityEngine.Vector3d)">
            <summary>
            SQRs the magnitude.
            </summary>
            <param name="a">a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Min(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Max(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>Vector3d.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.AngleBetween(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Angles the between.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:CommandMethods">
            <summary>
            Class CommandMethods.
            </summary>
        </member>
        <member name="F:CommandMethods.me">
            <summary>
            Me
            </summary>
        </member>
        <member name="M:CommandMethods.ProcessCommand(System.String,Lerp2API.Game.Command,Lerp2API.Game.Param[],System.Int32)">
            <summary>
            Processes the command.
            </summary>
            <param name="name">The name.</param>
            <param name="c">The c.</param>
            <param name="set">The set.</param>
            <param name="posUsed">The position used.</param>
        </member>
        <member name="M:CommandMethods.Help(System.Object[])">
            <summary>
            Helps the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:CommandMethods.DebugSw(System.Object[])">
            <summary>
            Debugs the sw.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:CommandMethods.Teleport(System.Object[])">
            <summary>
            Teleports the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:ShadowAndOutline">
            <summary>
            Class ShadowAndOutline.
            </summary>
        </member>
        <member name="M:ShadowAndOutline.DrawOutline(UnityEngine.Rect,System.String,UnityEngine.GUIStyle,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Draws the outline.
            </summary>
            <param name="rect">The rect.</param>
            <param name="text">The text.</param>
            <param name="style">The style.</param>
            <param name="outColor">Color of the out.</param>
            <param name="inColor">Color of the in.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:ShadowAndOutline.DrawShadow(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.Color,UnityEngine.Color,UnityEngine.Vector2)">
            <summary>
            Draws the shadow.
            </summary>
            <param name="rect">The rect.</param>
            <param name="content">The content.</param>
            <param name="style">The style.</param>
            <param name="txtColor">Color of the text.</param>
            <param name="shadowColor">Color of the shadow.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:ShadowAndOutline.DrawLayoutOutline(System.String,UnityEngine.GUIStyle,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>
            Draws the layout outline.
            </summary>
            <param name="text">The text.</param>
            <param name="style">The style.</param>
            <param name="outColor">Color of the out.</param>
            <param name="inColor">Color of the in.</param>
            <param name="size">The size.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:ShadowAndOutline.DrawLayoutShadow(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.Color,UnityEngine.Color,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
            <summary>
            Draws the layout shadow.
            </summary>
            <param name="content">The content.</param>
            <param name="style">The style.</param>
            <param name="txtColor">Color of the text.</param>
            <param name="shadowColor">Color of the shadow.</param>
            <param name="direction">The direction.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:ShadowAndOutline.DrawButtonWithShadow(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle,System.Single,UnityEngine.Vector2)">
            <summary>
            Draws the button with shadow.
            </summary>
            <param name="r">The r.</param>
            <param name="content">The content.</param>
            <param name="style">The style.</param>
            <param name="shadowAlpha">The shadow alpha.</param>
            <param name="direction">The direction.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ShadowAndOutline.DrawLayoutButtonWithShadow(UnityEngine.GUIContent,UnityEngine.GUIStyle,System.Single,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
            <summary>
            Draws the layout button with shadow.
            </summary>
            <param name="content">The content.</param>
            <param name="style">The style.</param>
            <param name="shadowAlpha">The shadow alpha.</param>
            <param name="direction">The direction.</param>
            <param name="options">The options.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ColorHelpers">
            <summary>
            Class ColorHelpers.
            </summary>
        </member>
        <member name="M:ColorHelpers.GetBixels(UnityEngine.Texture2D)">
            <summary>
            Gets the bixels.
            </summary>
            <param name="t">The t.</param>
            <returns>Color[].</returns>
        </member>
        <member name="M:ColorHelpers.GetColor(Lerp2API.Optimizers.Color[0:,0:],System.Int32,System.Int32)">
            <summary>
            Gets the color.
            </summary>
            <param name="c">The c.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <returns>UnityEngine.Color[].</returns>
        </member>
        <member name="M:ColorHelpers.Fill(Lerp2API.Optimizers.Color,System.Int32,System.Int32)">
            <summary>
            Fills the specified w.
            </summary>
            <param name="c">The c.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <returns>Color[].</returns>
        </member>
        <member name="M:ColorHelpers.ToTexture(Lerp2API.Optimizers.Color)">
            <summary>
            To the texture.
            </summary>
            <param name="c">The c.</param>
            <returns>Texture2D.</returns>
        </member>
        <member name="M:ColorHelpers.Clone(Lerp2API.Optimizers.Color[0:,0:],System.Int32,System.Int32,System.Int32,System.Action,System.Action{Lerp2API.Optimizers.Color[0:,0:]})">
            <summary>
            Clones the specified w.
            </summary>
            <param name="c">The c.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <param name="step">The step.</param>
            <param name="upt">The upt.</param>
            <param name="f">The f.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:ColorHelpers.UptPixel(UnityEngine.Texture2D,Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Color)">
            <summary>
            Upts the pixel.
            </summary>
            <param name="t">The t.</param>
            <param name="p">The p.</param>
            <param name="c">The c.</param>
        </member>
        <member name="T:PointHelpers">
            <summary>
            Class PointHelpers.
            </summary>
        </member>
        <member name="M:PointHelpers.GetVecArr(Lerp2API.Optimizers.Point[])">
            <summary>
            Gets the vec arr.
            </summary>
            <param name="ps">The ps.</param>
            <returns>Vector2[].</returns>
        </member>
        <member name="M:PointHelpers.GetPointArr(UnityEngine.Vector2[])">
            <summary>
            Gets the point arr.
            </summary>
            <param name="ps">The ps.</param>
            <returns>Point[].</returns>
        </member>
        <member name="T:MathHelpers">
            <summary>
            Class MathHelpers.
            </summary>
        </member>
        <member name="M:MathHelpers.IsClockwise(System.Collections.Generic.IEnumerable{Lerp2API.Optimizers.Point})">
            <summary>
            Determines whether the specified vertices is clockwise.
            </summary>
            <param name="vertices">The vertices.</param>
            <returns><c>true</c> if the specified vertices is clockwise; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathHelpers.SortCornersClockwise(Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point,Lerp2API.Optimizers.Point)">
            <summary>
            Sorts the corners clockwise.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <param name="center">The center.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MathHelpers.InRange(System.Int32,System.Int32)">
            <summary>
            Ins the range.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The maximum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MathHelpers.NextUInt64(System.Random,System.UInt64)">
            <summary>
            Nexts the u int64.
            </summary>
            <param name="rnd">The random.</param>
            <param name="max">The maximum.</param>
            <returns>System.UInt64.</returns>
        </member>
        <member name="T:DateTimeHelpers">
            <summary>
            Class DateTimeHelpers.
            </summary>
        </member>
        <member name="M:DateTimeHelpers.ToEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to the long representation which is the number of seconds since the unix epoch.
            </summary>
            <param name="dateTime">A DateTime to convert to epoch time.</param>
            <returns>The long number of seconds since the unix epoch.</returns>
        </member>
        <member name="M:DateTimeHelpers.FromEpoch(System.Int64)">
            <summary>
            Converts a long representation of time since the unix epoch to a DateTime.
            </summary>
            <param name="epoch">The number of seconds since Jan 1, 1970.</param>
            <returns>A DateTime representing the time since the epoch.</returns>
        </member>
        <member name="M:DateTimeHelpers.ToEpoch(System.Nullable{System.DateTime})">
            <summary>
            Converts a DateTime? to the long? representation which is the number of seconds since the unix epoch.
            </summary>
            <param name="dateTime">A DateTime? to convert to epoch time.</param>
            <returns>The long? number of seconds since the unix epoch.</returns>
        </member>
        <member name="M:DateTimeHelpers.FromEpoch(System.Nullable{System.Int64})">
            <summary>
            Converts a long? representation of time since the unix epoch to a DateTime?.
            </summary>
            <param name="epoch">The number of seconds since Jan 1, 1970.</param>
            <returns>A DateTime? representing the time since the epoch.</returns>
        </member>
        <member name="T:ReflectionHelpers">
            <summary>
            Class ReflectionHelpers.
            </summary>
        </member>
        <member name="M:ReflectionHelpers.Invoke(System.String,System.String)">
            <summary>
            Invokes the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:ReflectionHelpers.Invoke``1(System.String)">
            <summary>
            Invokes the specified method name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="T:AssertExtensions">
            <summary>
            Class AssertExtensions.
            </summary>
        </member>
        <member name="M:AssertExtensions.AreSame(System.Object,System.Object)">
            <summary>
            Ares the same.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
        </member>
        <member name="T:CastingExtensions">
            <summary>
            Class CastingExtensions.
            </summary>
        </member>
        <member name="M:CastingExtensions.FParse(System.String,System.Single)">
            <summary>
            fs the parse.
            </summary>
            <param name="p">The p.</param>
            <param name="r">The r.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:HtmlAgilityPack.AttributeValueQuote">
            <summary>
            Enum AttributeValueQuote
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.AttributeValueQuote.SingleQuote">
            <summary>
            The single quote
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.AttributeValueQuote.DoubleQuote">
            <summary>
            The double quote
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlElementFlag">
            <summary>
            Enum HtmlElementFlag
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.CanOverlap">
            <summary>
            The can overlap
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.CData">
            <summary>
            The c data
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.Closed">
            <summary>
            The closed
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.Empty">
            <summary>
            The empty
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeType">
            <summary>
            Enum HtmlNodeType
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Document">
            <summary>
            The document
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Element">
            <summary>
            The element
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Comment">
            <summary>
            The comment
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlParseErrorCode">
            <summary>
            Enum HtmlParseErrorCode
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.TagNotClosed">
            <summary>
            The tag not closed
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.TagNotOpened">
            <summary>
            The tag not opened
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.CharsetMismatch">
            <summary>
            The charset mismatch
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.EndTagNotRequired">
            <summary>
            The end tag not required
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.EndTagInvalidHere">
            <summary>
            The end tag invalid here
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragmentType">
            <summary>
            Enum MixedCodeDocumentFragmentType
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocumentFragmentType.Code">
            <summary>
            The code
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocumentFragmentType.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.Crc32">
            <summary>
            Class Crc32.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.Crc32.CRC32Bytes(System.Byte[])">
            <summary>
            Crs the C32 bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:HtmlAgilityPack.Crc32.CRC32String(System.String)">
            <summary>
            Crs the C32 string.
            </summary>
            <param name="text">The text.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttribute">
            <summary>
            Class HtmlAttribute.
            </summary>
            <seealso cref="T:System.IComparable" />
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>HtmlAttribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">obj</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Line">
            <summary>
            Gets the line.
            </summary>
            <value>The line.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.LinePosition">
            <summary>
            Gets the line position.
            </summary>
            <value>The line position.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OriginalName">
            <summary>
            Gets the name of the original.
            </summary>
            <value>The name of the original.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OwnerDocument">
            <summary>
            Gets the owner document.
            </summary>
            <value>The owner document.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OwnerNode">
            <summary>
            Gets the owner node.
            </summary>
            <value>The owner node.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.QuoteType">
            <summary>
            Gets or sets the type of the quote.
            </summary>
            <value>The type of the quote.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.StreamPosition">
            <summary>
            Gets the stream position.
            </summary>
            <value>The stream position.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.XPath">
            <summary>
            Gets the x path.
            </summary>
            <value>The x path.</value>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttributeCollection">
            <summary>
            Class HtmlAttributeCollection.
            </summary>
            <seealso cref="!:System.Collections.Generic.IList&lt;HtmlAgilityPack.HtmlAttribute&gt;" />
            <seealso cref="!:System.Collections.Generic.ICollection&lt;HtmlAgilityPack.HtmlAttribute&gt;" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;HtmlAgilityPack.HtmlAttribute&gt;" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Add(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Appends the specified new attribute.
            </summary>
            <param name="newAttribute">The new attribute.</param>
            <returns>HtmlAttribute.</returns>
            <exception cref="T:System.ArgumentNullException">newAttribute</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(System.String)">
            <summary>
            Appends the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>HtmlAttribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(System.String,System.String)">
            <summary>
            Appends the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>HtmlAttribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.AttributesWithName(System.String)">
            <summary>
            Attributeses the name of the with.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>IEnumerable&lt;HtmlAttribute&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Contains(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.CopyTo(HtmlAgilityPack.HtmlAttribute[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.IndexOf(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Insert(System.Int32,HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Prepend(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Prepends the specified new attribute.
            </summary>
            <param name="newAttribute">The new attribute.</param>
            <returns>HtmlAttribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Removes the specified attribute.
            </summary>
            <param name="attribute">The attribute.</param>
            <exception cref="T:System.ArgumentNullException">attribute</exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.RemoveAll">
            <summary>
            Removes all.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:HtmlAgilityPack.HtmlAttribute"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>HtmlAttribute.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:HtmlAgilityPack.HtmlAttribute"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>HtmlAttribute.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlCommentNode">
            <summary>
            Class HtmlCommentNode.
            </summary>
            <seealso cref="T:HtmlAgilityPack.HtmlNode" />
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.InnerHtml">
            <summary>
            Gets or sets the inner HTML.
            </summary>
            <value>The inner HTML.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.OuterHtml">
            <summary>
            Gets the outer HTML.
            </summary>
            <value>The outer HTML.</value>
        </member>
        <member name="T:HtmlAgilityPack.HtmlDocument">
            <summary>
            Class HtmlDocument.
            </summary>
            <seealso cref="T:System.Xml.XPath.IXPathNavigable" />
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionAddDebuggingAttributes">
            <summary>
            The option add debugging attributes
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionAutoCloseOnEnd">
            <summary>
            The option automatic close on end
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionComputeChecksum">
            <summary>
            The option compute checksum
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionCheckSyntax">
            <summary>
            The option check syntax
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionDefaultStreamEncoding">
            <summary>
            The option default stream encoding
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionExtractErrorSourceText">
            <summary>
            The option extract error source text
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionExtractErrorSourceTextMaxLength">
            <summary>
            The option extract error source text maximum length
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionFixNestedTags">
            <summary>
            The option fix nested tags
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputAsXml">
            <summary>
            The option output as XML
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputOptimizeAttributeValues">
            <summary>
            The option output optimize attribute values
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputOriginalCase">
            <summary>
            The option output original case
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputUpperCase">
            <summary>
            The option output upper case
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionReadEncoding">
            <summary>
            The option read encoding
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionStopperNodeName">
            <summary>
            The option stopper node name
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionUseIdAttribute">
            <summary>
            The option use identifier attribute
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionWriteEmptyNodes">
            <summary>
            The option write empty nodes
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlDocument"/> class.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="name">The name.</param>
            <returns>HtmlAttribute.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String,System.String)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>HtmlAttribute.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateComment">
            <summary>
            Creates the comment.
            </summary>
            <returns>HtmlCommentNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateComment(System.String)">
            <summary>
            Creates the comment.
            </summary>
            <param name="comment">The comment.</param>
            <returns>HtmlCommentNode.</returns>
            <exception cref="T:System.ArgumentNullException">comment</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateElement(System.String)">
            <summary>
            Creates the element.
            </summary>
            <param name="name">The name.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateNavigator">
            <summary>
            Creates the navigator.
            </summary>
            <returns>XPathNavigator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateTextNode">
            <summary>
            Creates the text node.
            </summary>
            <returns>HtmlTextNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateTextNode(System.String)">
            <summary>
            Creates the text node.
            </summary>
            <param name="text">The text.</param>
            <returns>HtmlTextNode.</returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.IO.Stream)">
            <summary>
            Detects the encoding.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Encoding.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.IO.TextReader)">
            <summary>
            Detects the encoding.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Encoding.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.String)">
            <summary>
            Detects the encoding.
            </summary>
            <param name="path">The path.</param>
            <returns>Encoding.</returns>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingAndLoad(System.String)">
            <summary>
            Detects the encoding and load.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingAndLoad(System.String,System.Boolean)">
            <summary>
            Detects the encoding and load.
            </summary>
            <param name="path">The path.</param>
            <param name="detectEncoding">if set to <c>true</c> [detect encoding].</param>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingHtml(System.String)">
            <summary>
            Detects the encoding HTML.
            </summary>
            <param name="html">The HTML.</param>
            <returns>Encoding.</returns>
            <exception cref="T:System.ArgumentNullException">html</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.GetElementbyId(System.String)">
            <summary>
            Gets the elementby identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.GetXmlName(System.String)">
            <summary>
            Gets the name of the XML.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.HtmlEncode(System.String)">
            <summary>
            HTMLs the encode.
            </summary>
            <param name="html">The HTML.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">html</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.IsWhiteSpace(System.Int32)">
            <summary>
            Determines whether [is white space] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns><c>true</c> if [is white space] [the specified c]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            path
            or
            encoding
            </exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <exception cref="T:System.ArgumentNullException">
            path
            or
            encoding
            </exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <param name="buffersize">The buffersize.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <param name="buffersize">The buffersize.</param>
            <exception cref="T:System.ArgumentNullException">
            path
            or
            encoding
            </exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.LoadHtml(System.String)">
            <summary>
            Loads the HTML.
            </summary>
            <param name="html">The HTML.</param>
            <exception cref="T:System.ArgumentNullException">html</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.Stream)">
            <summary>
            Saves the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <exception cref="T:System.ArgumentNullException">writer</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.String)">
            <summary>
            Saves the specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            outStream
            or
            encoding
            </exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            filename
            or
            encoding
            </exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.CheckSum">
            <summary>
            Gets the check sum.
            </summary>
            <value>The check sum.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.DeclaredEncoding">
            <summary>
            Gets the declared encoding.
            </summary>
            <value>The declared encoding.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.DocumentNode">
            <summary>
            Gets the document node.
            </summary>
            <value>The document node.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.ParseErrors">
            <summary>
            Gets the parse errors.
            </summary>
            <value>The parse errors.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.Remainder">
            <summary>
            Gets the remainder.
            </summary>
            <value>The remainder.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.RemainderOffset">
            <summary>
            Gets the remainder offset.
            </summary>
            <value>The remainder offset.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.StreamEncoding">
            <summary>
            Gets the stream encoding.
            </summary>
            <value>The stream encoding.</value>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.WhichTag">
            <summary>
            The which tag
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.Tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.BetweenAttributes">
            <summary>
            The between attributes
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.EmptyTag">
            <summary>
            The empty tag
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.AttributeName">
            <summary>
            The attribute name
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.AttributeBeforeEquals">
            <summary>
            The attribute before equals
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.AttributeAfterEquals">
            <summary>
            The attribute after equals
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.AttributeValue">
            <summary>
            The attribute value
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.Comment">
            <summary>
            The comment
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.QuotedAttributeValue">
            <summary>
            The quoted attribute value
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.ServerSideCode">
            <summary>
            The server side code
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.ParseState.PcData">
            <summary>
            The pc data
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlEntity">
            <summary>
            Class HtmlEntity.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.DeEntitize(System.String)">
            <summary>
            Des the entitize.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(HtmlAgilityPack.HtmlNode)">
            <summary>
            Entitizes the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">node</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String)">
            <summary>
            Entitizes the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean)">
            <summary>
            Entitizes the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="useNames">if set to <c>true</c> [use names].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Entitizes the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="useNames">if set to <c>true</c> [use names].</param>
            <param name="entitizeQuotAmpAndLtGt">if set to <c>true</c> [entitize quot amp and lt gt].</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlEntity.EntityName">
            <summary>
            Gets the name of the entity.
            </summary>
            <value>The name of the entity.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlEntity.EntityValue">
            <summary>
            Gets the entity value.
            </summary>
            <value>The entity value.</value>
        </member>
        <member name="F:HtmlAgilityPack.HtmlEntity.ParseState.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlEntity.ParseState.EntityStart">
            <summary>
            The entity start
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNode">
            <summary>
            Class HtmlNode.
            </summary>
            <seealso cref="T:System.Xml.XPath.IXPathNavigable" />
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.ElementsFlags">
            <summary>
            The elements flags
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameComment">
            <summary>
            The HTML node type name comment
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameDocument">
            <summary>
            The HTML node type name document
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameText">
            <summary>
            The HTML node type name text
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.#ctor(HtmlAgilityPack.HtmlNodeType,HtmlAgilityPack.HtmlDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNode"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="ownerdocument">The ownerdocument.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Ancestors">
            <summary>
            Ancestorses this instance.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Ancestors(System.String)">
            <summary>
            Ancestorses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AncestorsAndSelf">
            <summary>
            Ancestorses the and self.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AncestorsAndSelf(System.String)">
            <summary>
            Ancestorses the and self.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AppendChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Appends the child.
            </summary>
            <param name="newChild">The new child.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">newChild</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AppendChildren(HtmlAgilityPack.HtmlNodeCollection)">
            <summary>
            Appends the children.
            </summary>
            <param name="newChildren">The new children.</param>
            <exception cref="T:System.ArgumentNullException">newChildren</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CanOverlapElement(System.String)">
            <summary>
            Determines whether this instance [can overlap element] the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if this instance [can overlap element] the specified name; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.Boolean)">
            <summary>
            Clones the node.
            </summary>
            <param name="deep">if set to <c>true</c> [deep].</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.String)">
            <summary>
            Clones the node.
            </summary>
            <param name="newName">The new name.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.String,System.Boolean)">
            <summary>
            Clones the node.
            </summary>
            <param name="newName">The new name.</param>
            <param name="deep">if set to <c>true</c> [deep].</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">newName</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CopyFrom(HtmlAgilityPack.HtmlNode)">
            <summary>
            Copies from.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CopyFrom(HtmlAgilityPack.HtmlNode,System.Boolean)">
            <summary>
            Copies from.
            </summary>
            <param name="node">The node.</param>
            <param name="deep">if set to <c>true</c> [deep].</param>
            <exception cref="T:System.ArgumentNullException">node</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateNavigator">
            <summary>
            Creates the navigator.
            </summary>
            <returns>XPathNavigator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateNode(System.String)">
            <summary>
            Creates the node.
            </summary>
            <param name="html">The HTML.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateRootNavigator">
            <summary>
            Creates the root navigator.
            </summary>
            <returns>XPathNavigator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.ChildAttributes(System.String)">
            <summary>
            Childs the attributes.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlAttribute&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantNodes">
            <summary>
            Descendants the nodes.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantNodesAndSelf">
            <summary>
            Descendants the nodes and self.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Descendants">
            <summary>
            Descendantses this instance.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Descendants(System.String)">
            <summary>
            Descendantses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantsAndSelf">
            <summary>
            Descendantses the and self.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantsAndSelf(System.String)">
            <summary>
            Descendantses the and self.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Element(System.String)">
            <summary>
            Elements the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Elements(System.String)">
            <summary>
            Elementses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.Boolean)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="def">if set to <c>true</c> [definition].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="def">The definition.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.String)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="def">The definition.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.InsertAfter(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the after.
            </summary>
            <param name="newChild">The new child.</param>
            <param name="refChild">The reference child.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">newChild</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.InsertBefore(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the before.
            </summary>
            <param name="newChild">The new child.</param>
            <param name="refChild">The reference child.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">newChild</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsCDataElement(System.String)">
            <summary>
            Determines whether [is c data element] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [is c data element] [the specified name]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsClosedElement(System.String)">
            <summary>
            Determines whether [is closed element] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [is closed element] [the specified name]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsEmptyElement(System.String)">
            <summary>
            Determines whether [is empty element] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [is empty element] [the specified name]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsOverlappedClosingElement(System.String)">
            <summary>
            Determines whether [is overlapped closing element] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns><c>true</c> if [is overlapped closing element] [the specified text]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.PrependChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Prepends the child.
            </summary>
            <param name="newChild">The new child.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">newChild</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.PrependChildren(HtmlAgilityPack.HtmlNodeCollection)">
            <summary>
            Prepends the children.
            </summary>
            <param name="newChildren">The new children.</param>
            <exception cref="T:System.ArgumentNullException">newChildren</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveAll">
            <summary>
            Removes all.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveAllChildren">
            <summary>
            Removes all children.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Removes the child.
            </summary>
            <param name="oldChild">The old child.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">oldChild</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveChild(HtmlAgilityPack.HtmlNode,System.Boolean)">
            <summary>
            Removes the child.
            </summary>
            <param name="oldChild">The old child.</param>
            <param name="keepGrandChildren">if set to <c>true</c> [keep grand children].</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">oldChild</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.ReplaceChild(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Replaces the child.
            </summary>
            <param name="newChild">The new child.</param>
            <param name="oldChild">The old child.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SelectNodes(System.String)">
            <summary>
            Selects the nodes.
            </summary>
            <param name="xpath">The xpath.</param>
            <returns>HtmlNodeCollection.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SelectSingleNode(System.String)">
            <summary>
            Selects the single node.
            </summary>
            <param name="xpath">The xpath.</param>
            <returns>HtmlNode.</returns>
            <exception cref="T:System.ArgumentNullException">xpath</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>HtmlAttribute.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteContentTo">
            <summary>
            Writes the content to.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteContentTo(System.IO.TextWriter)">
            <summary>
            Writes the content to.
            </summary>
            <param name="outText">The out text.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo">
            <summary>
            Writes to.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="outText">The out text.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Closed">
            <summary>
            Gets a value indicating whether this <see cref="T:HtmlAgilityPack.HtmlNode"/> is closed.
            </summary>
            <value><c>true</c> if closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ClosingAttributes">
            <summary>
            Gets the closing attributes.
            </summary>
            <value>The closing attributes.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.FirstChild">
            <summary>
            Gets the first child.
            </summary>
            <value>The first child.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasAttributes">
            <summary>
            Gets a value indicating whether this instance has attributes.
            </summary>
            <value><c>true</c> if this instance has attributes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasClosingAttributes">
            <summary>
            Gets a value indicating whether this instance has closing attributes.
            </summary>
            <value><c>true</c> if this instance has closing attributes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasChildNodes">
            <summary>
            Gets a value indicating whether this instance has child nodes.
            </summary>
            <value><c>true</c> if this instance has child nodes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
            <exception cref="T:System.Exception">
            </exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.InnerHtml">
            <summary>
            Gets or sets the inner HTML.
            </summary>
            <value>The inner HTML.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.InnerText">
            <summary>
            Gets the inner text.
            </summary>
            <value>The inner text.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.LastChild">
            <summary>
            Gets the last child.
            </summary>
            <value>The last child.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Line">
            <summary>
            Gets the line.
            </summary>
            <value>The line.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.LinePosition">
            <summary>
            Gets the line position.
            </summary>
            <value>The line position.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.NextSibling">
            <summary>
            Gets the next sibling.
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
            <value>The type of the node.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OriginalName">
            <summary>
            Gets the name of the original.
            </summary>
            <value>The name of the original.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OuterHtml">
            <summary>
            Gets the outer HTML.
            </summary>
            <value>The outer HTML.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OwnerDocument">
            <summary>
            Gets the owner document.
            </summary>
            <value>The owner document.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.PreviousSibling">
            <summary>
            Gets the previous sibling.
            </summary>
            <value>The previous sibling.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.StreamPosition">
            <summary>
            Gets the stream position.
            </summary>
            <value>The stream position.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.XPath">
            <summary>
            Gets the x path.
            </summary>
            <value>The x path.</value>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeCollection">
            <summary>
            Class HtmlNodeCollection.
            </summary>
            <seealso cref="!:System.Collections.Generic.IList&lt;HtmlAgilityPack.HtmlNode&gt;" />
            <seealso cref="!:System.Collections.Generic.ICollection&lt;HtmlAgilityPack.HtmlNode&gt;" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;HtmlAgilityPack.HtmlNode&gt;" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeCollection"/> class.
            </summary>
            <param name="parentnode">The parentnode.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Add(HtmlAgilityPack.HtmlNode)">
            <summary>
            Adds the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Append(HtmlAgilityPack.HtmlNode)">
            <summary>
            Appends the specified node.
            </summary>
            <param name="node">The node.</param>
            <exception cref="T:System.InvalidProgramException">Unexpected error.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Contains(HtmlAgilityPack.HtmlNode)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.CopyTo(HtmlAgilityPack.HtmlNode[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Descendants">
            <summary>
            Descendantses this instance.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Descendants(System.String)">
            <summary>
            Descendantses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Elements">
            <summary>
            Elementses this instance.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Elements(System.String)">
            <summary>
            Elementses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.FindFirst(System.String)">
            <summary>
            Finds the first.
            </summary>
            <param name="name">The name.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.FindFirst(HtmlAgilityPack.HtmlNodeCollection,System.String)">
            <summary>
            Finds the first.
            </summary>
            <param name="items">The items.</param>
            <param name="name">The name.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.GetNodeIndex(HtmlAgilityPack.HtmlNode)">
            <summary>
            Gets the index of the node.
            </summary>
            <param name="node">The node.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.IndexOf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Insert(System.Int32,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="node">The node.</param>
            <exception cref="T:System.InvalidProgramException">
            Unexpected error.
            or
            Unexpected error.
            </exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Nodes">
            <summary>
            Nodeses this instance.
            </summary>
            <returns>IEnumerable&lt;HtmlNode&gt;.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Prepend(HtmlAgilityPack.HtmlNode)">
            <summary>
            Prepends the specified node.
            </summary>
            <param name="node">The node.</param>
            <exception cref="T:System.InvalidProgramException">Unexpected error.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Remove(HtmlAgilityPack.HtmlNode)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Remove(System.Int32)">
            <summary>
            Removes the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.InvalidProgramException">Unexpected error.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Replace(System.Int32,HtmlAgilityPack.HtmlNode)">
            <summary>
            Replaces the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="node">The node.</param>
            <exception cref="T:System.InvalidProgramException">
            Unexpected error.
            or
            Unexpected error.
            </exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:HtmlAgilityPack.HtmlNode"/> with the specified node name.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:HtmlAgilityPack.HtmlNode"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>HtmlNode.</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(HtmlAgilityPack.HtmlNode)">
            <summary>
            Gets the <see cref="T:System.Int32"/> with the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">node;Node \"" + node.CloneNode(false).OuterHtml + "\" was not found in the collection</exception>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeNavigator">
            <summary>
            Class HtmlNodeNavigator.
            </summary>
            <seealso cref="T:System.Xml.XPath.XPathNavigator" />
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <param name="buffersize">The buffersize.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlNodeNavigator"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <param name="buffersize">The buffersize.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>XPathNavigator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="localName">Name of the local.</param>
            <param name="namespaceURI">The namespace URI.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.GetNamespace(System.String)">
            <summary>
            Gets the namespace.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether [is same position] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is same position] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves to.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to attribute.
            </summary>
            <param name="localName">Name of the local.</param>
            <param name="namespaceURI">The namespace URI.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirst">
            <summary>
            Moves to first.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstAttribute">
            <summary>
            Moves to first attribute.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstChild">
            <summary>
            Moves to first child.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves to first namespace.
            </summary>
            <param name="scope">The scope.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToId(System.String)">
            <summary>
            Moves to identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves to namespace.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNext">
            <summary>
            Moves to next.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNextAttribute">
            <summary>
            Moves to next attribute.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves to next namespace.
            </summary>
            <param name="scope">The scope.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToParent">
            <summary>
            Moves to parent.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToPrevious">
            <summary>
            Moves to previous.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToRoot">
            <summary>
            Moves to root.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.BaseURI">
            <summary>
            Gets the base URI.
            </summary>
            <value>The base URI.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.CurrentDocument">
            <summary>
            Gets the current document.
            </summary>
            <value>The current document.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.CurrentNode">
            <summary>
            Gets the current node.
            </summary>
            <value>The current node.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.HasAttributes">
            <summary>
            Gets a value indicating whether this instance has attributes.
            </summary>
            <value><c>true</c> if this instance has attributes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.HasChildren">
            <summary>
            Gets a value indicating whether this instance has children.
            </summary>
            <value><c>true</c> if this instance has children; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether this instance is empty element.
            </summary>
            <value><c>true</c> if this instance is empty element; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.LocalName">
            <summary>
            Gets the name of the local.
            </summary>
            <value>The name of the local.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI.
            </summary>
            <value>The namespace URI.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NameTable">
            <summary>
            Gets the name table.
            </summary>
            <value>The name table.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
            <value>The type of the node.</value>
            <exception cref="T:System.NotImplementedException">Internal error: Unhandled HtmlNodeType: " + _currentnode.NodeType</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
            <exception cref="T:System.NotImplementedException">Internal error: Unhandled HtmlNodeType: " + _currentnode.NodeType</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.XmlLang">
            <summary>
            Gets the XML language.
            </summary>
            <value>The XML language.</value>
        </member>
        <member name="T:HtmlAgilityPack.HtmlParseError">
            <summary>
            Class HtmlParseError.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Code">
            <summary>
            Gets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Line">
            <summary>
            Gets the line.
            </summary>
            <value>The line.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.LinePosition">
            <summary>
            Gets the line position.
            </summary>
            <value>The line position.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.SourceText">
            <summary>
            Gets the source text.
            </summary>
            <value>The source text.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.StreamPosition">
            <summary>
            Gets the stream position.
            </summary>
            <value>The stream position.</value>
        </member>
        <member name="T:HtmlAgilityPack.HtmlTextNode">
            <summary>
            Class HtmlTextNode.
            </summary>
            <seealso cref="T:HtmlAgilityPack.HtmlNode" />
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.InnerHtml">
            <summary>
            Gets or sets the inner HTML.
            </summary>
            <value>The inner HTML.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.OuterHtml">
            <summary>
            Gets the outer HTML.
            </summary>
            <value>The outer HTML.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb">
            <summary>
            Class HtmlWeb.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlWeb.PostResponse">
            <summary>
            The post response
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlWeb.PreHandleDocument">
            <summary>
            The pre handle document
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlWeb.PreRequest">
            <summary>
            The pre request
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="url">The URL.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="htmlUrl">The HTML URL.</param>
            <param name="xsltUrl">The XSLT URL.</param>
            <param name="xsltArgs">The XSLT arguments.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type,System.String)">
            <summary>
            Creates the instance.
            </summary>
            <param name="htmlUrl">The HTML URL.</param>
            <param name="xsltUrl">The XSLT URL.</param>
            <param name="xsltArgs">The XSLT arguments.</param>
            <param name="type">The type.</param>
            <param name="xmlPath">The XML path.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Get(System.String,System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Get(System.String,System.String,System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="path">The path.</param>
            <param name="method">The method.</param>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">Unsupported uri scheme: '" + uri.Scheme + "'.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Get(System.String,System.String,System.Net.WebProxy,System.Net.NetworkCredential)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="path">The path.</param>
            <param name="proxy">The proxy.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Get(System.String,System.String,System.Net.WebProxy,System.Net.NetworkCredential,System.String)">
            <summary>
            Gets the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="path">The path.</param>
            <param name="proxy">The proxy.</param>
            <param name="credentials">The credentials.</param>
            <param name="method">The method.</param>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">Unsupported uri scheme: '" + uri.Scheme + "'.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.GetCachePath(System.Uri)">
            <summary>
            Gets the cache path.
            </summary>
            <param name="uri">The URI.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">Cache is not enabled. Set UsingCache to true first.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.GetContentTypeForExtension(System.String,System.String)">
            <summary>
            Gets the content type for extension.
            </summary>
            <param name="extension">The extension.</param>
            <param name="def">The definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.GetExtensionForContentType(System.String,System.String)">
            <summary>
            Gets the type of the extension for content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="def">The definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Load(System.String)">
            <summary>
            Loads the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>HtmlDocument.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Load(System.String,System.String)">
            <summary>
            Loads the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <returns>HtmlDocument.</returns>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">Unsupported uri scheme: '" + uri.Scheme + "'.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Load(System.String,System.String,System.Net.WebProxy,System.Net.NetworkCredential)">
            <summary>
            Loads the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="proxy">The proxy.</param>
            <param name="credentials">The credentials.</param>
            <returns>HtmlDocument.</returns>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">Unsupported uri scheme: '" + uri.Scheme + "'.</exception>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Load(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Loads the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="userId">The user identifier.</param>
            <param name="password">The password.</param>
            <returns>HtmlDocument.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.Xml.XmlTextWriter)">
            <summary>
            Loads the HTML as XML.
            </summary>
            <param name="htmlUrl">The HTML URL.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter)">
            <summary>
            Loads the HTML as XML.
            </summary>
            <param name="htmlUrl">The HTML URL.</param>
            <param name="xsltUrl">The XSLT URL.</param>
            <param name="xsltArgs">The XSLT arguments.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Loads the HTML as XML.
            </summary>
            <param name="htmlUrl">The HTML URL.</param>
            <param name="xsltUrl">The XSLT URL.</param>
            <param name="xsltArgs">The XSLT arguments.</param>
            <param name="writer">The writer.</param>
            <param name="xmlPath">The XML path.</param>
            <exception cref="T:System.ArgumentNullException">htmlUrl</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.AutoDetectEncoding">
            <summary>
            Gets or sets a value indicating whether [automatic detect encoding].
            </summary>
            <value><c>true</c> if [automatic detect encoding]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.CacheOnly">
            <summary>
            Gets or sets a value indicating whether [cache only].
            </summary>
            <value><c>true</c> if [cache only]; otherwise, <c>false</c>.</value>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">Cache is not enabled. Set UsingCache to true first.</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.CachePath">
            <summary>
            Gets or sets the cache path.
            </summary>
            <value>The cache path.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.FromCache">
            <summary>
            Gets a value indicating whether [from cache].
            </summary>
            <value><c>true</c> if [from cache]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.OverrideEncoding">
            <summary>
            Gets or sets the override encoding.
            </summary>
            <value>The override encoding.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.RequestDuration">
            <summary>
            Gets the duration of the request.
            </summary>
            <value>The duration of the request.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.ResponseUri">
            <summary>
            Gets the response URI.
            </summary>
            <value>The response URI.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.StatusCode">
            <summary>
            Gets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.StreamBufferSize">
            <summary>
            Gets or sets the size of the stream buffer.
            </summary>
            <value>The size of the stream buffer.</value>
            <exception cref="T:System.ArgumentException">Size must be greater than zero.</exception>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.UseCookies">
            <summary>
            Gets or sets a value indicating whether [use cookies].
            </summary>
            <value><c>true</c> if [use cookies]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.UsingCache">
            <summary>
            Gets or sets a value indicating whether [using cache].
            </summary>
            <value><c>true</c> if [using cache]; otherwise, <c>false</c>.</value>
            <exception cref="T:HtmlAgilityPack.HtmlWebException">You need to define a CachePath first.</exception>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb.PostResponseHandler">
            <summary>
            Delegate PostResponseHandler
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb.PreHandleDocumentHandler">
            <summary>
            Delegate PreHandleDocumentHandler
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb.PreRequestHandler">
            <summary>
            Delegate PreRequestHandler
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWebException">
            <summary>
            Class HtmlWebException.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:HtmlAgilityPack.HtmlWebException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.HtmlWebException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:HtmlAgilityPack.IPermissionHelper">
            <summary>
            Interface IPermissionHelper
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.IPermissionHelper.GetIsDnsAvailable">
            <summary>
            Gets the is DNS available.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.IPermissionHelper.GetIsRegistryAvailable">
            <summary>
            Gets the is registry available.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocument">
            <summary>
            Class MixedCodeDocument.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenCodeEnd">
            <summary>
            The token code end
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenCodeStart">
            <summary>
            The token code start
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenDirective">
            <summary>
            The token directive
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenResponseWrite">
            <summary>
            The token response write
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlAgilityPack.MixedCodeDocument"/> class.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.CreateCodeFragment">
            <summary>
            Creates the code fragment.
            </summary>
            <returns>MixedCodeDocumentCodeFragment.</returns>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.CreateTextFragment">
            <summary>
            Creates the text fragment.
            </summary>
            <returns>MixedCodeDocumentTextFragment.</returns>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <param name="buffersize">The buffersize.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="detectEncodingFromByteOrderMarks">if set to <c>true</c> [detect encoding from byte order marks].</param>
            <param name="buffersize">The buffersize.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.LoadHtml(System.String)">
            <summary>
            Loads the HTML.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.Stream)">
            <summary>
            Saves the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.String)">
            <summary>
            Saves the specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.Code">
            <summary>
            Gets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.CodeFragments">
            <summary>
            Gets the code fragments.
            </summary>
            <value>The code fragments.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.Fragments">
            <summary>
            Gets the fragments.
            </summary>
            <value>The fragments.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.StreamEncoding">
            <summary>
            Gets the stream encoding.
            </summary>
            <value>The stream encoding.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.TextFragments">
            <summary>
            Gets the text fragments.
            </summary>
            <value>The text fragments.</value>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.ParseState.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.ParseState.Code">
            <summary>
            The code
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentCodeFragment">
            <summary>
            Class MixedCodeDocumentCodeFragment.
            </summary>
            <seealso cref="T:HtmlAgilityPack.MixedCodeDocumentFragment" />
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentCodeFragment.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragment">
            <summary>
            Class MixedCodeDocumentFragment.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.FragmentText">
            <summary>
            Gets the fragment text.
            </summary>
            <value>The fragment text.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.FragmentType">
            <summary>
            Gets the type of the fragment.
            </summary>
            <value>The type of the fragment.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.Line">
            <summary>
            Gets the line.
            </summary>
            <value>The line.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.LinePosition">
            <summary>
            Gets the line position.
            </summary>
            <value>The line position.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.StreamPosition">
            <summary>
            Gets the stream position.
            </summary>
            <value>The stream position.</value>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragmentList">
            <summary>
            Class MixedCodeDocumentFragmentList.
            </summary>
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.Append(HtmlAgilityPack.MixedCodeDocumentFragment)">
            <summary>
            Appends the specified new fragment.
            </summary>
            <param name="newFragment">The new fragment.</param>
            <exception cref="T:System.ArgumentNullException">newFragment</exception>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>MixedCodeDocumentFragmentEnumerator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.Prepend(HtmlAgilityPack.MixedCodeDocumentFragment)">
            <summary>
            Prepends the specified new fragment.
            </summary>
            <param name="newFragment">The new fragment.</param>
            <exception cref="T:System.ArgumentNullException">newFragment</exception>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.Remove(HtmlAgilityPack.MixedCodeDocumentFragment)">
            <summary>
            Removes the specified fragment.
            </summary>
            <param name="fragment">The fragment.</param>
            <exception cref="T:System.ArgumentNullException">fragment</exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.RemoveAll">
            <summary>
            Removes all.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.Doc">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:HtmlAgilityPack.MixedCodeDocumentFragment"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>MixedCodeDocumentFragment.</returns>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator">
            <summary>
            Class MixedCodeDocumentFragmentEnumerator.
            </summary>
            <seealso cref="T:System.Collections.IEnumerator" />
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.MoveNext">
            <summary>
            Moves the next.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentTextFragment">
            <summary>
            Class MixedCodeDocumentTextFragment.
            </summary>
            <seealso cref="T:HtmlAgilityPack.MixedCodeDocumentFragment" />
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentTextFragment.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:HtmlAgilityPack.PermissionHelper">
            <summary>
            Class PermissionHelper.
            </summary>
            <seealso cref="T:HtmlAgilityPack.IPermissionHelper" />
        </member>
        <member name="M:HtmlAgilityPack.PermissionHelper.GetIsDnsAvailable">
            <summary>
            Gets the is DNS available.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.PermissionHelper.GetIsRegistryAvailable">
            <summary>
            Gets the is registry available.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Lerp2APIEditor.EditorWindows.LerpedAPIChange">
            <summary>
            Enum LerpedAPIChange
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.LerpedAPIChange.Auto">
            <summary>
            The automatic
            </summary>
            <summary>
            The automatic
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.LerpedAPIChange.InEnter">
            <summary>
            The in enter
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.LerpedAPIChange.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.MessengerMode">
            <summary>
            Enum MessengerMode
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.CustomDrawers.MessengerMode.DONT_REQUIRE_LISTENER">
            <summary>
            The dont require listener
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.CustomDrawers.MessengerMode.REQUIRE_LISTENER">
            <summary>
            The require listener
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.CustomDrawers.MessengerInternal.eventTable">
            <summary>
            The event table
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.CustomDrawers.MessengerInternal.DEFAULT_MODE">
            <summary>
            The default mode
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.OnListenerAdding(System.String,System.Delegate)">
            <summary>
            Called when [listener adding].
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="listenerBeingAdded">The listener being added.</param>
            <exception cref="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.ListenerException"></exception>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.OnListenerRemoving(System.String,System.Delegate)">
            <summary>
            Called when [listener removing].
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="listenerBeingRemoved">The listener being removed.</param>
            <exception cref="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.ListenerException">
            </exception>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.OnListenerRemoved(System.String)">
            <summary>
            Called when [listener removed].
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.OnBroadcasting(System.String,Lerp2APIEditor.CustomDrawers.MessengerMode)">
            <summary>
            Called when [broadcasting].
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="mode">The mode.</param>
            <exception cref="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.BroadcastException"></exception>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.CreateBroadcastSignatureException(System.String)">
            <summary>
            Creates the broadcast signature exception.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>BroadcastException.</returns>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.BroadcastException">
            <summary>
            Class BroadcastException.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.BroadcastException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.BroadcastException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.ListenerException">
            <summary>
            Class ListenerException.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.MessengerInternal.ListenerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.CustomDrawers.MessengerInternal.ListenerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.Messenger">
            <summary>
            Class Messenger.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger.AddListener(System.String,Callback)">
            <summary>
            Adds the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger.RemoveListener(System.String,Callback)">
            <summary>
            Removes the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger.Broadcast(System.String)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger.Broadcast(System.String,Lerp2APIEditor.CustomDrawers.MessengerMode)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.Messenger`1">
            <summary>
            Class Messenger.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`1.AddListener(System.String,Callback{`0})">
            <summary>
            Adds the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`1.RemoveListener(System.String,Callback{`0})">
            <summary>
            Removes the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`1.Broadcast(System.String,`0)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="arg1">The arg1.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`1.Broadcast(System.String,`0,Lerp2APIEditor.CustomDrawers.MessengerMode)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="arg1">The arg1.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.Messenger`2">
            <summary>
            Class Messenger.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`2.AddListener(System.String,Callback{`0,`1})">
            <summary>
            Adds the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`2.RemoveListener(System.String,Callback{`0,`1})">
            <summary>
            Removes the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`2.Broadcast(System.String,`0,`1)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`2.Broadcast(System.String,`0,`1,Lerp2APIEditor.CustomDrawers.MessengerMode)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Lerp2APIEditor.CustomDrawers.Messenger`3">
            <summary>
            Class Messenger.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`3.AddListener(System.String,Callback{`0,`1,`2})">
            <summary>
            Adds the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`3.RemoveListener(System.String,Callback{`0,`1,`2})">
            <summary>
            Removes the listener.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`3.Broadcast(System.String,`0,`1,`2)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
        </member>
        <member name="M:Lerp2APIEditor.CustomDrawers.Messenger`3.Broadcast(System.String,`0,`1,`2,Lerp2APIEditor.CustomDrawers.MessengerMode)">
            <summary>
            Broadcasts the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Lerp2APIEditor.Utility.GUI_Extensions.ReferType">
            <summary>
            Enum ReferType
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.GUI_Extensions.ReferType.Editor">
            <summary>
            The editor
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.GUI_Extensions.ReferType.EditorWindow">
            <summary>
            The editor window
            </summary>
        </member>
        <member name="T:Lerp2APIEditor.Utility.UnityLib.Two_D.TileMaps.FrameMode">
            <summary>
            Enum FrameMode
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.UnityLib.Two_D.TileMaps.FrameMode.Framed">
            <summary>
            The framed
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.UnityLib.Two_D.TileMaps.FrameMode.PixelPerfect">
            <summary>
            The pixel perfect
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.UnityLib.Two_D.TileMaps.FrameMode.HalfWay">
            <summary>
            The half way
            </summary>
        </member>
        <member name="T:FullSerializer.fsDataType">
            <summary>
            The actual type that a JsonData instance can store.
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.Array">
            <summary>
            The array
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.Object">
            <summary>
            The object
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.Int64">
            <summary>
            The int64
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.Boolean">
            <summary>
            The boolean
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:FullSerializer.fsDataType.Null">
            <summary>
            The null
            </summary>
        </member>
        <member name="T:FullSerializer.fsMemberSerialization">
            <summary>
            Controls how the reflected converter handles member serialization.
            </summary>
        </member>
        <member name="F:FullSerializer.fsMemberSerialization.OptIn">
            <summary>
            Only members with [SerializeField] or [fsProperty] attributes are serialized.
            </summary>
        </member>
        <member name="F:FullSerializer.fsMemberSerialization.OptOut">
            <summary>
            Only members with [NotSerialized] or [fsIgnore] will not be serialized.
            </summary>
        </member>
        <member name="F:FullSerializer.fsMemberSerialization.Default">
            <summary>
            The default member serialization behavior is applied.
            </summary>
        </member>
        <member name="T:FullSerializer.Internal.fsArrayConverter">
            <summary>
            Class fsArrayConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsArrayConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsArrayConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsArrayConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsArrayConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsArrayConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsArrayConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsDateConverter">
            <summary>
            Supports serialization for DateTime, DateTimeOffset, and TimeSpan.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsDateConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsDateConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
            <exception cref="T:System.InvalidOperationException">FullSerializer Internal Error -- Unexpected serialization type</exception>
        </member>
        <member name="M:FullSerializer.Internal.fsDateConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">FullSerializer Internal Error -- Unexpected deserialization type</exception>
        </member>
        <member name="T:FullSerializer.Internal.fsDictionaryConverter">
            <summary>
            Class fsDictionaryConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsDictionaryConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsDictionaryConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsDictionaryConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Tries the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="instance_">The instance.</param>
            <param name="storageType">Type of the storage.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsDictionaryConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Tries the serialize.
            </summary>
            <param name="instance_">The instance.</param>
            <param name="serialized">The serialized.</param>
            <param name="storageType">Type of the storage.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsEnumConverter">
            <summary>
            Serializes and deserializes enums by their current name.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsEnumConverter.ArrayContains``1(``0[],``0)">
            <summary>
            Returns true if the given value is contained within the specified array.
            </summary>
        </member>
        <member name="T:FullSerializer.Internal.fsForwardConverter">
            <summary>
            Class fsForwardConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsForwardConverter.#ctor(FullSerializer.fsForwardAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.Internal.fsForwardConverter"/> class.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:FullSerializer.Internal.fsForwardConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
            <exception cref="T:System.NotSupportedException">Please use the [fsForward(...)] attribute.</exception>
        </member>
        <member name="M:FullSerializer.Internal.fsForwardConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsForwardConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsForwardConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsGuidConverter">
            <summary>
            Serializes and deserializes guids.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsGuidConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsGuidConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsGuidConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsGuidConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsGuidConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsGuidConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsIEnumerableConverter">
            <summary>
            Provides serialization support for anything which extends from `IEnumerable` and has an `Add` method.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsIEnumerableConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsIEnumerableConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsIEnumerableConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Tries the serialize.
            </summary>
            <param name="instance_">The instance.</param>
            <param name="serialized">The serialized.</param>
            <param name="storageType">Type of the storage.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsIEnumerableConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Tries the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="instance_">The instance.</param>
            <param name="storageType">Type of the storage.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsIEnumerableConverter.GetElementType(System.Type)">
            <summary>
            Fetches the element type for objects inside of the collection.
            </summary>
        </member>
        <member name="T:FullSerializer.Internal.fsKeyValuePairConverter">
            <summary>
            Class fsKeyValuePairConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsKeyValuePairConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsKeyValuePairConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsKeyValuePairConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsKeyValuePairConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsKeyValuePairConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsNullableConverter">
            <summary>
            The reflected converter will properly serialize nullable types. However, we do it here
            instead as we can emit less serialization data.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsNullableConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsNullableConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsNullableConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsNullableConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsPrimitiveConverter">
            <summary>
            Class fsPrimitiveConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsPrimitiveConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPrimitiveConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPrimitiveConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPrimitiveConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPrimitiveConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Tries the deserialize.
            </summary>
            <param name="storage">The storage.</param>
            <param name="instance">The instance.</param>
            <param name="storageType">Type of the storage.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsReflectedConverter">
            <summary>
            Class fsReflectedConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsReflectedConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsReflectedConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsReflectedConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsReflectedConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsTypeConverter">
            <summary>
            Class fsTypeConverter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.fsTypeConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeConverter.RequestCycleSupport(System.Type)">
            <summary>
            Requests the cycle support.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            Requests the inheritance support.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsWeakReferenceConverter">
            <summary>
            Serializes and deserializes WeakReferences.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsWeakReferenceConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsWeakReferenceConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsWeakReferenceConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsWeakReferenceConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsWeakReferenceConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsWeakReferenceConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.AnimationCurve_DirectConverter">
            <summary>
            Class AnimationCurve_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.AnimationCurve&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.AnimationCurve_DirectConverter.DoSerialize(UnityEngine.AnimationCurve,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.AnimationCurve_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.AnimationCurve@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.AnimationCurve_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.Bounds_DirectConverter">
            <summary>
            Class Bounds_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.Bounds&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Bounds_DirectConverter.DoSerialize(UnityEngine.Bounds,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Bounds_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.Bounds@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Bounds_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.GameObject_DirectConverter">
            <summary>
            Class GameObject_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.GameObject&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GameObject_DirectConverter.DoSerialize(UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GameObject_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.GameObject@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GameObject_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.Gradient_DirectConverter">
            <summary>
            Class Gradient_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.Gradient&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Gradient_DirectConverter.DoSerialize(UnityEngine.Gradient,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Gradient_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.Gradient@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Gradient_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.GUIStyleState_DirectConverter">
            <summary>
            Class GUIStyleState_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.GUIStyleState&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GUIStyleState_DirectConverter.DoSerialize(UnityEngine.GUIStyleState,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GUIStyleState_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.GUIStyleState@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GUIStyleState_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.GUIStyle_DirectConverter">
            <summary>
            Class GUIStyle_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.GUIStyle&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GUIStyle_DirectConverter.DoSerialize(UnityEngine.GUIStyle,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GUIStyle_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.GUIStyle@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.GUIStyle_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.Keyframe_DirectConverter">
            <summary>
            Class Keyframe_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.Keyframe&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Keyframe_DirectConverter.DoSerialize(UnityEngine.Keyframe,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Keyframe_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.Keyframe@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Keyframe_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.LayerMask_DirectConverter">
            <summary>
            Class LayerMask_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.LayerMask&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.LayerMask_DirectConverter.DoSerialize(UnityEngine.LayerMask,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.LayerMask_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.LayerMask@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.LayerMask_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.RectOffset_DirectConverter">
            <summary>
            Class RectOffset_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.RectOffset&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.RectOffset_DirectConverter.DoSerialize(UnityEngine.RectOffset,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.RectOffset_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.RectOffset@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.RectOffset_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.Rect_DirectConverter">
            <summary>
            Class Rect_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.Rect&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Rect_DirectConverter.DoSerialize(UnityEngine.Rect,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Rect_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.Rect@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Rect_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.DirectConverters.Texture2D_DirectConverter">
            <summary>
            Class Texture2D_DirectConverter.
            </summary>
            <seealso cref="!:FullSerializer.fsDirectConverter&lt;UnityEngine.Texture2D&gt;" />
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Texture2D_DirectConverter.DoSerialize(UnityEngine.Texture2D,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Texture2D_DirectConverter.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},UnityEngine.Texture2D@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.DirectConverters.Texture2D_DirectConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="T:FullSerializer.Internal.Converters.UnityEvent_Converter">
            <summary>
            Class UnityEvent_Converter.
            </summary>
            <seealso cref="T:FullSerializer.fsConverter" />
        </member>
        <member name="M:FullSerializer.Internal.Converters.UnityEvent_Converter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.Converters.UnityEvent_Converter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.Converters.UnityEvent_Converter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.Converters.UnityEvent_Converter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsSerializationCallbackProcessor">
            <summary>
            Class fsSerializationCallbackProcessor.
            </summary>
            <seealso cref="T:FullSerializer.fsObjectProcessor" />
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackProcessor.CanProcess(System.Type)">
            <summary>
            Is the processor interested in objects of the given type?
            </summary>
            <param name="type">The given type.</param>
            <returns>True if the processor should be applied, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackProcessor.OnBeforeSerialize(System.Type,System.Object)">
            <summary>
            Called before serialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackProcessor.OnAfterSerialize(System.Type,System.Object,FullSerializer.fsData@)">
            <summary>
            Called after serialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
            <param name="data">The data that was serialized.</param>
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackProcessor.OnBeforeDeserializeAfterInstanceCreation(System.Type,System.Object,FullSerializer.fsData@)">
            <summary>
            Called before deserialization has begun but *after* the object instance has been created. This will get
            invoked even if the user passed in an existing instance.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The created object instance. No deserialization has been applied to it.</param>
            <param name="data">The data that will be used for deserialization.</param>
            <exception cref="T:System.InvalidCastException">Please ensure the converter for " + storageType + " actually returns an instance of it, not an instance of " + instance.GetType()</exception>
            <remarks>**IMPORTANT**: The actual instance that gets passed here is *not* guaranteed to be an a subtype of storageType, since
            the value for instance is whatever the active converter returned for CreateInstance() - ie, some converters will return
            dummy types in CreateInstance() if instance creation cannot be separated from deserialization (ie, KeyValuePair).</remarks>
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackProcessor.OnAfterDeserialize(System.Type,System.Object)">
            <summary>
            Called after deserialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="T:FullSerializer.Internal.fsSerializationCallbackReceiverProcessor">
            <summary>
            Class fsSerializationCallbackReceiverProcessor.
            </summary>
            <seealso cref="T:FullSerializer.fsObjectProcessor" />
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackReceiverProcessor.CanProcess(System.Type)">
            <summary>
            Is the processor interested in objects of the given type?
            </summary>
            <param name="type">The given type.</param>
            <returns>True if the processor should be applied, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackReceiverProcessor.OnBeforeSerialize(System.Type,System.Object)">
            <summary>
            Called before serialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="M:FullSerializer.Internal.fsSerializationCallbackReceiverProcessor.OnAfterDeserialize(System.Type,System.Object)">
            <summary>
            Called after deserialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="T:FullSerializer.Internal.fsCyclicReferenceManager">
            <summary>
            Class fsCyclicReferenceManager.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsCyclicReferenceManager.ObjectReferenceEqualityComparator.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.Enter">
            <summary>
            Enters this instance.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.Exit">
            <summary>
            Exits this instance.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Internal Error - Mismatched Enter/Exit</exception>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.GetReferenceObject(System.Int32)">
            <summary>
            Gets the reference object.
            </summary>
            <param name="id">The identifier.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">Internal Deserialization Error - Object " +
                                "definition has not been encountered for object with id=" + id +
                                "; have you reordered or modified the serialized data? If this is an issue " +
                                "with an unmodified Full Serializer implementation and unmodified serialization " +
                                "data, please report an issue with an included test case.</exception>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.AddReferenceWithId(System.Int32,System.Object)">
            <summary>
            Adds the reference with identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.GetReferenceId(System.Object)">
            <summary>
            Gets the reference identifier.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.IsReference(System.Object)">
            <summary>
            Determines whether the specified item is reference.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified item is reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsCyclicReferenceManager.MarkSerialized(System.Object)">
            <summary>
            Marks the serialized.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Internal Error - " + item +
                                " has already been marked as serialized</exception>
        </member>
        <member name="T:FullSerializer.Internal.fsOption`1">
            <summary>
            Simple option type. This is akin to nullable types.
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsOption`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FullSerializer.Internal.fsOption`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FullSerializer.Internal.fsOption`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
            <exception cref="T:System.InvalidOperationException">fsOption is empty</exception>
        </member>
        <member name="M:FullSerializer.Internal.fsOption`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.Internal.fsOption`1"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:FullSerializer.Internal.fsOption`1.Empty">
            <summary>
            The empty
            </summary>
        </member>
        <member name="T:FullSerializer.Internal.fsOption">
            <summary>
            Class fsOption.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsOption.Just``1(``0)">
            <summary>
            Justs the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>fsOption&lt;T&gt;.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsPortableReflection">
            <summary>
            This wraps reflection types so that it is portable across different Unity runtimes.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsPortableReflection.EmptyTypes">
            <summary>
            The empty types
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Fetches the given attribute from the given MemberInfo. This method applies caching
            and is allocation free (after caching has been performed).
            </summary>
            <param name="element">The MemberInfo the get the attribute from.</param>
            <param name="attributeType">The type of attribute to fetch.</param>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Fetches the given attribute from the given MemberInfo.
            </summary>
            <typeparam name="TAttribute">The type of attribute to fetch.</typeparam>
            <param name="element">The MemberInfo to get the attribute from.</param>
            <param name="shouldCache">Should this computation be cached? If this is the only time it will ever be done, don't bother caching.</param>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="element">The element.</param>
            <returns>TAttribute.</returns>
        </member>
        <member name="F:FullSerializer.Internal.fsPortableReflection.AttributeQuery.MemberInfo">
            <summary>
            The member information
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsPortableReflection.AttributeQuery.AttributeType">
            <summary>
            The attribute type
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.AttributeQueryComparator.Equals(FullSerializer.Internal.fsPortableReflection.AttributeQuery,FullSerializer.Internal.fsPortableReflection.AttributeQuery)">
            <summary>
            Equalses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.AttributeQueryComparator.GetHashCode(FullSerializer.Internal.fsPortableReflection.AttributeQuery)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredProperty(System.Type,System.String)">
            <summary>
            Gets the declared property.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredMethod(System.Type,System.String)">
            <summary>
            Gets the declared method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredConstructor(System.Type,System.Type[])">
            <summary>
            Gets the declared constructor.
            </summary>
            <param name="type">The type.</param>
            <param name="parameters">The parameters.</param>
            <returns>ConstructorInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredConstructors(System.Type)">
            <summary>
            Gets the declared constructors.
            </summary>
            <param name="type">The type.</param>
            <returns>ConstructorInfo[].</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetFlattenedMember(System.Type,System.String)">
            <summary>
            Gets the flattened member.
            </summary>
            <param name="type">The type.</param>
            <param name="memberName">Name of the member.</param>
            <returns>MemberInfo[].</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetFlattenedMethod(System.Type,System.String)">
            <summary>
            Gets the flattened method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetFlattenedMethods(System.Type,System.String)">
            <summary>
            Gets the flattened methods.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <returns>IEnumerable&lt;MethodInfo&gt;.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetFlattenedProperty(System.Type,System.String)">
            <summary>
            Gets the flattened property.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredMember(System.Type,System.String)">
            <summary>
            Gets the declared member.
            </summary>
            <param name="type">The type.</param>
            <param name="memberName">Name of the member.</param>
            <returns>MemberInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredMethods(System.Type)">
            <summary>
            Gets the declared methods.
            </summary>
            <param name="type">The type.</param>
            <returns>MethodInfo[].</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredProperties(System.Type)">
            <summary>
            Gets the declared properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredFields(System.Type)">
            <summary>
            Gets the declared fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.GetDeclaredMembers(System.Type)">
            <summary>
            Gets the declared members.
            </summary>
            <param name="type">The type.</param>
            <returns>MemberInfo[].</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.AsMemberInfo(System.Type)">
            <summary>
            Ases the member information.
            </summary>
            <param name="type">The type.</param>
            <returns>MemberInfo.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.IsType(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member is type.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if the specified member is type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsPortableReflection.AsType(System.Reflection.MemberInfo)">
            <summary>
            Ases the type.
            </summary>
            <param name="member">The member.</param>
            <returns>Type.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsVersionedType">
            <summary>
            Struct fsVersionedType
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsVersionedType.Ancestors">
            <summary>
            The direct ancestors that this type can import.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsVersionedType.VersionString">
            <summary>
            The identifying string that is unique among all ancestors.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsVersionedType.ModelType">
            <summary>
            The modeling type that this versioned type maps back to.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionedType.Migrate(System.Object)">
            <summary>
            Migrate from an instance of an ancestor.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionedType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionedType.op_Equality(FullSerializer.Internal.fsVersionedType,FullSerializer.Internal.fsVersionedType)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionedType.op_Inequality(FullSerializer.Internal.fsVersionedType,FullSerializer.Internal.fsVersionedType)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionedType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionedType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsVersionManager">
            <summary>
            Class fsVersionManager.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionManager.GetVersionImportPath(System.String,FullSerializer.Internal.fsVersionedType,System.Collections.Generic.List{FullSerializer.Internal.fsVersionedType}@)">
            <summary>
            Gets the version import path.
            </summary>
            <param name="currentVersion">The current version.</param>
            <param name="targetVersion">The target version.</param>
            <param name="path">The path.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionManager.GetVersionedType(System.Type)">
            <summary>
            Gets the type of the versioned.
            </summary>
            <param name="type">The type.</param>
            <returns>fsOption&lt;fsVersionedType&gt;.</returns>
            <exception cref="T:System.Exception">
            fsObject attribute on " + type + " contains a PreviousModels specifier - it must also include a VersionString modifier
            or
            Unable to create versioned type for ancestor " + ancestorType + "; please add an [fsObject(VersionString=\"...\")] attribute
            </exception>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionManager.VerifyConstructors(FullSerializer.Internal.fsVersionedType)">
            <summary>
            Verifies that the given type has constructors to migrate from all ancestor types.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsVersionManager.VerifyUniqueVersionStrings(FullSerializer.Internal.fsVersionedType)">
            <summary>
            Verifies that the given version graph contains only unique versions.
            </summary>
        </member>
        <member name="T:FullSerializer.Internal.fsMetaProperty">
            <summary>
            A property or field on a MetaType. This unifies the FieldInfo and PropertyInfo classes.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsMetaProperty._memberInfo">
            <summary>
            Internal handle to the reflected member.
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.StorageType">
            <summary>
            The type of value that is stored inside of the property. For example, for an int field,
            StorageType will be typeof(int).
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.OverrideConverterType">
            <summary>
            A custom fsBaseConverter instance to use for this field/property, if requested. This will be
            null if the default converter selection algorithm should be used. This is specified using the
            [fsObject] annotation with the Converter field.
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.CanRead">
            <summary>
            Can this property be read?
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.CanWrite">
            <summary>
            Can this property be written to?
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.JsonName">
            <summary>
            The serialized name of the property, as it should appear in JSON.
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.MemberName">
            <summary>
            The name of the actual member.
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.IsPublic">
            <summary>
            Is this member public?
            </summary>
        </member>
        <member name="P:FullSerializer.Internal.fsMetaProperty.IsReadOnly">
            <summary>
            Is this type readonly? We can modify readonly properties using reflection, but not
            using generated C#.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsMetaProperty.Write(System.Object,System.Object)">
            <summary>
            Writes a value to the property that this MetaProperty represents, using given object
            instance as the context.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsMetaProperty.Read(System.Object)">
            <summary>
            Reads a value from the property that this MetaProperty represents, using the given
            object instance as the context.
            </summary>
        </member>
        <member name="T:FullSerializer.Internal.fsReflectionUtility">
            <summary>
            Class fsReflectionUtility.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsReflectionUtility.GetInterface(System.Type,System.Type)">
            <summary>
            Searches for a particular implementation of the given interface type inside of the type.
            This is particularly useful if the interface type is an open type, ie, typeof(IFace{}),
            because this method will then return IFace{} but with appropriate type parameters
            inserted.
            </summary>
            <param name="type">The base type to search for interface</param>
            <param name="interfaceType">The interface type to search for. Can be an open generic
            type.</param>
            <returns>The actual interface type that the type contains, or null if there is no
            implementation of the given interfaceType on type.</returns>
        </member>
        <member name="T:FullSerializer.Internal.fsTypeCache">
            <summary>
            Caches type name to type lookups. Type lookups occur in all loaded assemblies.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsTypeCache._cachedTypes">
            <summary>
            Cache from fully qualified type name to type instances.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsTypeCache._assembliesByName">
            <summary>
            Assemblies indexed by their name.
            </summary>
        </member>
        <member name="F:FullSerializer.Internal.fsTypeCache._assembliesByIndex">
            <summary>
            A list of assemblies, by index.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeCache.TryDirectTypeLookup(System.String,System.String,System.Type@)">
            <summary>
            Does a direct lookup for the given type, ie, goes directly to the assembly identified by
            assembly name and finds it there.
            </summary>
            <param name="assemblyName">The assembly to find the type in.</param>
            <param name="typeName">The name of the type.</param>
            <param name="type">The found type.</param>
            <returns>True if the type was found, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeCache.TryIndirectTypeLookup(System.String,System.Type@)">
            <summary>
            Tries to do an indirect type lookup by scanning through every loaded assembly until the
            type is found in one of them.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="type">The found type.</param>
            <returns>True if the type was found, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeCache.Reset">
            <summary>
            Removes any cached type lookup results.
            </summary>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeCache.GetType(System.String)">
            <summary>
            Find a type with the given name. An exception is thrown if no type with the given name
            can be found. This method searches all currently loaded assemblies for the given type. If the type cannot
            be found, then null will be returned.
            </summary>
            <param name="name">The fully qualified name of the type.</param>
        </member>
        <member name="M:FullSerializer.Internal.fsTypeCache.GetType(System.String,System.String)">
            <summary>
            Find a type with the given name. An exception is thrown if no type with the given name
            can be found. This method searches all currently loaded assemblies for the given type. If the type cannot
            be found, then null will be returned.
            </summary>
            <param name="name">The fully qualified name of the type.</param>
            <param name="assemblyHint">A hint for the assembly to start the search with. Use null if unknown.</param>
        </member>
        <member name="T:FullSerializer.fsForwardAttribute">
             <summary>
             This allows you to forward serialization of an object to one of its members. For example,
            
             [fsForward("Values")]
             struct Wrapper {
               public int[] Values;
             }
            
             Then `Wrapper` will be serialized into a JSON array of integers. It will be as if `Wrapper`
             doesn't exist.
             </summary>
        </member>
        <member name="F:FullSerializer.fsForwardAttribute.MemberName">
            <summary>
            The name of the member we should serialize as.
            </summary>
        </member>
        <member name="M:FullSerializer.fsForwardAttribute.#ctor(System.String)">
            <summary>
            Forward object serialization to an instance member. See class comment.
            </summary>
            <param name="memberName">The name of the member that we should serialize this object as.</param>
        </member>
        <member name="T:FullSerializer.fsConverterRegistrar">
            <summary>
            This class allows arbitrary code to easily register global converters. To add a converter,
            simply declare a new field called "Register_*" that stores the type of converter you would
            like to add. Alternatively, you can do the same with a method called "Register_*"; just add
            the converter type to the `Converters` list.
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_AnimationCurve_DirectConverter">
            <summary>
            The register animation curve direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_Bounds_DirectConverter">
            <summary>
            The register bounds direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_GameObject_DirectConverter">
            <summary>
            The register game object direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_Gradient_DirectConverter">
            <summary>
            The register gradient direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_GUIStyleState_DirectConverter">
            <summary>
            The register GUI style state direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_GUIStyle_DirectConverter">
            <summary>
            The register GUI style direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_Keyframe_DirectConverter">
            <summary>
            The register keyframe direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_LayerMask_DirectConverter">
            <summary>
            The register layer mask direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_RectOffset_DirectConverter">
            <summary>
            The register rect offset direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_Rect_DirectConverter">
            <summary>
            The register rect direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_Texture2D_DirectConverter">
            <summary>
            The register texture2 d direct converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Register_UnityEvent_Converter">
            <summary>
            The register unity event converter
            </summary>
        </member>
        <member name="F:FullSerializer.fsConverterRegistrar.Converters">
            <summary>
            The converters
            </summary>
        </member>
        <member name="T:FullSerializer.fsAotCompilationManager">
            <summary>
            The AOT compilation manager
            </summary>
        </member>
        <member name="P:FullSerializer.fsAotCompilationManager.AvailableAotCompilations">
            <summary>
            Ahead of time compilations that are available. The type maps to the object type the generated converter
            will serialize/deserialize, and the string is the text content for a converter that will do the serialization.
            <para />
            The generated serializer is completely independent and you don't need to do anything. Simply add the file to
            your project and it'll get used instead of the reflection based one.
            </summary>
        </member>
        <member name="M:FullSerializer.fsAotCompilationManager.TryToPerformAotCompilation(FullSerializer.fsConfig,System.Type,System.String@)">
            <summary>
            This is a helper method that makes it simple to run an AOT compilation on the given type.
            </summary>
            <param name="config">The configuration to use when running AOT compilation.</param>
            <param name="type">The type to perform the AOT compilation on.</param>
            <param name="aotCompiledClassInCSharp">The AOT class. Add this C# code to your project.</param>
            <returns>True if AOT compilation was successful.</returns>
        </member>
        <member name="M:FullSerializer.fsAotCompilationManager.AddAotCompilation(System.Type,FullSerializer.Internal.fsMetaProperty[],System.Boolean)">
            <summary>
            Adds a new AOT compilation unit.
            </summary>
            <param name="type">The type of object we are AOT compiling.</param>
            <param name="members">The members on the object which will be serialized/deserialized.</param>
        </member>
        <member name="M:FullSerializer.fsAotCompilationManager.GenerateDirectConverterForTypeInCSharp(System.Type,FullSerializer.Internal.fsMetaProperty[],System.Boolean)">
            <summary>
            AOT compiles the object (in C#).
            </summary>
        </member>
        <member name="T:FullSerializer.fsBaseConverter">
            <summary>
            The serialization converter allows for customization of the serialization process.
            </summary>
            <remarks>You do not want to derive from this class - there is no way to actually use it within
            the serializer.. Instead, derive from either fsConverter or fsDirectConverter</remarks>
        </member>
        <member name="F:FullSerializer.fsBaseConverter.Serializer">
            <summary>
            The serializer that was owns this converter.
            </summary>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.CreateInstance(FullSerializer.fsData,System.Type)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize. This should **not**
            deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>An object instance</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.RequestCycleSupport(System.Type)">
            <summary>
            If true, then the serializer will support cyclic references with the given converted
            type.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.RequestInheritanceSupport(System.Type)">
            <summary>
            If true, then the serializer will include inheritance data for the given converter.
            </summary>
            <param name="storageType">The field/property type that is currently storing the object
            that is being serialized.</param>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.FailExpectedType(FullSerializer.fsData,FullSerializer.fsDataType[])">
            <summary>
            Fails the expected type.
            </summary>
            <param name="data">The data.</param>
            <param name="types">The types.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.CheckType(FullSerializer.fsData,FullSerializer.fsDataType)">
            <summary>
            Checks the type.
            </summary>
            <param name="data">The data.</param>
            <param name="type">The type.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.CheckKey(FullSerializer.fsData,System.String,FullSerializer.fsData@)">
            <summary>
            Checks the key.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <param name="subitem">The subitem.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.CheckKey(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},System.String,FullSerializer.fsData@)">
            <summary>
            Checks the key.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <param name="subitem">The subitem.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.SerializeMember``1(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},System.Type,System.String,``0)">
            <summary>
            Serializes the member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="overrideConverterType">Type of the override converter.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.fsBaseConverter.DeserializeMember``1(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},System.Type,System.String,``0@)">
            <summary>
            Deserializes the member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="overrideConverterType">Type of the override converter.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="T:FullSerializer.fsGlobalConfig">
            <summary>
            Class fsGlobalConfig.
            </summary>
        </member>
        <member name="F:FullSerializer.fsGlobalConfig.IsCaseSensitive">
            <summary>
            Should deserialization be case sensitive? If this is false and the JSON has multiple members with the
            same keys only separated by case, then this results in undefined behavior.
            </summary>
        </member>
        <member name="F:FullSerializer.fsGlobalConfig.AllowInternalExceptions">
            <summary>
            If exceptions are allowed internally, then additional date formats can be deserialized.
            Note that the Full Serializer public API will *not* throw exceptions with this enabled;
            errors will still be returned in a fsResult instance.
            </summary>
        </member>
        <member name="F:FullSerializer.fsGlobalConfig.InternalFieldPrefix">
            <summary>
            This string will be used to prefix fields used internally by FullSerializer.
            </summary>
        </member>
        <member name="T:FullSerializer.fsConfig">
            <summary>
            Enables some top-level customization of Full Serializer.
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.SerializeAttributes">
            <summary>
            The attributes that will force a field or property to be serialized.
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.IgnoreSerializeAttributes">
            <summary>
            The attributes that will force a field or property to *not* be serialized.
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.DefaultMemberSerialization">
            <summary>
            The default member serialization.
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.GetJsonNameFromMemberName">
             <summary>
             Convert a C# field/property name into the key used for the JSON object. For example, you could
             force all JSON names to lowercase with:
            
                fsConfig.GetJsonNameFromMemberName = (name, info) => name.ToLower();
            
             This will only be used when the name is not explicitly specified with fsProperty.
             </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.EnablePropertySerialization">
             <summary>
             If false, then *all* property serialization support will be disabled - even properties
             explicitly annotated with fsProperty or any other opt-in annotation.
            
             Setting this to false means that SerializeNonAutoProperties and
             SerializeNonPublicSetProperties will be completely ignored.
             </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.SerializeNonAutoProperties">
            <summary>
            Should the default serialization behaviour include non-auto properties?
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.SerializeNonPublicSetProperties">
            <summary>
            Should the default serialization behaviour include properties with non-public setters?
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.CustomDateTimeFormatString">
            <summary>
            If not null, this string format will be used for DateTime instead of the default one.
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.Serialize64BitIntegerAsString">
            <summary>
            Int64 and UInt64 will be serialized and deserialized as string for compatibility
            </summary>
        </member>
        <member name="F:FullSerializer.fsConfig.SerializeEnumsAsInteger">
            <summary>
            Enums are serialized using their names by default. Setting this to true will serialize them as integers instead.
            </summary>
        </member>
        <member name="T:FullSerializer.fsContext">
            <summary>
            fsContext stores global metadata that can be used to customize how fsConverters operate
            during serialization.
            </summary>
        </member>
        <member name="F:FullSerializer.fsContext._contextObjects">
            <summary>
            All of the context objects.
            </summary>
        </member>
        <member name="M:FullSerializer.fsContext.Reset">
            <summary>
            Removes all context objects from the context.
            </summary>
        </member>
        <member name="M:FullSerializer.fsContext.Set``1(``0)">
            <summary>
            Sets the context object for the given type with the given value.
            </summary>
        </member>
        <member name="M:FullSerializer.fsContext.Has``1">
            <summary>
            Returns true if there is a context object for the given type.
            </summary>
        </member>
        <member name="M:FullSerializer.fsContext.Get``1">
            <summary>
            Fetches the context object for the given type.
            </summary>
        </member>
        <member name="T:FullSerializer.fsConverter">
            <summary>
            The serialization converter allows for customization of the serialization process.
            </summary>
        </member>
        <member name="M:FullSerializer.fsConverter.CanProcess(System.Type)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>True if the converter can serialize it, false otherwise.</returns>
        </member>
        <member name="T:FullSerializer.fsData">
            <summary>
            A union type that stores a serialized value. The stored type can be one of six different
            types: null, boolean, double, Int64, string, Dictionary, or List.
            </summary>
        </member>
        <member name="F:FullSerializer.fsData._value">
            <summary>
            The raw value that this serialized data stores. It can be one of six different types; a
            boolean, a double, Int64, a string, a Dictionary, or a List.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor">
            <summary>
            Creates a fsData instance that holds null.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor(System.Boolean)">
            <summary>
            Creates a fsData instance that holds a boolean.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor(System.Double)">
            <summary>
            Creates a fsData instance that holds a double.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor(System.Int64)">
            <summary>
            Creates a new fsData instance that holds an integer.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor(System.String)">
            <summary>
            Creates a fsData instance that holds a string.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Creates a fsData instance that holds a dictionary of values.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.#ctor(System.Collections.Generic.List{FullSerializer.fsData})">
            <summary>
            Creates a fsData instance that holds a list of values.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.CreateDictionary">
            <summary>
            Helper method to create a fsData instance that holds a dictionary.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.CreateList">
            <summary>
            Helper method to create a fsData instance that holds a list.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.CreateList(System.Int32)">
            <summary>
            Helper method to create a fsData instance that holds a list with the initial capacity.
            </summary>
        </member>
        <member name="F:FullSerializer.fsData.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:FullSerializer.fsData.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="F:FullSerializer.fsData.Null">
            <summary>
            The null
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.BecomeDictionary">
            <summary>
            Transforms the internal fsData instance into a dictionary.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.Clone">
            <summary>
            Returns a shallow clone of this data instance.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
            <exception cref="T:System.InvalidOperationException">unknown JSON data type</exception>
        </member>
        <member name="P:FullSerializer.fsData.IsNull">
            <summary>
            Returns true if this fsData instance maps back to null.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.IsDouble">
            <summary>
            Returns true if this fsData instance maps back to a double.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.IsInt64">
            <summary>
            Returns true if this fsData instance maps back to an Int64.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.IsBool">
            <summary>
            Returns true if this fsData instance maps back to a boolean.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.IsString">
            <summary>
            Returns true if this fsData instance maps back to a string.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.IsDictionary">
            <summary>
            Returns true if this fsData instance maps back to a Dictionary.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.IsList">
            <summary>
            Returns true if this fsData instance maps back to a List.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.AsDouble">
            <summary>
            Casts this fsData to a double. Throws an exception if it is not a double.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.AsInt64">
            <summary>
            Casts this fsData to an Int64. Throws an exception if it is not an Int64.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.AsBool">
            <summary>
            Casts this fsData to a boolean. Throws an exception if it is not a boolean.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.AsString">
            <summary>
            Casts this fsData to a string. Throws an exception if it is not a string.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.AsDictionary">
            <summary>
            Casts this fsData to a Dictionary. Throws an exception if it is not a
            Dictionary.
            </summary>
        </member>
        <member name="P:FullSerializer.fsData.AsList">
            <summary>
            Casts this fsData to a List. Throws an exception if it is not a List.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.Cast``1">
            <summary>
            Internal helper method to cast the underlying storage to the given type or throw a
            pretty printed exception on failure.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FullSerializer.fsData.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.Equals(FullSerializer.fsData)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.op_Equality(FullSerializer.fsData,FullSerializer.fsData)">
            <summary>
            Returns true iff a == b.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.op_Inequality(FullSerializer.fsData,FullSerializer.fsData)">
            <summary>
            Returns true iff a != b.
            </summary>
        </member>
        <member name="M:FullSerializer.fsData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.</returns>
        </member>
        <member name="T:FullSerializer.fsDirectConverter">
            <summary>
            The direct converter is similar to a regular converter, except that it targets specifically only one type.
            This means that it can be used without performance impact when discovering converters. It is strongly
            recommended that you derive from fsDirectConverter{TModel}.
            </summary>
            <remarks>Due to the way that direct converters operate, inheritance is *not* supported. Direct converters
            will only be used with the exact ModelType object.</remarks>
        </member>
        <member name="P:FullSerializer.fsDirectConverter.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="T:FullSerializer.fsDirectConverter`1">
            <summary>
            Class fsDirectConverter.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <seealso cref="T:FullSerializer.fsDirectConverter" />
        </member>
        <member name="P:FullSerializer.fsDirectConverter`1.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="M:FullSerializer.fsDirectConverter`1.TrySerialize(System.Object,FullSerializer.fsData@,System.Type)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">The object instance to serialize. This will never be null.</param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">The field/property type that is storing this instance.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.fsDirectConverter`1.TryDeserialize(FullSerializer.fsData,System.Object@,System.Type)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">The object instance to deserialize into.</param>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <returns>True if serialization was successful, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.fsDirectConverter`1.DoSerialize(`0,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Does the serialize.
            </summary>
            <param name="model">The model.</param>
            <param name="serialized">The serialized.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="M:FullSerializer.fsDirectConverter`1.DoDeserialize(System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData},`0@)">
            <summary>
            Does the deserialize.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
            <returns>fsResult.</returns>
        </member>
        <member name="T:FullSerializer.fsMissingVersionConstructorException">
            <summary>
            Class fsMissingVersionConstructorException. This class cannot be inherited.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:FullSerializer.fsMissingVersionConstructorException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsMissingVersionConstructorException"/> class.
            </summary>
            <param name="versionedType">Type of the versioned.</param>
            <param name="constructorType">Type of the constructor.</param>
        </member>
        <member name="T:FullSerializer.fsDuplicateVersionNameException">
            <summary>
            Class fsDuplicateVersionNameException. This class cannot be inherited.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:FullSerializer.fsDuplicateVersionNameException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsDuplicateVersionNameException"/> class.
            </summary>
            <param name="typeA">The type a.</param>
            <param name="typeB">The type b.</param>
            <param name="version">The version.</param>
        </member>
        <member name="T:FullSerializer.fsIgnoreAttribute">
            <summary>
            The given property or field annotated with [JsonIgnore] will not be serialized.
            </summary>
        </member>
        <member name="T:FullSerializer.fsISerializationCallbacks">
            <summary>
            Extend this interface on your type to receive notifications about serialization/deserialization events. If you don't
            have access to the type itself, then you can write an fsObjectProcessor instead.
            </summary>
        </member>
        <member name="M:FullSerializer.fsISerializationCallbacks.OnBeforeSerialize(System.Type)">
            <summary>
            Called before serialization.
            </summary>
        </member>
        <member name="M:FullSerializer.fsISerializationCallbacks.OnAfterSerialize(System.Type,FullSerializer.fsData@)">
            <summary>
            Called after serialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="data">The data that was serialized.</param>
        </member>
        <member name="M:FullSerializer.fsISerializationCallbacks.OnBeforeDeserialize(System.Type,FullSerializer.fsData@)">
            <summary>
            Called before deserialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="data">The data that will be used for deserialization.</param>
        </member>
        <member name="M:FullSerializer.fsISerializationCallbacks.OnAfterDeserialize(System.Type)">
            <summary>
            Called after deserialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="T:FullSerializer.fsJsonParser">
            <summary>
            A simple recursive descent parser for JSON.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonParser.SkipSpace">
            <summary>
            Skips input such that Character() will return a non-whitespace character
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonParser.TryParseNumber(FullSerializer.fsData@)">
            <summary>
            Parses numbers that follow the regular expression [-+](\d+|\d*\.\d*)
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonParser.TryParseString(System.String@)">
            <summary>
            Parses a string
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonParser.TryParseArray(FullSerializer.fsData@)">
            <summary>
            Parses an array
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonParser.Parse(System.String,FullSerializer.fsData@)">
            <summary>
            Parses the specified input. Returns a failure state if parsing failed.
            </summary>
            <param name="input">The input to parse.</param>
            <param name="data">The parsed data. This is undefined if parsing fails.</param>
            <returns>The parsed input.</returns>
        </member>
        <member name="M:FullSerializer.fsJsonParser.Parse(System.String)">
            <summary>
            Helper method for Parse that does not allow the error information
            to be recovered.
            </summary>
        </member>
        <member name="T:FullSerializer.fsJsonPrinter">
            <summary>
            Class fsJsonPrinter.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.InsertSpacing(System.IO.TextWriter,System.Int32)">
            <summary>
            Inserts the given number of indents into the builder.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.EscapeString(System.String)">
            <summary>
            Escapes a string.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.BuildPrettyString(FullSerializer.fsData,System.IO.TextWriter,System.Int32)">
            <summary>
            Formats this data into the given builder.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.PrettyJson(FullSerializer.fsData,System.IO.TextWriter)">
            <summary>
            Writes the pretty JSON output data to the given stream.
            </summary>
            <param name="data">The data to print.</param>
            <param name="outputStream">Where to write the printed data.</param>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.PrettyJson(FullSerializer.fsData)">
            <summary>
            Returns the data in a pretty printed JSON format.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.CompressedJson(FullSerializer.fsData,System.IO.StreamWriter)">
            <summary>
            Writes the compressed JSON output data to the given stream.
            </summary>
            <param name="data">The data to print.</param>
            <param name="outputStream">Where to write the printed data.</param>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.CompressedJson(FullSerializer.fsData)">
            <summary>
            Returns the data in a relatively compressed JSON format.
            </summary>
        </member>
        <member name="M:FullSerializer.fsJsonPrinter.ConvertDoubleToString(System.Double)">
            <summary>
            Utility method that converts a double to a string.
            </summary>
        </member>
        <member name="T:FullSerializer.fsObjectAttribute">
            <summary>
            This attribute controls some serialization behavior for a type. See the comments
            on each of the fields for more information.
            </summary>
        </member>
        <member name="F:FullSerializer.fsObjectAttribute.PreviousModels">
            <summary>
            The previous model that should be used if an old version of this
            object is encountered. Using this attribute also requires that the
            type have a public constructor that takes only one parameter, an object
            instance of the given type. Use of this parameter *requires* that
            the VersionString parameter is also set.
            </summary>
        </member>
        <member name="F:FullSerializer.fsObjectAttribute.VersionString">
            <summary>
            The version string to use for this model. This should be unique among all
            prior versions of this model that is supported for importation. If PreviousModel
            is set, then this attribute must also be set. A good valid example for this
            is "v1", "v2", "v3", ...
            </summary>
        </member>
        <member name="F:FullSerializer.fsObjectAttribute.MemberSerialization">
            <summary>
            This controls the behavior for member serialization.
            The default behavior is fsMemberSerialization.Default.
            </summary>
        </member>
        <member name="F:FullSerializer.fsObjectAttribute.Converter">
            <summary>
            Specify a custom converter to use for serialization. The converter type needs
            to derive from fsBaseConverter. This defaults to null.
            </summary>
        </member>
        <member name="F:FullSerializer.fsObjectAttribute.Processor">
            <summary>
            Specify a custom processor to use during serialization. The processor type needs
            to derive from fsObjectProcessor and the call to CanProcess is not invoked. This
            defaults to null.
            </summary>
        </member>
        <member name="M:FullSerializer.fsObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:FullSerializer.fsObjectAttribute.#ctor(System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsObjectAttribute"/> class.
            </summary>
            <param name="versionString">The version string.</param>
            <param name="previousModels">The previous models.</param>
        </member>
        <member name="T:FullSerializer.fsObjectProcessor">
            <summary>
            <para>
            Enables injecting code before/after an object has been serialized. This is most
            useful if you want to run the default serialization process but apply a pre/post
            processing step.
            </para>
            <para>
            Multiple object processors can be active at the same time. When running they are
            called in a "nested" fashion - if we have processor1 and process2 added to the
            serializer in that order (p1 then p2), then the execution order will be
            p1#Before p2#Before /serialization/ p2#After p1#After.
            </para>
            </summary>
        </member>
        <member name="M:FullSerializer.fsObjectProcessor.CanProcess(System.Type)">
            <summary>
            Is the processor interested in objects of the given type?
            </summary>
            <param name="type">The given type.</param>
            <returns>True if the processor should be applied, false otherwise.</returns>
        </member>
        <member name="M:FullSerializer.fsObjectProcessor.OnBeforeSerialize(System.Type,System.Object)">
            <summary>
            Called before serialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="M:FullSerializer.fsObjectProcessor.OnAfterSerialize(System.Type,System.Object,FullSerializer.fsData@)">
            <summary>
            Called after serialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
            <param name="data">The data that was serialized.</param>
        </member>
        <member name="M:FullSerializer.fsObjectProcessor.OnBeforeDeserialize(System.Type,FullSerializer.fsData@)">
            <summary>
            Called before deserialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="data">The data that will be used for deserialization.</param>
        </member>
        <member name="M:FullSerializer.fsObjectProcessor.OnBeforeDeserializeAfterInstanceCreation(System.Type,System.Object,FullSerializer.fsData@)">
            <summary>
            Called before deserialization has begun but *after* the object instance has been created. This will get
            invoked even if the user passed in an existing instance.
            </summary>
            <remarks>
            **IMPORTANT**: The actual instance that gets passed here is *not* guaranteed to be an a subtype of storageType, since
            the value for instance is whatever the active converter returned for CreateInstance() - ie, some converters will return
            dummy types in CreateInstance() if instance creation cannot be separated from deserialization (ie, KeyValuePair).
            </remarks>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The created object instance. No deserialization has been applied to it.</param>
            <param name="data">The data that will be used for deserialization.</param>
        </member>
        <member name="M:FullSerializer.fsObjectProcessor.OnAfterDeserialize(System.Type,System.Object)">
            <summary>
            Called after deserialization.
            </summary>
            <param name="storageType">The field/property type that is storing the instance.</param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="T:FullSerializer.fsPropertyAttribute">
            <summary>
            Explicitly mark a property to be serialized. This can also be used to give the name that the
            property should use during serialization.
            </summary>
        </member>
        <member name="F:FullSerializer.fsPropertyAttribute.Name">
            <summary>
            The name of that the property will use in JSON serialization.
            </summary>
        </member>
        <member name="F:FullSerializer.fsPropertyAttribute.Converter">
            <summary>
            Use a custom converter for the given type. Specify the converter to use using typeof.
            </summary>
        </member>
        <member name="M:FullSerializer.fsPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:FullSerializer.fsPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsPropertyAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:FullSerializer.fsResult">
            <summary>
            The result of some sort of operation. A result is either successful or not, but if it
            is successful then there may be a set of warnings/messages associated with it. These
            warnings describe the performed error recovery operations.
            </summary>
        </member>
        <member name="F:FullSerializer.fsResult._success">
            <summary>
            Is this result successful?
            </summary>
            <remarks>This is intentionally a `success` state so that when the object
            is default constructed it defaults to a failure state.</remarks>
        </member>
        <member name="F:FullSerializer.fsResult._messages">
            <summary>
            The warning or error messages associated with the result. This may be null if
            there are no messages.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.AddMessage(System.String)">
            <summary>
            Adds a new message to this result.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FullSerializer.fsResult.AddMessages(FullSerializer.fsResult)">
            <summary>
            Adds only the messages from the other result into this result, ignoring
            the success/failure status of the other result.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.Merge(FullSerializer.fsResult)">
            <summary>
            Merges the other result into this one. If the other result failed, then
            this one too will have failed.
            </summary>
            <remarks>
            Note that you can use += instead of this method so that you don't bury
            the actual method call that is generating the other fsResult.
            </remarks>
        </member>
        <member name="F:FullSerializer.fsResult.Success">
            <summary>
            A successful result.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.Warn(System.String)">
            <summary>
            Create a result that is successful but contains the given warning message.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.Fail(System.String)">
            <summary>
            Create a result that failed.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.op_Addition(FullSerializer.fsResult,FullSerializer.fsResult)">
            <summary>
            Only use this as +=!
            </summary>
        </member>
        <member name="P:FullSerializer.fsResult.Failed">
            <summary>
            Did this result fail? If so, you can see the reasons why in `RawMessages`.
            </summary>
        </member>
        <member name="P:FullSerializer.fsResult.Succeeded">
            <summary>
            Was the result a success? Note that even successful operations may have
            warning messages (`RawMessages`) associated with them.
            </summary>
        </member>
        <member name="P:FullSerializer.fsResult.HasWarnings">
            <summary>
            Does this result have any warnings? This says nothing about if it failed
            or succeeded, just if it has warning messages associated with it.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.AssertSuccess">
            <summary>
            A simply utility method that will assert that this result is successful. If it
            is not, then an exception is thrown.
            </summary>
        </member>
        <member name="M:FullSerializer.fsResult.AssertSuccessWithoutWarnings">
            <summary>
            A simple utility method that will assert that this result is successful and that
            there are no warning messages. This throws an exception if either of those
            asserts are false.
            </summary>
        </member>
        <member name="P:FullSerializer.fsResult.AsException">
            <summary>
            Utility method to convert the result to an exception. This method is only defined
            is `Failed` returns true.
            </summary>
        </member>
        <member name="P:FullSerializer.fsResult.RawMessages">
            <summary>
            Gets the raw messages.
            </summary>
            <value>The raw messages.</value>
        </member>
        <member name="P:FullSerializer.fsResult.FormattedMessages">
            <summary>
            Gets the formatted messages.
            </summary>
            <value>The formatted messages.</value>
        </member>
        <member name="T:FullSerializer.fsSerializer">
            <summary>
            Class fsSerializer.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.IsReservedKeyword(System.String)">
            <summary>
            Returns true if the given key is a special keyword that full serializer uses to
            add additional metadata on top of the emitted JSON.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Key_ObjectReference">
            <summary>
            This is an object reference in part of a cyclic graph.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Key_ObjectDefinition">
            <summary>
            This is an object definition, as part of a cyclic graph.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Key_InstanceType">
            <summary>
            This specifies the actual type of an object (the instance type was different from
            the field type).
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Key_Version">
            <summary>
            The version string for the serialized data.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Key_Content">
            <summary>
            If we have to add metadata but the original serialized state was not a dictionary,
            then this will contain the original data.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.StripDeserializationMetadata(FullSerializer.fsData@)">
            <summary>
            Strips all deserialization metadata from the object, like $type and $content fields.
            </summary>
            <remarks>After making this call, you will *not* be able to deserialize the same object instance. The metadata is
            strictly necessary for deserialization!</remarks>
        </member>
        <member name="M:FullSerializer.fsSerializer.ConvertLegacyData(FullSerializer.fsData@)">
            <summary>
            This function converts legacy serialization data into the new format, so that
            the import process can be unified and ignore the old format.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.EnsureDictionary(FullSerializer.fsData)">
            <summary>
            Ensures that the data is a dictionary. If it is not, then it is wrapped inside of one.
            </summary>
        </member>
        <member name="T:FullSerializer.fsSerializer.fsLazyCycleDefinitionWriter">
            <summary>
            This manages instance writing so that we do not write unnecessary $id fields. We
            only need to write out an $id field when there is a corresponding $ref field. This is able
            to write $id references lazily because the fsData instance is not actually written out to text
            until we have entirely finished serializing it.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.fsLazyCycleDefinitionWriter.WriteDefinition(System.Int32,FullSerializer.fsData)">
            <summary>
            Writes the definition.
            </summary>
            <param name="id">The identifier.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:FullSerializer.fsSerializer.fsLazyCycleDefinitionWriter.WriteReference(System.Int32,System.Collections.Generic.Dictionary{System.String,FullSerializer.fsData})">
            <summary>
            Writes the reference.
            </summary>
            <param name="id">The identifier.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:FullSerializer.fsSerializer.fsLazyCycleDefinitionWriter.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "F:FullSerializer.fsSerializer._cachedConverterTypeInstances" -->
        <member name="F:FullSerializer.fsSerializer._cachedConverters">
            <summary>
            A cache from type to it's converter.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer._cachedProcessors">
            <summary>
            A cache from type to the set of processors that are interested in it.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer._availableConverters">
            <summary>
            Converters that can be used for type registration.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer._availableDirectConverters">
            <summary>
            Direct converters (optimized _converters). We use these so we don't have to
            perform a scan through every item in _converters and can instead just do an O(1)
            lookup. This is potentially important to perf when there are a ton of direct
            converters.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer._processors">
            <summary>
            Processors that are available.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer._references">
            <summary>
            Reference manager for cycle detection.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FullSerializer.fsSerializer"/> class.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Context">
            <summary>
            A context object that fsConverters can use to customize how they operate.
            </summary>
        </member>
        <member name="F:FullSerializer.fsSerializer.Config">
            <summary>
            Configuration options. Also see fsGlobalConfig.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.AddProcessor(FullSerializer.fsObjectProcessor)">
            <summary>
            Add a new processor to the serializer. Multiple processors can run at the same time in the
            same order they were added in.
            </summary>
            <param name="processor">The processor to add.</param>
        </member>
        <member name="M:FullSerializer.fsSerializer.RemoveProcessor``1">
            <summary>
            Remove all processors which derive from TProcessor.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.GetProcessors(System.Type)">
            <summary>
            Fetches all of the processors for the given type.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.AddConverter(FullSerializer.fsBaseConverter)">
            <summary>
            Adds a new converter that can be used to customize how an object is serialized and
            deserialized.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.GetConverter(System.Type,System.Type)">
            <summary>
            Fetches a converter that can serialize/deserialize the given type.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.TrySerialize``1(``0,FullSerializer.fsData@)">
            <summary>
            Helper method that simply forwards the call to TrySerialize(typeof(T), instance, out data);
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.TryDeserialize``1(FullSerializer.fsData,``0@)">
            <summary>
            Generic wrapper around TryDeserialize that simply forwards the call.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.TrySerialize(System.Type,System.Object,FullSerializer.fsData@)">
            <summary>
            Serialize the given value.
            </summary>
            <param name="storageType">The type of field/property that stores the object instance. This is
            important particularly for inheritance, as a field storing an IInterface instance
            should have type information included.</param>
            <param name="instance">The actual object instance to serialize.</param>
            <param name="data">The serialized state of the object.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.fsSerializer.TrySerialize(System.Type,System.Type,System.Object,FullSerializer.fsData@)">
            <summary>
            Serialize the given value.
            </summary>
            <param name="storageType">The type of field/property that stores the object instance. This is
            important particularly for inheritance, as a field storing an IInterface instance
            should have type information included.</param>
            <param name="overrideConverterType">An fsBaseConverter derived type that will be used to serialize
            the object instead of the converter found via the normal discovery mechanisms.</param>
            <param name="instance">The actual object instance to serialize.</param>
            <param name="data">The serialized state of the object.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:FullSerializer.fsSerializer.TryDeserialize(FullSerializer.fsData,System.Type,System.Object@)">
            <summary>
            Attempts to deserialize a value from a serialized state.
            </summary>
        </member>
        <member name="M:FullSerializer.fsSerializer.TryDeserialize(FullSerializer.fsData,System.Type,System.Type,System.Object@)">
            <summary>
            Attempts to deserialize a value from a serialized state.
            </summary>
        </member>
        <member name="T:FullSerializer.fsTypeExtensions">
            <summary>
            Class fsTypeExtensions.
            </summary>
        </member>
        <member name="M:FullSerializer.fsTypeExtensions.CSharpName(System.Type)">
            <summary>
            Returns a pretty name for the type in the style of one that you'd see in C# without the namespace.
            </summary>
        </member>
        <member name="M:FullSerializer.fsTypeExtensions.CSharpName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            cs the name of the sharp.
            </summary>
            <param name="type">The type.</param>
            <param name="includeNamespace">if set to <c>true</c> [include namespace].</param>
            <param name="ensureSafeDeclarationName">if set to <c>true</c> [ensure safe declaration name].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FullSerializer.fsTypeExtensions.CSharpName(System.Type,System.Boolean)">
            <summary>
            Returns a pretty name for the type in the style of one that you'd see in C#.
            </summary>
            <parparam name="includeNamespace">Should the name include namespaces?</parparam>
        </member>
        <member name="T:FullSerializer.fsMetaType">
            <summary>
            MetaType contains metadata about a type. This is used by the reflection serializer.
            </summary>
        </member>
        <member name="M:FullSerializer.fsMetaType.Get(FullSerializer.fsConfig,System.Type)">
            <summary>
            Gets the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
            <param name="type">The type.</param>
            <returns>fsMetaType.</returns>
        </member>
        <member name="M:FullSerializer.fsMetaType.ClearCache">
            <summary>
            Clears out the cached type results. Useful if some prior assumptions become invalid, ie, the default member
            serialization mode.
            </summary>
        </member>
        <member name="F:FullSerializer.fsMetaType.ReflectedType">
            <summary>
            The reflected type
            </summary>
        </member>
        <member name="M:FullSerializer.fsMetaType.CanSerializeProperty(FullSerializer.fsConfig,System.Reflection.PropertyInfo,System.Reflection.MemberInfo[],System.Boolean)">
            <summary>
            Returns if the given property should be serialized.
            </summary>
            <param name="annotationFreeValue">Should a property without any annotations be serialized?</param>
        </member>
        <member name="M:FullSerializer.fsMetaType.EmitAotData">
            <summary>
            Attempt to emit an AOT compiled direct converter for this type.
            </summary>
            <returns>True if AOT data was emitted, false otherwise.</returns>
        </member>
        <member name="P:FullSerializer.fsMetaType.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:FullSerializer.fsMetaType.HasDefaultConstructor">
            <summary>
            Returns true if the type represented by this metadata contains a default constructor.
            </summary>
        </member>
        <member name="M:FullSerializer.fsMetaType.CreateInstance">
            <summary>
            Creates a new instance of the type that this metadata points back to. If this type has a
            default constructor, then Activator.CreateInstance will be used to construct the type
            (or Array.CreateInstance if it an array). Otherwise, an uninitialized object created via
            FormatterServices.GetSafeUninitializedObject is used to construct the instance.
            </summary>
        </member>
        <member name="T:RadicalLibrary.EasingType">
            <summary>
            Enum EasingType
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Step">
            <summary>
            The step
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Linear">
            <summary>
            The linear
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Sine">
            <summary>
            The sine
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Quadratic">
            <summary>
            The quadratic
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Cubic">
            <summary>
            The cubic
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Quartic">
            <summary>
            The quartic
            </summary>
        </member>
        <member name="F:RadicalLibrary.EasingType.Quintic">
            <summary>
            The quintic
            </summary>
        </member>
        <member name="T:RadicalLibrary.SmoothingMode">
            <summary>
            Enum SmoothingMode
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothingMode.slerp">
            <summary>
            The slerp
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothingMode.damp">
            <summary>
            The damp
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothingMode.lerp">
            <summary>
            The lerp
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothingMode.smooth">
            <summary>
            The smooth
            </summary>
        </member>
        <member name="T:RadicalLibrary.QuadBez">
            <summary>
            Class QuadBez.
            </summary>
        </member>
        <member name="M:RadicalLibrary.QuadBez.Interp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Interps the specified st.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="ctrl">The control.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.QuadBez.Velocity(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Velocities the specified st.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="ctrl">The control.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.QuadBez.GizmoDraw(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="ctrl">The control.</param>
            <param name="t">The t.</param>
        </member>
        <member name="T:RadicalLibrary.CubicBez">
            <summary>
            Class CubicBez.
            </summary>
        </member>
        <member name="M:RadicalLibrary.CubicBez.Interp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Interps the specified st.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="ctrl1">The CTRL1.</param>
            <param name="ctrl2">The CTRL2.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.CubicBez.Velocity(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Velocities the specified st.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="ctrl1">The CTRL1.</param>
            <param name="ctrl2">The CTRL2.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.CubicBez.GizmoDraw(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="ctrl1">The CTRL1.</param>
            <param name="ctrl2">The CTRL2.</param>
            <param name="t">The t.</param>
        </member>
        <member name="T:RadicalLibrary.CRSpline">
            <summary>
            Class CRSpline.
            </summary>
        </member>
        <member name="M:RadicalLibrary.CRSpline.Interp(UnityEngine.Vector3[],System.Single)">
            <summary>
            Interps the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.CRSpline.InterpConstantSpeedOld(UnityEngine.Vector3[],System.Single)">
            <summary>
            Interps the constant speed old.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.CRSpline.InterpConstantSpeed(UnityEngine.Vector3[],System.Single)">
            <summary>
            Interps the constant speed.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.CRSpline.Velocity(UnityEngine.Vector3[],System.Single)">
            <summary>
            Velocities the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.CRSpline.GizmoDraw(UnityEngine.Vector3[],System.Single)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
        </member>
        <member name="T:RadicalLibrary.Interesting">
            <summary>
            Class Interesting.
            </summary>
        </member>
        <member name="T:RadicalLibrary.Spline">
            <summary>
            Class Spline.
            </summary>
        </member>
        <member name="M:RadicalLibrary.Spline.Interp(RadicalLibrary.Spline.Path,System.Single)">
            <summary>
            Interps the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Interp(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Interps the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Interp(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Interps the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Interp(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Interps the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.InterpConstantSpeed(RadicalLibrary.Spline.Path,System.Single)">
            <summary>
            Interps the constant speed.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.InterpConstantSpeed(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Interps the constant speed.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.InterpConstantSpeed(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Interps the constant speed.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.InterpConstantSpeed(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Interps the constant speed.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,System.Single)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,System.Single,System.Single)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,System.Single,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <param name="ease">The ease.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,System.Single,System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,System.Single,System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,UnityEngine.Quaternion@)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="rotation">The rotation.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,UnityEngine.Quaternion@,System.Single)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="rotation">The rotation.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,UnityEngine.Quaternion@,System.Single,System.Single)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="rotation">The rotation.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,UnityEngine.Quaternion@,System.Single,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="rotation">The rotation.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <param name="ease">The ease.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,UnityEngine.Quaternion@,System.Single,System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="rotation">The rotation.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.MoveOnPath(RadicalLibrary.Spline.Path,UnityEngine.Vector3,System.Single@,UnityEngine.Quaternion@,System.Single,System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Moves the on path.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="currentPosition">The current position.</param>
            <param name="pathPosition">The path position.</param>
            <param name="rotation">The rotation.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="smoothnessFactor">The smoothness factor.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.RotationBetween(RadicalLibrary.Spline.Path,System.Single,System.Single)">
            <summary>
            Rotations the between.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.RotationBetween(RadicalLibrary.Spline.Path,System.Single,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Rotations the between.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="ease">The ease.</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.RotationBetween(RadicalLibrary.Spline.Path,System.Single,System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Rotations the between.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.RotationBetween(RadicalLibrary.Spline.Path,System.Single,System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Rotations the between.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Velocity(RadicalLibrary.Spline.Path,System.Single)">
            <summary>
            Velocities the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Velocity(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Velocities the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Velocity(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Velocities the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Velocity(RadicalLibrary.Spline.Path,System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Velocities the specified PTS.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Wrap(UnityEngine.Vector3[])">
            <summary>
            Wraps the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Vector3[].</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.GizmoDraw(UnityEngine.Vector3[],System.Single)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
        </member>
        <member name="M:RadicalLibrary.Spline.GizmoDraw(UnityEngine.Vector3[],System.Single,RadicalLibrary.EasingType)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
        </member>
        <member name="M:RadicalLibrary.Spline.GizmoDraw(UnityEngine.Vector3[],System.Single,RadicalLibrary.EasingType,System.Boolean)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
        </member>
        <member name="M:RadicalLibrary.Spline.GizmoDraw(UnityEngine.Vector3[],System.Single,RadicalLibrary.EasingType,System.Boolean,System.Boolean)">
            <summary>
            Gizmoes the draw.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="t">The t.</param>
            <param name="ease">The ease.</param>
            <param name="easeIn">if set to <c>true</c> [ease in].</param>
            <param name="easeOut">if set to <c>true</c> [ease out].</param>
        </member>
        <member name="T:RadicalLibrary.Spline.Path">
            <summary>
            Class Path.
            </summary>
        </member>
        <member name="P:RadicalLibrary.Spline.Path.path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:RadicalLibrary.Spline.Path.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:RadicalLibrary.Spline.Path.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.Vector3"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Path.op_Implicit(UnityEngine.Vector3[])~RadicalLibrary.Spline.Path">
            <summary>
            Performs an implicit conversion from <see cref="!:Vector3[]"/> to <see cref="T:RadicalLibrary.Spline.Path"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Path.op_Implicit(RadicalLibrary.Spline.Path)~UnityEngine.Vector3[]">
            <summary>
            Performs an implicit conversion from <see cref="T:RadicalLibrary.Spline.Path"/> to <see cref="!:Vector3[]"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Path.op_Implicit(UnityEngine.Transform[])~RadicalLibrary.Spline.Path">
            <summary>
            Performs an implicit conversion from <see cref="!:Transform[]"/> to <see cref="T:RadicalLibrary.Spline.Path"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RadicalLibrary.Spline.Path.op_Implicit(UnityEngine.GameObject[])~RadicalLibrary.Spline.Path">
            <summary>
            Performs an implicit conversion from <see cref="!:GameObject[]"/> to <see cref="T:RadicalLibrary.Spline.Path"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:RadicalLibrary.Easing">
            <summary>
            Class Easing.
            </summary>
        </member>
        <member name="M:RadicalLibrary.Easing.Ease(System.Double,System.Single,RadicalLibrary.EasingType)">
            <summary>
            Eases the specified linear step.
            </summary>
            <param name="linearStep">The linear step.</param>
            <param name="acceleration">The acceleration.</param>
            <param name="type">The type.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.EaseIn(System.Double,RadicalLibrary.EasingType)">
            <summary>
            Eases the in.
            </summary>
            <param name="linearStep">The linear step.</param>
            <param name="type">The type.</param>
            <returns>System.Single.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RadicalLibrary.Easing.EaseOut(System.Double,RadicalLibrary.EasingType)">
            <summary>
            Eases the out.
            </summary>
            <param name="linearStep">The linear step.</param>
            <param name="type">The type.</param>
            <returns>System.Single.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RadicalLibrary.Easing.EaseInOut(System.Double,RadicalLibrary.EasingType,RadicalLibrary.EasingType)">
            <summary>
            Eases the in out.
            </summary>
            <param name="linearStep">The linear step.</param>
            <param name="easeInType">Type of the ease in.</param>
            <param name="easeOutType">Type of the ease out.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.EaseInOut(System.Double,RadicalLibrary.EasingType)">
            <summary>
            Eases the in out.
            </summary>
            <param name="linearStep">The linear step.</param>
            <param name="type">The type.</param>
            <returns>System.Single.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:RadicalLibrary.Easing.Sine.EaseIn(System.Double)">
            <summary>
            Eases the in.
            </summary>
            <param name="s">The s.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.Sine.EaseOut(System.Double)">
            <summary>
            Eases the out.
            </summary>
            <param name="s">The s.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.Sine.EaseInOut(System.Double)">
            <summary>
            Eases the in out.
            </summary>
            <param name="s">The s.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.Power.EaseIn(System.Double,System.Int32)">
            <summary>
            Eases the in.
            </summary>
            <param name="s">The s.</param>
            <param name="power">The power.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.Power.EaseOut(System.Double,System.Int32)">
            <summary>
            Eases the out.
            </summary>
            <param name="s">The s.</param>
            <param name="power">The power.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:RadicalLibrary.Easing.Power.EaseInOut(System.Double,System.Int32)">
            <summary>
            Eases the in out.
            </summary>
            <param name="s">The s.</param>
            <param name="power">The power.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:RadicalLibrary.MathHelper">
            <summary>
            Class MathHelper.
            </summary>
        </member>
        <member name="F:RadicalLibrary.MathHelper.Pi">
            <summary>
            The pi
            </summary>
        </member>
        <member name="F:RadicalLibrary.MathHelper.HalfPi">
            <summary>
            The half pi
            </summary>
        </member>
        <member name="M:RadicalLibrary.MathHelper.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Lerps the specified from.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="step">The step.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="T:RadicalLibrary.SmoothVector3">
            <summary>
            Class SmoothVector3.
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothVector3.Ease">
            <summary>
            The ease
            </summary>
        </member>
        <member name="M:RadicalLibrary.SmoothVector3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothVector3"/> class.
            </summary>
        </member>
        <member name="M:RadicalLibrary.SmoothVector3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:RadicalLibrary.SmoothVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothVector3"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:RadicalLibrary.SmoothVector3.#ctor(UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothVector3"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
            <value><c>true</c> if this instance is complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:RadicalLibrary.SmoothVector3.Mode">
            <summary>
            The mode
            </summary>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="F:RadicalLibrary.SmoothVector3.Duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.Current">
            <summary>
            Gets or sets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="F:RadicalLibrary.SmoothVector3.Lock">
            <summary>
            The lock
            </summary>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.x">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.z">
            <summary>
            Gets or sets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothVector3.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:RadicalLibrary.SmoothVector3.op_Implicit(RadicalLibrary.SmoothVector3)~UnityEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:RadicalLibrary.SmoothVector3"/> to <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RadicalLibrary.SmoothVector3.op_Implicit(UnityEngine.Vector3)~RadicalLibrary.SmoothVector3">
            <summary>
            Performs an implicit conversion from <see cref="T:UnityEngine.Vector3"/> to <see cref="T:RadicalLibrary.SmoothVector3"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:RadicalLibrary.SmoothFloat">
            <summary>
            Class SmoothFloat.
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothFloat.Mode">
            <summary>
            The mode
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothFloat.Ease">
            <summary>
            The ease
            </summary>
        </member>
        <member name="M:RadicalLibrary.SmoothFloat.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:RadicalLibrary.SmoothFloat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothFloat"/> class.
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothFloat.Duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="P:RadicalLibrary.SmoothFloat.Current">
            <summary>
            Gets or sets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothFloat.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="M:RadicalLibrary.SmoothFloat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothFloat"/> class.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="P:RadicalLibrary.SmoothFloat.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:RadicalLibrary.SmoothFloat.op_Implicit(RadicalLibrary.SmoothFloat)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:RadicalLibrary.SmoothFloat"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RadicalLibrary.SmoothFloat.op_Implicit(System.Single)~RadicalLibrary.SmoothFloat">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:RadicalLibrary.SmoothFloat"/>.
            </summary>
            <param name="f">The f.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:RadicalLibrary.SmoothFloat.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
            <value><c>true</c> if this instance is complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:RadicalLibrary.SmoothQuaternion">
            <summary>
            Class SmoothQuaternion.
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothQuaternion.Mode">
            <summary>
            The mode
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothQuaternion.Ease">
            <summary>
            The ease
            </summary>
        </member>
        <member name="M:RadicalLibrary.SmoothQuaternion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothQuaternion"/> class.
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothQuaternion.Duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="F:RadicalLibrary.SmoothQuaternion.Current">
            <summary>
            The current
            </summary>
        </member>
        <member name="M:RadicalLibrary.SmoothQuaternion.#ctor(UnityEngine.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalLibrary.SmoothQuaternion"/> class.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="P:RadicalLibrary.SmoothQuaternion.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:RadicalLibrary.SmoothQuaternion.op_Implicit(RadicalLibrary.SmoothQuaternion)~UnityEngine.Quaternion">
            <summary>
            Performs an implicit conversion from <see cref="T:RadicalLibrary.SmoothQuaternion"/> to <see cref="T:UnityEngine.Quaternion"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RadicalLibrary.SmoothQuaternion.op_Implicit(UnityEngine.Quaternion)~RadicalLibrary.SmoothQuaternion">
            <summary>
            Performs an implicit conversion from <see cref="T:UnityEngine.Quaternion"/> to <see cref="T:RadicalLibrary.SmoothQuaternion"/>.
            </summary>
            <param name="q">The q.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:RadicalLibrary.SmoothQuaternion.x">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothQuaternion.y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothQuaternion.z">
            <summary>
            Gets or sets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothQuaternion.w">
            <summary>
            Gets or sets the w.
            </summary>
            <value>The w.</value>
        </member>
        <member name="P:RadicalLibrary.SmoothQuaternion.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
            <value><c>true</c> if this instance is complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Serialization.LevelSerializer">
            <summary>
            Class LevelSerializer.
            </summary>
        </member>
        <member name="T:Serialization.LevelSerializer.SerializationModes">
            <summary>
            Serialization modes.
            </summary>
        </member>
        <member name="F:Serialization.LevelSerializer.SerializationModes.SerializeWhenFree">
            <summary>
            Serialize when suspended
            </summary>
        </member>
        <member name="F:Serialization.LevelSerializer.SerializationModes.CacheSerialization">
            <summary>
            Ensure that there is serialization data
            when suspending
            </summary>
        </member>
        <member name="T:Serialization.StoreMaterials">
            <summary>
            Class StoreMaterials.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
            <summary>
            Used to store material and shader information
            </summary>
        </member>
        <member name="T:Serialization.StoreMaterials.MaterialProperty">
            <summary>
            Class MaterialProperty.
            </summary>
            <summary>
            Contains a copy of the ShaderPropertyType enum from the ShaderUtil class, because it's not available in player builds
            </summary>
        </member>
        <member name="T:Serialization.StoreMaterials.MaterialProperty.PropertyType">
            <summary>
            Enum PropertyType
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.PropertyType.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.PropertyType.Vector">
            <summary>
            The vector
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.PropertyType.Float">
            <summary>
            The float
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.PropertyType.Range">
            <summary>
            The range
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.PropertyType.TexEnv">
            <summary>
            The tex env
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.description">
            <summary>
            The description
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.MaterialProperty.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.ShaderDatabase">
            <summary>
            Contains all shaders and properties that are used with all instances of this script in the entire project.
            The initialization happens in the constructor which is created using code generation.
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.cache">
            <summary>
            Caches shaders we already searched for
            </summary>
        </member>
        <member name="P:Serialization.StoreMaterials.Dirty">
            <summary>
            Stores whether all shaders are in the shader database
            </summary>
        </member>
        <member name="P:Serialization.StoreMaterials.ShaderCount">
            <summary>
            The amount of shaders in the database
            </summary>
        </member>
        <member name="P:Serialization.StoreMaterials.PropertyCount">
            <summary>
            The amount of properties of all shaders in the database
            </summary>
        </member>
        <member name="T:Serialization.StoreMaterials.StoredValue">
            <summary>
            Container for the stored information
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.StoredValue.property">
            <summary>
            The property
            </summary>
        </member>
        <member name="F:Serialization.StoreMaterials.StoredValue.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Serialization.StoreMaterials.GetValues(UnityEngine.Material)">
            <summary>
            Gets the values given a material
            </summary>
            <param name="m">The material</param>
            <returns>A StoredValue containing value and type information</returns>
        </member>
        <member name="M:Serialization.StoreMaterials.SetValues(UnityEngine.Material,System.Collections.Generic.IEnumerable{Serialization.StoreMaterials.StoredValue})">
            <summary>
            Restores the material values
            </summary>
            <param name="m">Material</param>
            <param name="values">Set of values</param>
        </member>
        <member name="M:Serialization.StoreMaterials.GetShaderProperties(UnityEngine.Material)">
            <summary>
            Finds the shader's properties in the shader database and caches them
            </summary>
            <param name="material">Material</param>
            <returns>List of properties</returns>
        </member>
        <member name="T:Serialization.StoreAnimator">
            <summary>
            Class StoreAnimator.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
            <summary>
            Class StoreAnimator.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:Serialization.StoreAnimator.LoadingMode">
            <summary>
            Unity's API doesn't allow to restore mecanim transitions. When a save occurs during one,
            you can either choose to revert back to the starting point of the transition or skip it.
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LoadingMode.REVERT">
            <summary>
            The revert
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LoadingMode.SKIP">
            <summary>
            The skip
            </summary>
        </member>
        <member name="P:Serialization.StoreAnimator.e_storeAllLayers">
            <summary>
            Gets or sets a value indicating whether [e store all layers].
            </summary>
            <value><c>true</c> if [e store all layers]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Serialization.StoreAnimator.e_layerMask">
            <summary>
            Gets or sets the e layer mask.
            </summary>
            <value>The e layer mask.</value>
        </member>
        <member name="T:Serialization.StoreAnimator.LayerInfo">
            <summary>
            Stores all relevant information for a mecanim layer
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LayerInfo.index">
            <summary>
            The index
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LayerInfo.currentHash">
            <summary>
            The current hash
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LayerInfo.nextHash">
            <summary>
            The next hash
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LayerInfo.normalizedTimeCurrent">
            <summary>
            The normalized time current
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LayerInfo.normalizedTimeNext">
            <summary>
            The normalized time next
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.LayerInfo.weight">
            <summary>
            The weight
            </summary>
        </member>
        <member name="T:Serialization.StoreAnimator.ParameterInfo">
            <summary>
            Stores all relevant information for a mecanim parameter
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.ParameterInfo.number">
            <summary>
            The number
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.ParameterInfo.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Serialization.StoreAnimator.ParameterInfo.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:Serialization.Entry">
            <summary>
            Class Entry.
            </summary>
        </member>
        <member name="F:Serialization.Entry.Name">
            <summary>
            The name of the item being read or written
            This should be filled out by the storage when
            MustHaveName = true and deserializing
            </summary>
        </member>
        <member name="F:Serialization.Entry._propertyInfo">
            <summary>
            The type of the item being stored or retrieved
            this should be filled out by the storage when
            MustHaveName=true and deserializing. Will
            be filled in when serializing.
            </summary>
        </member>
        <member name="F:Serialization.Entry.StoredType">
            <summary>
            The stored type
            </summary>
        </member>
        <member name="F:Serialization.Entry.Value">
            <summary>
            On writing, the value of the object for reference, not needed on
            deserialization
            </summary>
        </member>
        <member name="F:Serialization.Entry.IsStatic">
            <summary>
            Indicates whether this entry is static
            </summary>
        </member>
        <member name="F:Serialization.Entry.MustHaveName">
            <summary>
            Set to indicate that the name provided is that of a field or property
            and is needed to reset the value later
            </summary>
        </member>
        <member name="F:Serialization.Entry.OwningType">
            <summary>
            The type of the object which owns the item being serialized or null
            if not directly owned.  This will always be set on serialization and
            deserialization when MustHaveName = true and can be used to
            look up field and property information. Or you can ignore it if
            you don't need it
            </summary>
        </member>
        <member name="P:Serialization.Entry.PropertyInfo">
            <summary>
            The property info or null, if the value did not
            come from a property.  You might want to use
            the to look up attributes attached to the property
            definition
            </summary>
        </member>
        <member name="P:Serialization.Entry.FieldInfo">
            <summary>
            The field info or null, if the value did not
            come from a field. You might want to use it
            to look up attributes attached to the field definition
            </summary>
        </member>
        <member name="F:Serialization.Entry.Setter">
            <summary>
            The setter
            </summary>
        </member>
        <member name="T:Serialization.GetSet">
            <summary>
            Class GetSet.
            </summary>
        </member>
        <member name="F:Serialization.GetSet.Priority">
            <summary>
            The priority
            </summary>
        </member>
        <member name="F:Serialization.GetSet.Info">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:Serialization.GetSet.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Serialization.GetSet.FieldInfo">
            <summary>
            The field information
            </summary>
        </member>
        <member name="F:Serialization.GetSet.Vanilla">
            <summary>
            The vanilla
            </summary>
        </member>
        <member name="F:Serialization.GetSet.CollectionType">
            <summary>
            The collection type
            </summary>
        </member>
        <member name="F:Serialization.GetSet.Get">
            <summary>
            The get
            </summary>
        </member>
        <member name="F:Serialization.GetSet.Set">
            <summary>
            The set
            </summary>
        </member>
        <member name="F:Serialization.GetSet.IsStatic">
            <summary>
            The is static
            </summary>
        </member>
        <member name="P:Serialization.GetSet.MemberInfo">
            <summary>
            Gets the member information.
            </summary>
            <value>The member information.</value>
        </member>
        <member name="T:Serialization.GetSetGeneric">
            <summary>
            Class GetSetGeneric.
            </summary>
            <seealso cref="T:Serialization.GetSet" />
        </member>
        <member name="M:Serialization.GetSetGeneric.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.GetSetGeneric"/> class.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="M:Serialization.GetSetGeneric.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.GetSetGeneric"/> class.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="M:Serialization.GetSetGeneric.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.GetSetGeneric"/> class.
            </summary>
            <param name="t">The t.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Serialization.GetWritableAttributes">
            <summary>
            Class GetWritableAttributes.
            </summary>
        </member>
        <member name="F:Serialization.GetWritableAttributes.Vanilla">
            <summary>
            Dictionary of all the used objects to check if properties are different
            to those set during construction
            </summary>
        </member>
        <member name="M:Serialization.GetWritableAttributes.GetProperties(System.Object,System.Boolean)">
            <summary>
            Gets the properties.
            </summary>
            <param name="obj">The object.</param>
            <param name="seen">if set to <c>true</c> [seen].</param>
            <returns>Entry[].</returns>
        </member>
        <member name="M:Serialization.GetWritableAttributes.GetFields(System.Object,System.Boolean)">
            <summary>
            Gets the fields.
            </summary>
            <param name="obj">The object.</param>
            <param name="seen">if set to <c>true</c> [seen].</param>
            <returns>Entry[].</returns>
        </member>
        <member name="T:Serialization.IStorage">
            <summary>
            Interface IStorage
            </summary>
        </member>
        <member name="M:Serialization.IStorage.StartSerializing">
            <summary>
            Starts the serialization process, the serializer should initialize and wait for data
            </summary>
        </member>
        <member name="M:Serialization.IStorage.FinishedSerializing">
            <summary>
            Called when serialization is complete, should return the data or a key
            encoded as a byte array that will be used to reinitialize the serializer
            later
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serialization.IStorage.FinishedDeserializing">
            <summary>
            Called when deserialization is complete, so that resources may be released
            </summary>
        </member>
        <member name="M:Serialization.IStorage.StartSerializing(Serialization.Entry,System.Int32)">
            <summary>
            Called when serializing a new object, the Entry parameter may have MustHaveName set
            when this is true the name must be persisted as is so that the property or field can
            be set when retrieving the data.
            If this routine returns TRUE then no further processing is executed and the object
            is presumed persisted in its entirety
            </summary>
            <returns>Normally FALSE.  True if the object is already fully persisted</returns>
            <param name="entry">The item being serialized</param>
        </member>
        <member name="M:Serialization.IStorage.FinishSerializing(Serialization.Entry)">
            <summary>
            Called when the last information about an object has been written
            </summary>
            <param name="entry">The object being written</param>
        </member>
        <member name="M:Serialization.IStorage.StartDeserializing(Serialization.Entry)">
            <summary>
            Called when deserializing an object.  If the Entry parameter has MustHaveName set then
            the routine should return with the Entry parameter updated with the name and
            the type of the object in StoredType
            If  the storage is capable of fully recreating the object then this routine should return
            the fully constructed object, and no further processing will occur.  Not this does mean
            that it must handle its own references for previously seen objects
            This will be called after DeserializeGetName
            </summary>
            <returns>Normally NULL, it may also return a fully depersisted object</returns>
            <param name="entry"></param>
        </member>
        <member name="M:Serialization.IStorage.DeserializeGetName(Serialization.Entry)">
            <summary>
            Called to allow the storage to retrieve the name of the item being deserialized
            All entries must be named before a call to StartDeserializing, this enables
            the system to fill out the property setter and capture default stored type
            information before deserialization commences
            </summary>
            <param name="entry">The entry whose name should be filled in</param>
        </member>
        <member name="M:Serialization.IStorage.FinishDeserializing(Serialization.Entry)">
            <summary>
            Called when an object has deserialization complete
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Serialization.IStorage.ShouldWriteFields(Serialization.Entry[])">
            <summary>
            Reads a simple type (or array of bytes) from storage
            </summary>
            <param name="name">The name of the item</param>
            <param name="type">The type to be read</param>
            <returns></returns>
        </member>
        <member name="M:Serialization.IStorage.ShouldWriteProperties(Serialization.Entry[])">
            <summary>
            Shoulds the write properties.
            </summary>
            <param name="properties">The properties.</param>
            <returns>Entry[].</returns>
        </member>
        <member name="M:Serialization.IStorage.StartDeserializing">
            <summary>
            Starts the deserializing.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.HasMore">
            <summary>
            Determines whether this instance has more.
            </summary>
            <returns><c>true</c> if this instance has more; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadProperty(Serialization.Entry)">
            <summary>
            Begins the read property.
            </summary>
            <param name="entry">The entry.</param>
            <returns>Entry.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadProperty">
            <summary>
            Ends the read property.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadField(Serialization.Entry)">
            <summary>
            Begins the read field.
            </summary>
            <param name="entry">The entry.</param>
            <returns>Entry.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadField">
            <summary>
            Ends the read field.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadProperties">
            <summary>
            Begins the read properties.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadFields">
            <summary>
            Begins the read fields.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadProperties">
            <summary>
            Ends the read properties.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndReadFields">
            <summary>
            Ends the read fields.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.ReadSimpleValue``1">
            <summary>
            Reads the simple value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:Serialization.IStorage.ReadSimpleValue(System.Type)">
            <summary>
            Reads the simple value.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.IStorage.IsMultiDimensionalArray(System.Int32@)">
            <summary>
            Determines whether [is multi dimensional array] [the specified length].
            </summary>
            <param name="length">The length.</param>
            <returns><c>true</c> if [is multi dimensional array] [the specified length]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadMultiDimensionalArray(System.Int32@,System.Int32@)">
            <summary>
            Begins the read multi dimensional array.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.IStorage.EndReadMultiDimensionalArray">
            <summary>
            Ends the read multi dimensional array.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.ReadArrayDimension(System.Int32)">
            <summary>
            Reads the array dimension.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.ReadSimpleArray(System.Type,System.Int32)">
            <summary>
            Reads the simple array.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="count">The count.</param>
            <returns>Array.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadObject(System.Boolean@)">
            <summary>
            Begins the read object.
            </summary>
            <param name="isReference">if set to <c>true</c> [is reference].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadObject">
            <summary>
            Ends the read object.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadList(System.Type)">
            <summary>
            Begins the read list.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadListItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read list item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadListItem">
            <summary>
            Ends the read list item.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndReadList">
            <summary>
            Ends the read list.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadDictionary(System.Type,System.Type)">
            <summary>
            Begins the read dictionary.
            </summary>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadDictionaryKeys">
            <summary>
            Begins the read dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadDictionaryKeyItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read dictionary key item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadDictionaryKeyItem">
            <summary>
            Ends the read dictionary key item.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndReadDictionaryKeys">
            <summary>
            Ends the read dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadDictionaryValues">
            <summary>
            Begins the read dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadDictionaryValueItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read dictionary value item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadDictionaryValueItem">
            <summary>
            Ends the read dictionary value item.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndReadDictionaryValues">
            <summary>
            Ends the read dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndReadDictionary">
            <summary>
            Ends the read dictionary.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginReadObjectArray(System.Type)">
            <summary>
            Begins the read object array.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.IStorage.BeginReadObjectArrayItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read object array item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndReadObjectArrayItem">
            <summary>
            Ends the read object array item.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndReadObjectArray">
            <summary>
            Ends the read object array.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteObject(System.Int32,System.Type,System.Boolean)">
            <summary>
            Begins the write object.
            </summary>
            <param name="id">The identifier.</param>
            <param name="objectType">Type of the object.</param>
            <param name="wasSeen">if set to <c>true</c> [was seen].</param>
        </member>
        <member name="M:Serialization.IStorage.EndWriteObject">
            <summary>
            Ends the write object.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteList(System.Int32,System.Type)">
            <summary>
            Begins the write list.
            </summary>
            <param name="count">The count.</param>
            <param name="listType">Type of the list.</param>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteListItem(System.Int32,System.Object)">
            <summary>
            Begins the write list item.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndWriteListItem">
            <summary>
            Ends the write list item.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndWriteList">
            <summary>
            Ends the write list.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteObjectArray(System.Int32,System.Type)">
            <summary>
            Begins the write object array.
            </summary>
            <param name="count">The count.</param>
            <param name="arrayType">Type of the array.</param>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteObjectArrayItem(System.Int32,System.Object)">
            <summary>
            Begins the write object array item.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndWriteObjectArrayItem">
            <summary>
            Ends the write object array item.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndWriteObjectArray">
            <summary>
            Ends the write object array.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginMultiDimensionArray(System.Type,System.Int32,System.Int32)">
            <summary>
            Begins the multi dimension array.
            </summary>
            <param name="arrayType">Type of the array.</param>
            <param name="dimensions">The dimensions.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.IStorage.EndMultiDimensionArray">
            <summary>
            Ends the multi dimension array.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.WriteArrayDimension(System.Int32,System.Int32)">
            <summary>
            Writes the array dimension.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.IStorage.WriteSimpleArray(System.Int32,System.Array)">
            <summary>
            Writes the simple array.
            </summary>
            <param name="count">The count.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Serialization.IStorage.WriteSimpleValue(System.Object)">
            <summary>
            Writes the simple value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteDictionary(System.Int32,System.Type)">
            <summary>
            Begins the write dictionary.
            </summary>
            <param name="count">The count.</param>
            <param name="dictionaryType">Type of the dictionary.</param>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteDictionaryKeys">
            <summary>
            Begins the write dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteDictionaryKey(System.Int32,System.Object)">
            <summary>
            Begins the write dictionary key.
            </summary>
            <param name="id">The identifier.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndWriteDictionaryKey">
            <summary>
            Ends the write dictionary key.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndWriteDictionaryKeys">
            <summary>
            Ends the write dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteDictionaryValues">
            <summary>
            Begins the write dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteDictionaryValue(System.Int32,System.Object)">
            <summary>
            Begins the write dictionary value.
            </summary>
            <param name="id">The identifier.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.IStorage.EndWriteDictionaryValue">
            <summary>
            Ends the write dictionary value.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndWriteDictionaryValues">
            <summary>
            Ends the write dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.EndWriteDictionary">
            <summary>
            Ends the write dictionary.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteProperties(System.Int32)">
            <summary>
            Begins the write properties.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.IStorage.EndWriteProperties">
            <summary>
            Ends the write properties.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteProperty(System.String,System.Type)">
            <summary>
            Begins the write property.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serialization.IStorage.EndWriteProperty">
            <summary>
            Ends the write property.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteFields(System.Int32)">
            <summary>
            Begins the write fields.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.IStorage.EndWriteFields">
            <summary>
            Ends the write fields.
            </summary>
        </member>
        <member name="M:Serialization.IStorage.BeginWriteField(System.String,System.Type)">
            <summary>
            Begins the write field.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serialization.IStorage.EndWriteField">
            <summary>
            Ends the write field.
            </summary>
        </member>
        <member name="P:Serialization.IStorage.SupportsOnDemand">
            <summary>
            Gets a value indicating whether [supports on demand].
            </summary>
            <value><c>true</c> if [supports on demand]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Serialization.IStorage.BeginOnDemand(System.Int32)">
            <summary>
            Begins the on demand.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Serialization.IStorage.EndOnDemand">
            <summary>
            Ends the on demand.
            </summary>
        </member>
        <member name="T:Serialization.BinarySerializer">
            <summary>
            Class BinarySerializer. This class cannot be inherited.
            </summary>
            <seealso cref="T:Serialization.IStorage" />
        </member>
        <member name="P:Serialization.BinarySerializer.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Serialization.BinarySerializer.#ctor">
            <summary>
            Used when serializing
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.#ctor(System.Byte[])">
            <summary>
            Used when deserializaing
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Serialization.BinarySerializer.StartSerializing(Serialization.Entry,System.Int32)">
            <summary>
            Called when serializing a new object, the Entry parameter may have MustHaveName set
            when this is true the name must be persisted as is so that the property or field can
            be set when retrieving the data.
            If this routine returns TRUE then no further processing is executed and the object
            is presumed persisted in its entirety
            </summary>
            <param name="entry">The item being serialized</param>
            <param name="id">The identifier.</param>
            <returns>Normally FALSE.  True if the object is already fully persisted</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.StartSerializing">
            <summary>
            Starts the serialization process, the serializer should initialize and wait for data
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.FinishedSerializing">
            <summary>
            Called when serialization is complete, should return the data or a key
            encoded as a byte array that will be used to reinitialize the serializer
            later
            </summary>
        </member>
        <member name="P:Serialization.BinarySerializer.SupportsOnDemand">
            <summary>
            Gets a value indicating whether [supports on demand].
            </summary>
            <value><c>true</c> if [supports on demand]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginOnDemand(System.Int32)">
            <summary>
            Begins the on demand.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.EndOnDemand">
            <summary>
            Ends the on demand.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteObject(System.Int32,System.Type,System.Boolean)">
            <summary>
            Begins the write object.
            </summary>
            <param name="id">The identifier.</param>
            <param name="objectType">Type of the object.</param>
            <param name="wasSeen">if set to <c>true</c> [was seen].</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteProperties(System.Int32)">
            <summary>
            Begins the write properties.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteFields(System.Int32)">
            <summary>
            Begins the write fields.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.WriteSimpleValue(System.Object)">
            <summary>
            Writes the simple value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteList(System.Int32,System.Type)">
            <summary>
            Begins the write list.
            </summary>
            <param name="count">The count.</param>
            <param name="listType">Type of the list.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteDictionary(System.Int32,System.Type)">
            <summary>
            Begins the write dictionary.
            </summary>
            <param name="count">The count.</param>
            <param name="dictionaryType">Type of the dictionary.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.WriteSimpleArray(System.Int32,System.Array)">
            <summary>
            Writes the simple array.
            </summary>
            <param name="count">The count.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginMultiDimensionArray(System.Type,System.Int32,System.Int32)">
            <summary>
            Begins the multi dimension array.
            </summary>
            <param name="arrayType">Type of the array.</param>
            <param name="dimensions">The dimensions.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.WriteArrayDimension(System.Int32,System.Int32)">
            <summary>
            Writes the array dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteObjectArray(System.Int32,System.Type)">
            <summary>
            Begins the write object array.
            </summary>
            <param name="count">The count.</param>
            <param name="arrayType">Type of the array.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.ShouldWriteFields(Serialization.Entry[])">
            <summary>
            Reads a simple type (or array of bytes) from storage
            </summary>
            <param name="fields">The fields.</param>
            <returns>Entry[].</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.ShouldWriteProperties(Serialization.Entry[])">
            <summary>
            Shoulds the write properties.
            </summary>
            <param name="properties">The properties.</param>
            <returns>Entry[].</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.FinishedDeserializing">
            <summary>
            Called when deserialization is complete, so that resources may be released
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.DeserializeGetName(Serialization.Entry)">
            <summary>
            Called to allow the storage to retrieve the name of the item being deserialized
            All entries must be named before a call to StartDeserializing, this enables
            the system to fill out the property setter and capture default stored type
            information before deserialization commences
            </summary>
            <param name="entry">The entry whose name should be filled in</param>
            <exception cref="T:System.Exception">Data stream may be corrupt, found an id of " + id + " when looking a property name id</exception>
        </member>
        <member name="M:Serialization.BinarySerializer.StartDeserializing(Serialization.Entry)">
            <summary>
            Starts to deserialize the object
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadProperty(Serialization.Entry)">
            <summary>
            Begins the read property.
            </summary>
            <param name="entry">The entry.</param>
            <returns>Entry.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadProperty">
            <summary>
            Ends the read property.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadField(Serialization.Entry)">
            <summary>
            Begins the read field.
            </summary>
            <param name="entry">The entry.</param>
            <returns>Entry.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadField">
            <summary>
            Ends the read field.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.StartDeserializing">
            <summary>
            Starts the deserializing.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Serialization.BinarySerializer.FinishDeserializing(Serialization.Entry)">
            <summary>
            Called when an object has deserialization complete
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.ReadSimpleArray(System.Type,System.Int32)">
            <summary>
            Reads the simple array.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="count">The count.</param>
            <returns>Array.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadProperties">
            <summary>
            Begins the read properties.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadFields">
            <summary>
            Begins the read fields.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.ReadSimpleValue``1">
            <summary>
            Reads the simple value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.ReadSimpleValue(System.Type)">
            <summary>
            Reads the simple value.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.IsMultiDimensionalArray(System.Int32@)">
            <summary>
            Determines whether [is multi dimensional array] [the specified length].
            </summary>
            <param name="length">The length.</param>
            <returns><c>true</c> if [is multi dimensional array] [the specified length]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadDictionary(System.Type,System.Type)">
            <summary>
            Begins the read dictionary.
            </summary>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadDictionary">
            <summary>
            Ends the read dictionary.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadObjectArray(System.Type)">
            <summary>
            Begins the read object array.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadObjectArray">
            <summary>
            Ends the read object array.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadMultiDimensionalArray(System.Int32@,System.Int32@)">
            <summary>
            Begins the read multi dimensional array.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadMultiDimensionalArray">
            <summary>
            Ends the read multi dimensional array.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.ReadArrayDimension(System.Int32)">
            <summary>
            Reads the array dimension.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadList(System.Type)">
            <summary>
            Begins the read list.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadList">
            <summary>
            Ends the read list.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadObject(System.Boolean@)">
            <summary>
            Begins the read object.
            </summary>
            <param name="isReference">if set to <c>true</c> [is reference].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteObjectArray">
            <summary>
            Ends the write object array.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteList">
            <summary>
            Ends the write list.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteDictionary">
            <summary>
            Ends the write dictionary.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteDictionaryKey(System.Int32,System.Object)">
            <summary>
            Begins the write dictionary key.
            </summary>
            <param name="id">The identifier.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteDictionaryKey">
            <summary>
            Ends the write dictionary key.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteDictionaryValue(System.Int32,System.Object)">
            <summary>
            Begins the write dictionary value.
            </summary>
            <param name="id">The identifier.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteDictionaryValue">
            <summary>
            Ends the write dictionary value.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndMultiDimensionArray">
            <summary>
            Ends the multi dimension array.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadObject">
            <summary>
            Ends the read object.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteListItem(System.Int32,System.Object)">
            <summary>
            Begins the write list item.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteListItem">
            <summary>
            Ends the write list item.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteObjectArrayItem(System.Int32,System.Object)">
            <summary>
            Begins the write object array item.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteObjectArrayItem">
            <summary>
            Ends the write object array item.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadProperties">
            <summary>
            Ends the read properties.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadFields">
            <summary>
            Ends the read fields.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadListItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read list item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadListItem">
            <summary>
            Ends the read list item.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadDictionaryKeyItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read dictionary key item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadDictionaryKeyItem">
            <summary>
            Ends the read dictionary key item.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadDictionaryValueItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read dictionary value item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadDictionaryValueItem">
            <summary>
            Ends the read dictionary value item.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadObjectArrayItem(System.Int32,Serialization.Entry)">
            <summary>
            Begins the read object array item.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadObjectArrayItem">
            <summary>
            Ends the read object array item.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteObject">
            <summary>
            Ends the write object.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteProperty(System.String,System.Type)">
            <summary>
            Begins the write property.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteProperty">
            <summary>
            Ends the write property.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteField(System.String,System.Type)">
            <summary>
            Begins the write field.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteField">
            <summary>
            Ends the write field.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteProperties">
            <summary>
            Ends the write properties.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteFields">
            <summary>
            Ends the write fields.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.FinishSerializing(Serialization.Entry)">
            <summary>
            Called when the last information about an object has been written
            </summary>
            <param name="entry">The object being written</param>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadDictionaryKeys">
            <summary>
            Begins the read dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadDictionaryKeys">
            <summary>
            Ends the read dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginReadDictionaryValues">
            <summary>
            Begins the read dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndReadDictionaryValues">
            <summary>
            Ends the read dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteDictionaryKeys">
            <summary>
            Begins the write dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteDictionaryKeys">
            <summary>
            Ends the write dictionary keys.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.BeginWriteDictionaryValues">
            <summary>
            Begins the write dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.EndWriteDictionaryValues">
            <summary>
            Ends the write dictionary values.
            </summary>
        </member>
        <member name="M:Serialization.BinarySerializer.HasMore">
            <summary>
            Determines whether this instance has more.
            </summary>
            <returns><c>true</c> if this instance has more; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Serialization.SerializePrivateFieldOfType">
            <summary>
            Class SerializePrivateFieldOfType.
            </summary>
        </member>
        <member name="M:Serialization.SerializePrivateFieldOfType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.SerializePrivateFieldOfType"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Serialization.SerializePrivateFieldOfType.GetFields(System.Type)">
            <summary>
            Gets the fields.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable&lt;FieldInfo&gt;.</returns>
        </member>
        <member name="T:Serialization.SerializerId">
            <summary>
              Attribute used to flag IDs this can be useful for check object
              consistence when the serializer is in a mode that does not
              serialize identifiers
            </summary>
        </member>
        <member name="T:Serialization.CreateUsingEvent">
            <summary>
              Always use an event to create instances of this type
            </summary>
        </member>
        <member name="T:Serialization.CreatorFor">
            <summary>
              This class can create a type of object
            </summary>
        </member>
        <member name="F:Serialization.CreatorFor.CreatesType">
            <summary>
            The creates type
            </summary>
        </member>
        <member name="M:Serialization.CreatorFor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.CreatorFor"/> class.
            </summary>
            <param name="createsType">Type of the creates.</param>
        </member>
        <member name="T:Serialization.SerializationPriorityAttribute">
            <summary>
              Used to set an order for deserialiation
            </summary>
        </member>
        <member name="F:Serialization.SerializationPriorityAttribute.Priority">
            <summary>
            The priority
            </summary>
        </member>
        <member name="M:Serialization.SerializationPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.SerializationPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="T:Serialization.IProvideAttributeList">
            <summary>
            Interface IProvideAttributeList
            </summary>
        </member>
        <member name="M:Serialization.IProvideAttributeList.AllowAllSimple(System.Type)">
            <summary>
            Allows all simple.
            </summary>
            <param name="tp">The tp.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Serialization.IProvideAttributeList.GetAttributeList(System.Type)">
            <summary>
            Gets the attribute list.
            </summary>
            <param name="tp">The tp.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
        </member>
        <member name="T:Serialization.AttributeListProvider">
            <summary>
            Class AttributeListProvider.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:Serialization.AttributeListProvider.AttributeListType">
            <summary>
            The attribute list type
            </summary>
        </member>
        <member name="M:Serialization.AttributeListProvider.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.AttributeListProvider"/> class.
            </summary>
            <param name="attributeListType">Type of the attribute list.</param>
        </member>
        <member name="T:Serialization.DeferredAttribute">
            <summary>
            Class DeferredAttribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serialization.Specialist">
            <summary>
            Class Specialist.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:Serialization.Specialist.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="M:Serialization.Specialist.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.Specialist"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Serialization.SpecialistProvider">
            <summary>
            Class SpecialistProvider.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serialization.ISerializeObjectEx">
            <summary>
            Interface ISerializeObjectEx
            </summary>
            <seealso cref="T:Serialization.ISerializeObject" />
        </member>
        <member name="M:Serialization.ISerializeObjectEx.CanSerialize(System.Type,System.Object)">
            <summary>
            Determines whether this instance can serialize the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance can serialize the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Serialization.ISpecialist">
            <summary>
            Interface ISpecialist
            </summary>
        </member>
        <member name="M:Serialization.ISpecialist.Serialize(System.Object)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.ISpecialist.Deserialize(System.Object)">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Serialization.ISerializeObject">
            <summary>
            Interface ISerializeObject
            </summary>
        </member>
        <member name="M:Serialization.ISerializeObject.Serialize(System.Object)">
            <summary>
            Serializes the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:Serialization.ISerializeObject.Deserialize(System.Object[],System.Object)">
            <summary>
            Deserializes the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Serialization.ICreateObject">
            <summary>
            Interface ICreateObject
            </summary>
        </member>
        <member name="M:Serialization.ICreateObject.Create(System.Type)">
            <summary>
            Creates the specified item type.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Serialization.SerializerAttribute">
            <summary>
            Class SerializerAttribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serialization.SerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.SerializerAttribute"/> class.
            </summary>
            <param name="serializesType">Type of the serializes.</param>
        </member>
        <member name="T:Serialization.OnlyInterfaces">
            <summary>
            Class OnlyInterfaces.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serialization.SubTypeSerializerAttribute">
            <summary>
            Class SubTypeSerializerAttribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serialization.SubTypeSerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.SubTypeSerializerAttribute"/> class.
            </summary>
            <param name="serializesType">Type of the serializes.</param>
        </member>
        <member name="T:Serialization.UnitySerializer">
            <summary>
              .NET compatible binary serializer with suppression support
              produces compact representations, suitable for further compression
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.TextEncoding">
            <summary>
            The text encoding
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.IgnoreIds">
            <summary>
            The ignore ids
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.DEFERRED">
            <summary>
            The deferred
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.Verbose">
            <summary>
              Write all types, even if they are known, often used with Loud mode
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.PrewarmLookup">
            <summary>
            The prewarm lookup
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.currentVersion">
            <summary>
            The current version
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.StoredTypes">
            <summary>
              Cache for property name to item lookups
            </summary>
        </member>
        <member name="P:Serialization.UnitySerializer.IsChecksum">
            <summary>
              Put the serializer into Checksum mode
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.Copy``1(``0)">
            <summary>
            Copies the specified original.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="original">The original.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.GetTypeEx(System.Object)">
            <summary>
            Gets the type ex.
            </summary>
            <param name="fullTypeName">Full name of the type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.SerializeToFile(System.Object,System.String)">
            <summary>
            Serializes to file.
            </summary>
            <param name="obj">The object.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeFromFile``1(System.String)">
            <summary>
            Deserializes from file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">Name of the file.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.InformDeserializedObjects(Serialization.UnitySerializer.FinalProcess)">
            <summary>
            Informs the deserialized objects.
            </summary>
            <param name="process">The process.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.InformDeserializedObjects">
            <summary>
            Informs the deserialized objects.
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.AddFinalAction(System.Action)">
            <summary>
            Adds the final action.
            </summary>
            <param name="a">a.</param>
        </member>
        <member name="T:Serialization.UnitySerializer.FinalProcess">
            <summary>
            Struct FinalProcess
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.FinalProcess.deferredActions">
            <summary>
            The deferred actions
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.FinalProcess.deferredSetters">
            <summary>
            The deferred setters
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.FinalProcess.deserializedObjects">
            <summary>
            The deserialized objects
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.TakeOwnershipOfFinalization">
            <summary>
            Takes the ownership of finalization.
            </summary>
            <returns>FinalProcess.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.RunDeferredActions(System.Int32,System.Boolean)">
            <summary>
            Runs the deferred actions.
            </summary>
            <param name="count">The count.</param>
            <param name="clear">if set to <c>true</c> [clear].</param>
        </member>
        <member name="M:Serialization.UnitySerializer.RunDeferredActions(Serialization.UnitySerializer.FinalProcess,System.Int32,System.Boolean)">
            <summary>
            Runs the deferred actions.
            </summary>
            <param name="process">The process.</param>
            <param name="count">The count.</param>
            <param name="clear">if set to <c>true</c> [clear].</param>
        </member>
        <member name="M:Serialization.UnitySerializer.AddFixup(Serialization.UnitySerializer.DeferredSetter)">
            <summary>
            Adds the fixup.
            </summary>
            <param name="setter">The setter.</param>
        </member>
        <member name="E:Serialization.UnitySerializer.CanSerialize">
            <summary>
            Occurs when [can serialize].
            </summary>
        </member>
        <member name="E:Serialization.UnitySerializer.CreateType">
            <summary>
              Event that is fired if a particular type cannot be instantiated
            </summary>
        </member>
        <member name="E:Serialization.UnitySerializer.MapMissingType">
            <summary>
              Event that is fired if a particular type cannot be found
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.Deserialize``1(System.Byte[])">
            <summary>
              Deserialize to a type
            </summary>
            <param name="array"> </param>
            <returns> </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.WriteToFile(System.Byte[],System.String)">
            <summary>
            Writes a byte array to a file.
            </summary>
            <param name='data'>
            The bytes to write
            </param>
            <param name='filename'>
            The filename to save them to
            </param>
        </member>
        <member name="M:Serialization.UnitySerializer.WriteToFile(System.String,System.String)">
            <summary>
            Writes a string to file.
            </summary>
            <param name='str'>
            The string to write
            </param>
            <param name='filename'>
            Filename for the output
            </param>/
        </member>
        <member name="M:Serialization.UnitySerializer.Deserialize``1(System.IO.Stream)">
            <summary>
              Deserialize from a stream to a type
            </summary>
            <param name="stream"> </param>
            <returns> </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.GetChecksum(System.Object)">
            <summary>
              Get a checksum for an item.  Checksums "should" be different
              for every object that has a different "meaning".  You can
              flag properties as DoNotChecksum if that helps to keep decorative
              properties away from the checksum whilst including meaningful ones
            </summary>
            <param name="item"> The object to checksum </param>
            <returns> A checksum string, this includes no illegal characters and can be used as a file name </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.RegisterSerializationAssembly">
            <summary>
              Register all of the custom serializers in an assembly
            </summary>
            <param name="assembly"> Leave blank to register the assembly that the method is called from, or pass an assembly </param>
        </member>
        <member name="M:Serialization.UnitySerializer.RegisterSerializationAssembly(System.Reflection.Assembly)">
            <summary>
            Registers the serialization assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.ScanAllTypesForAttribute(Serialization.UnitySerializer.ScanTypeFunction,System.Reflection.Assembly)">
            <summary>
              Scan all of the types in an assembly for a particular attribute
            </summary>
            <param name="function"> The function to call </param>
            <param name="assembly"> The assembly to scan </param>
        </member>
        <member name="M:Serialization.UnitySerializer.GetPropertyInfo(System.Type)">
            <summary>
              Caches and returns property info for a type
            </summary>
            <param name="itm"> The type that should have its property info returned </param>
            <returns> An enumeration of PropertyInfo objects </returns>
            <remarks>
              It should be noted that the implementation converts the enumeration returned from reflection to an array as this more than double the speed of subsequent reads
            </remarks>
        </member>
        <member name="M:Serialization.UnitySerializer.GetProperties(System.Type)">
            <summary>
            Gets the properties.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.GetFields(System.Type)">
            <summary>
            Gets the fields.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable&lt;FieldInfo&gt;.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.AddPrivateType(System.Type)">
            <summary>
            Adds the type of the private.
            </summary>
            <param name="tp">The tp.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.GetFieldInfo(System.Type)">
            <summary>
              Caches and returns field info for a type
            </summary>
            <param name="itm"> The type that should have its field info returned </param>
            <returns> An enumeration of FieldInfo objects </returns>
            <remarks>
              It should be noted that the implementation converts the enumeration returned from reflection to an array as this more than double the speed of subsequent reads
            </remarks>
        </member>
        <member name="M:Serialization.UnitySerializer.GetPropertyDefinitionId(System.String)">
            <summary>
              Returns a token that represents the name of the property
            </summary>
            <param name="name"> The name for which to return a token </param>
            <returns> A 2 byte token representing the name </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.Deserialize(Serialization.IStorage)">
            <summary>
            Deserializes the specified storage.
            </summary>
            <param name="storage">The storage.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.Deserialize(System.IO.Stream)">
            <summary>
              Deserializes from a stream, potentially into an existing instance
            </summary>
            <param name="inputStream"> Stream to deserialize from </param>
            <param name="instance"> Instance to use </param>
            <returns> </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.Deserialize(System.IO.Stream,System.Object)">
            <summary>
            Deserializes the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.Deserialize(System.Byte[])">
            <summary>
              Convert a previously serialized object from a byte array
              back into a .NET object
            </summary>
            <param name="bytes"> The data stream for the object </param>
            <returns> The rehydrated object represented by the data supplied </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeInto(System.Byte[],System.Object)">
            <summary>
              Convert a previously serialized object from a byte array
              back into a .NET object
            </summary>
            <param name="bytes"> The data stream for the object </param>
            <returns> The rehydrated object represented by the data supplied </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.CreateStacks">
            <summary>
              Creates a set of stacks on the current thread
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.Serialize(System.Object,Serialization.IStorage)">
            <summary>
            Serializes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="storage">The storage.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.Serialize(System.Object,Serialization.IStorage,System.Boolean)">
            <summary>
            Serializes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="storage">The storage.</param>
            <param name="forDeserializeInto">if set to <c>true</c> [for deserialize into].</param>
        </member>
        <member name="M:Serialization.UnitySerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.Serialize(System.Object,System.IO.Stream,System.Boolean)">
            <summary>
            Serializes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="outputStream">The output stream.</param>
            <param name="forDeserializeInto">if set to <c>true</c> [for deserialize into].</param>
        </member>
        <member name="M:Serialization.UnitySerializer.Serialize(System.Object)">
            <summary>
              Serialize an object into an array of bytes
            </summary>
            <param name="item"> The object to serialize </param>
            <returns> A byte array representation of the item </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.SerializeForDeserializeInto(System.Object)">
            <summary>
            Serializes for deserialize into.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Serialization.UnitySerializer.Serialize(System.Object,System.Boolean)">
            <summary>
              Serialize an object into an array of bytes
            </summary>
            <param name="item"> The object to serialize </param>
            <param name="makeVerbose"> Whether the object should be serialized for forwards compatibility </param>
            <returns> A byte array representation of the item </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.IsSimpleType(System.Type)">
            <summary>
              Return whether the type specified is a simple type that can be serialized fast
            </summary>
            <param name="tp"> The type to check </param>
            <returns> True if the type is a simple one and can be serialized directly </returns>
        </member>
        <member name="F:Serialization.UnitySerializer.currentlySerializingObject">
            <summary>
            The currently serializing object
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.CreateObject(System.Type)">
            <summary>
              Create an instance of a type
            </summary>
            <param name="itemType"> The type to construct </param>
            <returns> </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.DummyAction">
            <summary>
            Dummies the action.
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.GetTypeId(System.Type)">
            <summary>
              Logs a type and returns a unique token for it
            </summary>
            <param name="tp"> The type to retrieve a token for </param>
            <returns> A 2 byte token representing the type </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.UpdateEntryWithName(Serialization.Entry)">
            <summary>
              Gets a property setter and a standard default type for an entry
            </summary>
            <param name="entry"> </param>
        </member>
        <member name="T:Serialization.UnitySerializer.Nuller">
            <summary>
            Class Nuller.
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.TypePusher.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.UnitySerializer.TypePusher"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Serialization.UnitySerializer.TypePusher.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Serialization.UnitySerializer.GetData">
            <summary>
            Delegate GetData
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:Serialization.UnitySerializer.DeserializingObject">
            <summary>
            The deserializing object
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeObject(Serialization.Entry,Serialization.IStorage)">
            <summary>
              Deserializes an object or primitive from the stream
            </summary>
            <param name="entry"> </param>
            <param name="storage"> </param>
            <returns> The value read from the file </returns>
            <remarks>
              The function is supplied with the type of the property that the object was stored in (if known) this enables
              a compact format where types only have to be specified if they differ from the expected one
            </remarks>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeArray(System.Type,Serialization.IStorage,System.Int32,System.Int32)">
            <summary>
              Deserializes an array of values
            </summary>
            <param name="itemType"> The type of the array </param>
            <param name="storage"> </param>
            <param name="count"> </param>
            <returns> The deserialized array </returns>
            <remarks>
              This routine optimizes for arrays of primitives and bytes
            </remarks>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeMultiDimensionArray(System.Type,Serialization.IStorage,System.Int32)">
            <summary>
              Deserializes a multi-dimensional array of values
            </summary>
            <param name="itemType"> The type of the array </param>
            <param name="storage"> </param>
            <param name="objectID"> </param>
            <returns> The deserialized array </returns>
            <remarks>
              This routine deserializes values serialized on a 'row by row' basis, and
              calls into DeserializeArray to do this
            </remarks>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeDictionary(System.Collections.IDictionary,System.Type,Serialization.IStorage)">
            <summary>
              Deserializes a dictionary from storage, handles generic types with storage optimization
            </summary>
            <param name="o"> The newly created dictionary </param>
            <param name="itemType"> The type of the dictionary </param>
            <param name="storage"> </param>
            <returns> The dictionary object updated with the values from storage </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeList(System.Collections.IList,System.Type,Serialization.IStorage)">
            <summary>
              Deserialize a list from the data stream
            </summary>
            <param name="o"> The newly created list </param>
            <param name="itemType"> The type of the list </param>
            <param name="storage"> </param>
            <returns> The list updated with values from the stream </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeObjectAndProperties(System.Object,System.Type,Serialization.IStorage)">
            <summary>
              Deserializes a class based object that is not a collection, looks for both public properties and fields
            </summary>
            <param name="o"> The object being deserialized </param>
            <param name="itemType"> The type of the object </param>
            <param name="storage"> </param>
            <returns> The object updated with values from the stream </returns>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeProperties(Serialization.IStorage,System.Type,System.Object)">
            <summary>
              Deserializes the properties of an object from the stream
            </summary>
            <param name="storage"> </param>
            <param name="itemType"> The type of the object </param>
            <param name="o"> The object to deserialize </param>
        </member>
        <member name="M:Serialization.UnitySerializer.DeserializeFields(Serialization.IStorage,System.Type,System.Object)">
            <summary>
              Deserializes the fields of an object from the stream
            </summary>
            <param name="storage"> </param>
            <param name="itemType"> The type of the object </param>
            <param name="o"> The object to deserialize </param>
        </member>
        <member name="T:Serialization.UnitySerializer.DeferredSetter">
            <summary>
            Class DeferredSetter.
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.DeferredSetter.priority">
            <summary>
            The priority
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.DeferredSetter.deferredRetrievalFunction">
            <summary>
            The deferred retrieval function
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.DeferredSetter.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.DeferredSetter.#ctor(Serialization.UnitySerializer.GetData)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.UnitySerializer.DeferredSetter"/> class.
            </summary>
            <param name="retrievalFunction">The retrieval function.</param>
        </member>
        <member name="T:Serialization.UnitySerializer.EntryConfiguration">
            <summary>
              Stores configurations for entries
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.EntryConfiguration.Setter">
            <summary>
            The setter
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.EntryConfiguration.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.KnownTypesStackEntry.knownTypesList">
            <summary>
            The known types list
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.KnownTypesStackEntry.knownTypesLookup">
            <summary>
            The known types lookup
            </summary>
        </member>
        <member name="T:Serialization.UnitySerializer.MissingConstructorException">
            <summary>
            Class MissingConstructorException.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Serialization.UnitySerializer.MissingConstructorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.UnitySerializer.MissingConstructorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Serialization.UnitySerializer.ReadAValue">
            <summary>
            Delegate ReadAValue
            </summary>
            <param name="reader">The reader.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:Serialization.UnitySerializer.Readers">
            <summary>
            The readers
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.WriteValue(System.IO.BinaryWriter,System.Object)">
            <summary>
              Write a basic untyped value
            </summary>
            <param name="writer"> The writer to commit byte to </param>
            <param name="value"> The value to write </param>
        </member>
        <member name="M:Serialization.UnitySerializer.ReadValue(System.IO.BinaryReader,System.Type)">
            <summary>
              Read a basic value from the stream
            </summary>
            <param name="reader"> The reader with the stream </param>
            <param name="tp"> The type to read </param>
            <returns> The hydrated value </returns>
        </member>
        <member name="T:Serialization.UnitySerializer.ObjectMappingEventArgs">
            <summary>
              Arguments for object creation event
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.ObjectMappingEventArgs.Instance">
            <summary>
              Supply a type to use instead
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.ObjectMappingEventArgs.TypeToConstruct">
            <summary>
              The type that cannot be
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.PropertyNameStackEntry.propertyList">
            <summary>
            The property list
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.PropertyNameStackEntry.propertyLookup">
            <summary>
            The property lookup
            </summary>
        </member>
        <member name="T:Serialization.UnitySerializer.SerializationScope">
            <summary>
            Class SerializationScope.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Serialization.UnitySerializer.SerializationScope.IsInScope">
            <summary>
            Gets a value indicating whether this instance is in scope.
            </summary>
            <value><c>true</c> if this instance is in scope; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Serialization.UnitySerializer.SerializationScope.IsPrimaryScope">
            <summary>
            Gets a value indicating whether this instance is primary scope.
            </summary>
            <value><c>true</c> if this instance is primary scope; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Serialization.UnitySerializer.SerializationScope.SetPrimaryScope">
            <summary>
            Sets the primary scope.
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.SerializationScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.UnitySerializer.SerializationScope"/> class.
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.SerializationScope.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Serialization.UnitySerializer.SerializationSplitScope">
            <summary>
            Class SerializationSplitScope.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Serialization.UnitySerializer.SerializationSplitScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serialization.UnitySerializer.SerializationSplitScope"/> class.
            </summary>
        </member>
        <member name="M:Serialization.UnitySerializer.SerializationSplitScope.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Serialization.UnitySerializer.TypeMappingEventArgs">
            <summary>
              Arguments for a missing type event
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.TypeMappingEventArgs.TypeName">
            <summary>
              The missing types name
            </summary>
        </member>
        <member name="F:Serialization.UnitySerializer.TypeMappingEventArgs.UseType">
            <summary>
              Supply a type to use instead
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.mode">
            <summary>
            The current decode mode
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size in bytes to use when deflating (minimum value 512)
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.AESAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given <paramref name="password"/>.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializeAESPassword(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Initializes encryption keys based on given password.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name ="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count">The number of bytes</paramref> to skip is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor(ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>
            </summary>
            <param name="events">The <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">events</see> to use during operations.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"></see> active when creating Zip files.
            </summary>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.FastZip.EntryFactory"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.UseZip64">
            <summary>
            Gets or sets the setting for <see cref="P:ICSharpCode.SharpZipLib.Zip.FastZip.UseZip64">Zip64 handling when writing.</see>
            </summary>
            <remarks>
            The default value is dynamic which is not backwards compatible with old
            programs and can cause problems with XP's built in compression which cant
            read Zip64 archives. However it does avoid the situation were a large file
            is added and cannot be completed correctly.
            NOTE: Setting the size for entries before they are added is the best solution!
            By default the EntryFactory used by FastZip will set fhe file size.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.RestoreAttributesOnExtract">
            <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
            <remarks>The <paramref name="outputStream"/> is closed after creation.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.IO.Stream,System.String,ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Extract the contents of a zip file held in a stream.
            </summary>
            <param name="inputStream">The seekable input stream containing the zip to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
            <param name="isStreamOwner">Flag indicating whether the inputStream will be closed by this method.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Now supported by #Zip.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RC4 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set indicates strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:ICSharpCode.SharpZipLib.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory">
            <summary>
            Class ZipEntryFactory.
            </summary>
            <seealso cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory" />
            <summary>
            Basic implementation of <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"></see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or
            using the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.
            The <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime"/> property can also be used to set this value.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">time setting</see> to use when creating <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">Zip entries</see>.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/> to be used when creating new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> values.
            </summary>
            <remarks>
            Setting this property to null will cause a default <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">name transform</see> to be used.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.Setting">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.Setting"/> is set to <see cref="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes are to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.IsUnicodeText">
            <summary>
            Get set a value indicating wether unidoce text should be set on.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> from a name.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData">
            <summary>
            Class representing extended unix date time values.
            </summary>
            <summary>
            Class representing extended unix date time values.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags">
            <summary>
            Flags indicate which values are included in this instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags.ModificationTime">
            <summary>
            The modification time is included
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags.AccessTime">
            <summary>
            The access time is included
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags.CreateTime">
            <summary>
            The create time is included.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.TagID">
            <summary>
            Get the ID
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.ModificationTime">
            <summary>
            Get /set the Modification Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.AccessTime">
            <summary>
            Get / set the Access Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.CreateTime">
            <summary>
            Get / Set the Create Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Include">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress">
            <summary>
            Delegate to invoke during processing of files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has been completed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure"> file failure handler delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">ProcessFile delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnCompletedFile(System.String)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.CompletedFile"/> delegate
            </summary>
            <param name="file">The file whose processing has been completed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files as determined by the current filter.</param>
            <returns>A <see cref="T:System.Boolean"/> of true if the operation should continue; false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProgressInterval">
            <summary>
            The minimum timespan between <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress"/> events.
            </summary>
            <value>The minimum period of time between <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress"/> events.</value>
            <seealso cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress"/>
            <remarks>The default interval is three seconds.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system if the file exists.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system for this directory if it exists.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform">
            <summary>
            WindowsNameTransform transforms <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> names to windows compatible ones.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform"/>
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.BaseDirectory">
            <summary>
            Gets or sets a value containing the target directory to prefix values with.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.TrimIncomingPaths">
            <summary>
            Gets or sets a value indicating wether paths on incoming values should be removed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a Zip directory name to a windows directory name.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.TransformFile(System.String)">
            <summary>
            Transform a Zip format file name to a windows style one.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a windows filename as extracted from a Zip archive.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>The filename isnt a true windows path in some fundamental ways like no absolute paths, no rooted paths etc.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.#cctor">
            <summary>
            Initialise static class information.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to make valid</param>
            <param name="replacement">The replacement character to use for any invalid characters.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.Replacement">
            <summary>
            Gets or set the character to replace invalid characters during transformations.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.MaxPath">
            <summary>
             The maximum windows path name permitted.
            </summary>
            <remarks>This may not valid for all windows systems - CE?, etc but I cant find the equivalent in the CLR.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress"/>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_AES">
            <summary>
            Version indicating AES encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions (4.5 or higher)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable <see cref="T:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">general purpose bits flags</see></param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or > 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            <br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-10: Unused or reserved<br/>
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br/>
            Bit 12-15: Unused or reserved<br/>
            </remarks>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText"></seealso>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
            <remarks>This is only valid when the entry is part of a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"></see></remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating whether this entry can be decompressed by the library.
            </summary>
            <remarks>This is based on the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value of true if Zip64 extensions have been forced on; false if not.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value of true if a local header requires Zip64 extensions; false if not.</value>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime value.
            </summary>
            <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <remarks>
            The <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"/> class, or <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
            <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethodForHeader">
            <summary>
            Gets the compression method for outputting to the local or central header.
            Returns same value as CompressionMethod except when AES encrypting, which
            places 99 in the method and places the real method in the extra data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESKeySize">
            <summary>
            For AES encrypted files returns or sets the number of bits of encryption (128, 192 or 256).
            When setting, only 0 (off), 128 or 256 is supported.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESEncryptionStrength">
            <summary>
            AES Encryption strength for storage in extra data in entry header.
            1 is 128 bit, 2 is 192 bit, 3 is 256 bit.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESSaltLen">
            <summary>
            Returns the length of the salt, in bytes 
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESOverheadSize">
            <summary>
            Number of extra bytes required to hold the AES Header fields (Salt, Pwd verify, AuthCode)
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> class.
            The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
            <returns>An <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets a string representation of this ZipEntry.
            </summary>
            <returns>A readable textual representation of this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported(ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">The name to clean</param>
            <returns>The 'cleaned' name.</returns>
            <remarks>
            The <seealso cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">
            <summary>
            ExtraData tagged value interface.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ITaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the contents of this instance from the data passed.
            </summary>
            <param name="data">The data to extract contents from.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ITaggedData.GetData">
            <summary>
            Get the data representing this instance.
            </summary>
            <returns>Returns the data for this instance.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.RawTaggedData">
            <summary>
            A raw binary tagged value
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.RawTaggedData.#ctor(System.Int16)">
            <summary>
            Initialise a new instance.
            </summary>
            <param name="tag">The tag ID.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.RawTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="offset">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.RawTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.RawTaggedData.Data">
            <summary>
            Get /set the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.RawTaggedData._tag">
            <summary>
            The tag ID for this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.NTTaggedData">
            <summary>
            Class handling NT date time values.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.NTTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.NTTaggedData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.LastModificationTime">
            <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.CreateTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">create time</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.LastAccessTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ITaggedDataFactory">
            <summary>
            A factory that creates <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">tagged data</see> instances.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ITaggedDataFactory.Create(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get data for a specific tag value.
            </summary>
            <param name="tag">The tag ID to find.</param>
            <param name="data">The data to search.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
            <returns>The located <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">value found</see>, or null if not found.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipExtraData">
            
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetData(System.Int16)">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only valid if <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially the result will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadInt"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort"/> and <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(ICSharpCode.SharpZipLib.Zip.ITaggedData)">
            <summary>
            Add a new entry to extra data.
            </summary>
            <param name="taggedData">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData"/> value to add.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(ICSharpCode.SharpZipLib.Zip.ITaggedData)"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Gets the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Gets or sets the key value
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestStatus">
            <summary>
            Status returned returned by <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.TestStatus.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:ICSharpCode.SharpZipLib.Zip.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.File">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICSharpCode.SharpZipLib.Zip.TestStrategy,ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <param name="name">The name of the file to open.</param>
            <exception cref="T:System.ArgumentNullException">The argument supplied is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileStream"/> to read archive data from.</param>
            <exception cref="T:System.ArgumentNullException">The supplied argument is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read archive data from.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The stream doesn't contain a valid zip archive.<br/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.IO.Stream">stream</see> doesnt support seeking.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.IO.Stream">stream</see> argument is null.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"></paramref> is null</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outStream"> is null</paramref></exception>
            <exception cref="T:System.ArgumentException"><paramref name="outStream"> doesnt support writing.</paramref></exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Gets an enumerator for the Zip entries in this Zip file.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> for this archive.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Gets an input stream for reading the given zip entry data in an uncompressed form.
            Normally the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> should be an entry returned by GetEntry().
            </summary>
            <param name="entry">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to obtain a data <see cref="T:System.IO.Stream"/> for</param>
            <returns>An input <see cref="T:System.IO.Stream"/> containing data for this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/></returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input <see cref="T:System.IO.Stream"/> containing data for this <paramref name="entryIndex"/>
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICSharpCode.SharpZipLib.Zip.TestStrategy,ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">The object has already been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry,ICSharpCode.SharpZipLib.Zip.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryFactory">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"/> used to generate <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> values
            during updates.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage,ICSharpCode.SharpZipLib.Zip.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">One of the arguments provided is null</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)"/>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Compression method is not supported.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <exception cref="T:System.ArgumentNullException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The compression method is not supported.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="entryName">The name to use for the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> on the Zip file created.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Add a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Delete(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Delete a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetDescriptorSize(ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetOutputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.  Null if none exists.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.OffsetBasedSize">
            <summary>
            Get/set the size calculated by offset.
            Specifically, the difference between this and next entry's starting offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.LocateEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.IsSourceString">
            <summary>
            Get a value indicating the original source of data for this instance.
            True if the source was a string; false if the source was binary data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.op_Implicit(ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="zipString">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The textual equivalent for the input value.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipEntryEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator">enumerator</see> for <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">Zip entries</see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream"/> is an <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="zipFile">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> containing the underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>false</value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>true</value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>true.</value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <value></value>
            <returns>A value that determines whether the current stream can time out.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IStaticDataSource.GetSource">
            <summary>
            Get a source of data by creating a new stream.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource">
            <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource.GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/> for use with files stored on disk.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource"/> for files stored on disk.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource.GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to open for direct update.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile,ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="current"/> stream is not null this is used as is.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The original source stream</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="stream"/> passed is not null this is used;
            otherwise a new <see cref="T:System.IO.MemoryStream"/> is returned.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DescriptorData">
            <summary>
            Holds data pertinent to a data descriptor.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.DescriptorData.CompressedSize">
            <summary>
            Get /set the compressed size of data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.DescriptorData.Size">
            <summary>
            Get / set the uncompressed size of data
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.DescriptorData.Crc">
            <summary>
            Get /set the crc value.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            The underlying stream is closed only if <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner"/> is true.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Locates a block with the desired <paramref name="signature"/>.
            </summary>
            <param name="signature">The signature to find.</param>
            <param name="endLocation">Location, marking the end of block.</param>
            <param name="minimumBlockSize">Minimum size of the block.</param>
            <param name="maximumVariableData">The maximum variable data.</param>
            <returns>Eeturns the offset of the first byte after the signature; -1 if not found</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteDataDescriptor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Write a data descriptor.
            </summary>
            <param name="entry">The entry to write a descriptor for.</param>
            <returns>Returns the number of descriptor bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadDataDescriptor(System.Boolean,ICSharpCode.SharpZipLib.Zip.DescriptorData)">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
            <param name="zip64">if set to <c>true</c> [zip64].</param>
            <param name="data">The data to fill in.</param>
            <returns>Returns the number of bytes read in the descriptor.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			const int size = 2048;
             			byte[] data = new byte[2048];
             			
             			while ((theEntry = s.GetNextEntry()) != null) {
                             if ( entry.IsFile ) {
             				    Console.Write("Show contents (y/n) ?");
             				    if (Console.ReadLine() == "y") {
             				    	while (true) {
             				    		size = s.Read(data, 0, data.Length);
             				    		if (size > 0) {
             				    			Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             				    		} else {
             				    			break;
             				    		}
             				    	}
             				    }
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadDataHandler">
            <summary>
            Delegate for reading bytes from a stream. 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
            <value>A password for all encrypted <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entries </see> in this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream"/></value>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from the front of paths if found.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a windows directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
            <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to force valid</param>
            <param name="replacement">The replacement character to use.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Core;
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">The output stream to which the archive contents are written.</param>
            <param name="bufferSize">Size of the buffer to use.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets a flag value of true if the central header has been added for this archive; false if it has not been added.
            </summary>
            <remarks>No further entries can be added once this has been done.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment text for the entire archive.
            </param>
            <exception name ="ArgumentOutOfRangeException">
            The converted comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  The new level will be activated
            immediately.
            </summary>
            <param name="level">The new compression level (1 to 9).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflater compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
            <remarks>Older archivers may not understand Zip64 extensions.
            If backwards compatability is an issue be careful when adding <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">entries</see> to an archive.
            Setting this property to off is workable but less desirable as in those circumstances adding a file
            larger then 4GB will fail.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">Archive size is invalid</exception>
            <exception cref="T:System.InvalidOperationException">No entry is active.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.entries">
            <summary>
            The entries for the archive.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.crc">
            <summary>
            Used to track the crc of data added to entries.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.curEntry">
            <summary>
            The current entry being added.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.zipComment">
            <summary>
            Comment for the entire archive recorded in central header.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.patchEntryHeader">
            <summary>
            Flag indicating that header patching is required for the current entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.crcPatchPos">
            <summary>
            Position to patch crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.sizePatchPos">
            <summary>
            Position to patch size.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2">
            <summary>
            An example class to demonstrate compression and decompression of BZip2 streams.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decompress the <paramref name="inStream">input</paramref> writing 
            uncompressed data to the <paramref name="outStream">output stream</paramref>
            </summary>
            <param name="inStream">The readable stream containing data to decompress.</param>
            <param name="outStream">The output stream to receive the decompressed data.</param>
            <param name="isStreamOwner">Both streams are closed on completion if true.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Compress the <paramref name="inStream">input stream</paramref> sending 
            result data to <paramref name="outStream">output stream</paramref>
            </summary>
            <param name="inStream">The readable stream to compress.</param>
            <param name="outStream">The output stream to receive the compressed data.</param>
            <param name="isStreamOwner">Both streams are closed on completion if true.</param>
            <param name="level">Block size acts as compression level (1 to 9) with 1 giving 
            the lowest compression and 9 the highest.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RandomNumbers">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.BaseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compression but uses the most memory.
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MaximumAlphaSize">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MaximumCodeLength">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RunA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RunB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.GroupCount">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.GroupSize">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.NumberOfIterations">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MaximumSelectors">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.OvershootBytes">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Exception">
            <summary>
            BZip2Exception represents exceptions specific to Bzip2 algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initialise an instance of BZip2Exception
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position.
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <param name="value">The new length for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="buffer">The buffer to source data from.</param>
            <param name="offset">The offset to start obtaining data from.</param>
            <param name="count">The number of bytes of data to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advances the read position by one byte.
            </summary>
            <param name="buffer">Array of bytes to store values in</param>
            <param name="offset">Offset in array to begin storing data</param>
            <param name="count">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the stream, releasing any associated resources.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="stream">The stream to write BZip data onto.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream"></see> 
            for the specified stream, using the given blocksize.
            </summary>
            <param name="stream">The stream to write compressed data to.</param>
            <param name="blockSize">The block size to use.</param>
            <remarks>
            Valid block sizes are in the range 1..9, with 1 giving 
            the lowest compression and 9 the highest.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations 
            are performed when the garbage collector reclaims the BZip2OutputStream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to the offset from which to being seeking.</param>
            <param name="origin">The reference point from which to begin seeking.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
            <returns>The byte read cast to an int; -1 if end of stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset in the buffer to start storing data at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read. This might be less than the number of bytes
            requested if that number of bytes are not currently available, or zero 
            if the end of the stream is reached.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.WriteRun">
            <summary>
            Get the number of bytes written to output.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.BytesWritten">
            <summary>
            Get the number of bytes written to the output.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>
            <param name="buffer">The buffer containing data to update the crc with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.Name">
            <summary>
            The file or directory name for this event.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProgressEventArgs">
            <summary>
            Event arguments during processing of a single file or directory.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name if known.</param>
            <param name="processed">The number of bytes processed so far</param>
            <param name="target">The total number of bytes to process, 0 if not known</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Name">
            <summary>
            The name for this event if known.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating wether scanning should continue or not.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.PercentComplete">
            <summary>
            Get a percentage representing how much of the <see cref="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Target"></see> has been processed
            </summary>
            <value>0.0 to 100.0 percent; 0 if target is not known.</value>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Processed">
            <summary>
            The number of bytes processed so far
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Target">
            <summary>
            The number of bytes to process.
            </summary>
            <remarks>Target may be 0 or negative if the value isnt known.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler">
            <summary>
            Delegate invoked before starting to process a directory.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessFileHandler">
            <summary>
            Delegate invoked before starting to process a file.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProgressHandler">
            <summary>
            Delegate invoked during processing of a file or directory
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.CompletedFileHandler">
            <summary>
            Delegate invoked when a file has been completely processed.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileFailureHandler">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter"> directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter">filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter,ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter">filter</see>  to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter">filter</see>  to apply.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has finished.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnCompleteFile(System.String)">
            <summary>
            Raise the complete file event
            </summary>
            <param name="file">The file name</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives, or vice versa.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'.
            To include a semi-colon it may be quoted as in \;. Each expression can be prefixed by a plus '+' sign or
            a minus '-' sign to denote the expression is intended to include or exclude names.
            If neither a plus or minus sign is found include is the default.
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.SplitQuoted(System.String)">
            <summary>
            Split a string into its component pieces
            </summary>
            <param name="original">The original string</param>
            <returns>Returns an array of <see cref="T:System.String"/> values containing the individual filter elements.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter">filter</see> expression to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
            <remarks><see cref="M:System.IO.Path.GetFullPath(System.String)"/> is used to get the full path before matching.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter">
            <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
            <remarks>Provides an example of how to customise filtering.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The <see paramref="fileName"/> doesnt exist</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinSize">
            <summary>
            Get/set the minimum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero; greater than <see cref="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxSize"/></exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxSize">
            <summary>
            Get/set the maximum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is <see cref="F:System.Int64.MaxValue"/></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero or less than <see cref="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinSize"/></exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinDate">
            <summary>
            Get/set the minimum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxDate">
            <summary>
            Get/set the maximum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter">
            <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
            <remarks>A sample showing how filters might be extended.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
            <exception cref="T:System.ArgumentNullException">Required parameter is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> and or <paramref name="count"/> are invalid.</exception>
            <exception cref="T:System.IO.EndOfStreamException">End of stream is encountered before all the data has been read.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],ICSharpCode.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:ICSharpCode.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],ICSharpCode.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String,System.Int64)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:ICSharpCode.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <param name="fixedTarget">A predetermined fixed target value to use with progress updates.
            If the value is negative the target is calculated by looking at the stream.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.WindowsPathUtils">
            <summary>
            WindowsPathUtils provides simple utilities for handling windows paths.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.WindowsPathUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Core.WindowsPathUtils"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.WindowsPathUtils.DropPathRoot(System.String)">
            <summary>
            Remove any path root present in the path
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path information.</param>
            <returns>The path with the root removed if it was present; path otherwise.</returns>
            <remarks>Unlike the <see cref="T:System.IO.Path"/> class the path isnt otherwise checked for validity.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.ZipAESStream">
            <summary>
            Encrypts and decrypts AES ZIP
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Encryption.ZipAESTransform,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream on which to perform the cryptographic transformation.</param>
            <param name="transform">Instance of ZipAESTransform</param>
            <param name="mode">Read or Write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current CryptoStream into buffer,
            and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform">
            <summary>
            Transforms stream using AES in CTR mode
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.#ctor(System.String,System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Constructor.
             </summary>
             <param name="key">Password string</param>
             <param name="saltBytes">Random bytes, length depends on encryption strength.
             128 bits = 8 bytes, 192 bits = 12 bytes, 256 bits = 16 bytes.</param>
             <param name="blockSize">The encryption strength, in bytes eg 16 for 128 bits.</param>
             <param name="writeMode">True when creating a zip, false when reading. For the AuthCode.</param>
            
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Implement the ICryptoTransform method.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.PwdVerifier">
            <summary>
            Returns the 2 byte password verifier
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.GetAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be checked or appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipConstants.#ctor">
            <summary>
            Initialise default instance.
            </summary>
            <remarks>Constructor is private to prevent instances being created.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Core;
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		using (Stream inStream = new GZipInputStream(File.OpenRead(args[0])))
            		using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            			byte[] buffer = new byte[4096];
            			StreamUtils.Copy(inStream, outStream, buffer);
            		}
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.readGZIPHeader">
            <summary>
            Flag to indicate if we've read the GZIP header yet for the current member (block of compressed data).
            This is tracked per-block as the file is parsed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GZipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buffer">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of uncompressed bytes to be read
            </param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.GZip;
             using ICSharpCode.SharpZipLib.Core;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             			using (Stream s = new GZipOutputStream(File.Create(args[0] + ".gz")))
             			using (FileStream fs = File.OpenRead(args[0])) {
             				byte[] writeData = new byte[4096];
             				Streamutils.Copy(s, fs, writeData);
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <param name="level">The compression level to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Offset of first byte in buf to write</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.LZW.LzwConstants">
            <summary>
            This class contains constants used for LZW
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.MAGIC">
            <summary>
            Magic number found at start of LZW header: 0x1f 0x9d
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.MAX_BITS">
            <summary>
            Maximum number of bits per code
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.BIT_MASK">
            <summary>
            Mask for 'number of compression bits'
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.EXTENDED_MASK">
            <summary>
            Indicates the presence of a fourth header byte
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.RESERVED_MASK">
            <summary>
            Reserved bits
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.BLOCK_MODE_MASK">
            <summary>
            Block compression: if table is full and compression rate is dropping,
            clear the dictionary.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.HDR_SIZE">
            <summary>
            LZW file header size (in bytes)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwConstants.INIT_BITS">
            <summary>
            Initial number of bits per code
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.LZW.LzwException">
            <summary>
            LzwException represents a LZW specific exception
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwException.#ctor">
            <summary>
            Initialise a new instance of LzwException
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwException.#ctor(System.String)">
            <summary>
            Initialise a new instance of LzwException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.LZW.LzwException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.LZW.LzwInputStream">
             <summary>
             This filter stream is used to decompress a LZW format stream.
             Specifically, a stream that uses the LZC compression method.
             This file format is usually associated with the .Z file extension.
            
             See http://en.wikipedia.org/wiki/Compress
             See http://wiki.wxwidgets.org/Development:_Z_File_Format
             
             The file header consists of 3 (or optionally 4) bytes. The first two bytes
             contain the magic marker "0x1f 0x9d", followed by a byte of flags.
            
             Based on Java code by Ronald Tschalar, which in turn was based on the unlzw.c
             code in the gzip package.
             </summary>
             <example> This sample shows how to unzip a compressed file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Core;
             using ICSharpCode.SharpZipLib.LZW;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
            			using (Stream inStream = new LzwInputStream(File.OpenRead(args[0])))
            			using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            				byte[] buffer = new byte[4096];
            				StreamUtils.Copy(inStream, outStream, buffer);
                                     // OR
                                     inStream.Read(buffer, 0, buffer.Length);
                                     // now do something with the buffer
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a LzwInputStream
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream LZW format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.ReadByte">
            <summary>
            See <see cref="M:System.IO.Stream.ReadByte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read. Zero signals the end of stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.ResetBuf(System.Int32)">
            <summary>
            Moves the unread data in the buffer to the beginning and resets
            the pointers.
            </summary>
            <param name="bitPosition"></param>
            <returns></returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.LZW.LzwInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.LZW.LzwInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.LZW.LzwInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="information"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
            <param name="message">Message describing the exception cause.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of InvalidHeaderException
            </summary>
            <param name="message">Message describing the problem.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.CurrentRecord and TarBuffer.CurrentBlock
            properties, this would be rather trivial.
            </summary>
        </member>
        <member name="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.OnProgressMessageEvent(ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">The <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry">TarEntry</see> for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a default <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarInputStream)">
            <summary>
            Initalise a TarArchive for input.
            </summary>
            <param name="stream">The <see cref="T:ICSharpCode.SharpZipLib.Tar.TarInputStream"/> to use for input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarOutputStream)">
            <summary>
            Initialise a TarArchive for output.
            </summary>
            <param name="stream">The <see cref="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream"/> to use for output.</param> 
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
            <param name="inputStream">The stream to retrieve archive data from.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/> suitable for reading from.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">A stream containing the tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/> suitable for reading.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to write to</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive">tar archive</see> for writing.
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepExistingFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.AsciiTranslate">
            <summary>
            Get/set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag.
            </summary>
            <param name= "translateAsciiFiles">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information is based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides"/> is set to true by this call.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Tar archives are composed of
            a series of RECORDS each containing a number of BLOCKS.
            This allowed tar archives to match the IO characteristics of
            the physical device being used. Archives are expected
            to be properly "blocked".
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.IsStreamOwner">
            <summary>
            Sets the IsStreamOwner property on the underlying stream.
            Set this to false to prevent the Close of the TarArchive from closing the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destinationDirectory">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractEntry(System.String,ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to GetNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.GetNextEntry().
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntryCore(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the FileStream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Close">
            <summary>
            Closes the archive and releases any associated resources.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations are performed
            when the garbage collector reclaims the <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 blocks per record.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
            <value>The record size in bytes.
            This is equal to the <see cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor"/> multiplied by the <see cref="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize"/></value>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
            <returns>The record size in bytes.
            This is equal to the <see cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor"/> multiplied by the <see cref="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize"/></returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
            <value>This is the number of blocks in each record.</value>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
            <returns>The block factor; the number of blocks per record.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarBuffer"/> suitable for input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarBuffer"/> suitable for input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEndOfArchiveBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates the End of an Archive has been reached.
            End of archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.CurrentBlock">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <remarks>Block numbers are zero based values</remarks>
            <seealso cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.CurrentRecord">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buffer">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteFinalRecord">
            <summary>
            WriteFinalRecord writes the current record buffer to output any unwritten data is present.
            </summary>
            <remarks>Any trailing bytes are set to zero which is by definition correct behaviour
            for the end of a tar stream.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuffer">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name">name</paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
            <param name="name">The name to use for the entry</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name = "fileName">The file name that the entry represents.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>
            True if the entries are equal; false if not.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetHashCode">
            <summary>
            Derive a Hash value for the current <see cref="T:System.Object"/>
            </summary>
            <returns>A Hash code for the current <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDescendent(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "toTest">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetFileTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outBuffer">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="buffer">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.NameTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.	
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Clone">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarHeader"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outBuffer">output buffer for header information</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buffer"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buffer"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buffer">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buffer">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">
            the value to be converted to octal
            </param>
            <param name = "buffer">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">Value to be convert to octal</param>
            <param name = "buffer">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "value"></param>
            <param name = "buffer">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="offset">The offset relative to the origin to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to start seeking from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="buffer">The buffer containing bytes to write.</param>
            <param name="offset">The offset in the buffer of the frist byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The byte value to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            </summary>
            <returns>A byte cast to an int; -1 if the at the end of the stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="buffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="skipCount">
            The number of bytes to skip.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Return a value of true if marking is supported; false otherwise.
            </summary>
            <remarks>Currently marking is not supported, the return value is always false.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method <see cref="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)"/>, to allow
            the programmer to have their own <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/> subclass instantiated for the
            entries return from <see cref="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuffer">
            Buffer containing header information to create an an entry from.
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/> based on named
            </summary>
            <param name="name">The name to use for the entry</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
            <param name="fileName">The name of the file to retrieve details from.</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create an entry based on details in <paramref name="headerBuffer">header</paramref>
            </summary>			
            <param name="headerBuffer">The buffer containing entry details.</param>
            <returns>A new <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/></returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.readBuffer">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.tarBuffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.currentEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.inputStream">
            <summary>
            Stream used as the source of input data.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek to</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to store read bytes in.</param>
            <param name="offset">The index into the buffer to being storing bytes at.</param>
            <param name="count">The desired number of bytes to read.</param>
            <returns>The total number of bytes read, or zero if at the end of the stream.
            The number of bytes may be less than the <paramref name="count">count</paramref>
            requested if data is not avialable.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF block of nulls is written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            </summary>
            <remarks>This means that Finish() is called followed by calling the
            TarBuffer's Close().</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.IsEntryOpen">
            <summary>
            Get a value indicating wether an entry is open, requiring more data to be written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="value">
            The byte to be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "buffer">
            The buffer to write to the archive.
            </param>
            <param name = "offset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "count">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteEofBlock">
            <summary>
            Write an EOF (end of archive) block to the tar archive.
            An EOF block consists of all zeros.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemblyBufferLength">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.blockBuffer">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemblyBuffer">
            <summary>
            'Assembly' buffer used to assemble data before writing
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputDPADButton">
            <summary>
            Enum InputDPADButton
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Left_Up">
            <summary>
            The left up
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Right_Up">
            <summary>
            The right up
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Left_Down">
            <summary>
            The left down
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Right_Down">
            <summary>
            The right down
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADButton.Any">
            <summary>
            Any
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputTriggerButton">
            <summary>
            Enum InputTriggerButton
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputTriggerButton.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputTriggerButton.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputTriggerButton.Any">
            <summary>
            Any
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputTriggerAxis">
            <summary>
            Enum InputTriggerAxis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputTriggerAxis.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputTriggerAxis.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputDPADAxis">
            <summary>
            Enum InputDPADAxis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADAxis.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDPADAxis.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputDevice">
            <summary>
            Enum InputDevice
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDevice.KeyboardAndMouse">
            <summary>
            The keyboard and mouse
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputDevice.Joystick">
            <summary>
            The joystick
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputEventType">
            <summary>
            Enum InputEventType
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEventType.Axis">
            <summary>
            The axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEventType.Button">
            <summary>
            The button
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEventType.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputState">
            <summary>
            Enum InputState
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputState.Pressed">
            <summary>
            The pressed
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputState.Released">
            <summary>
            The released
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputState.Held">
            <summary>
            The held
            </summary>
        </member>
        <member name="T:TeamUtility.IO.MappingWizard">
            <summary>
            Class MappingWizard.
            </summary>
            <summary>
            Class MappingWizard.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:TeamUtility.IO.MappingWizard.ScanType">
            <summary>
            Enum ScanType
            </summary>
        </member>
        <member name="F:TeamUtility.IO.MappingWizard.ScanType.Button">
            <summary>
            The button
            </summary>
        </member>
        <member name="F:TeamUtility.IO.MappingWizard.ScanType.Axis">
            <summary>
            The axis
            </summary>
        </member>
        <member name="T:TeamUtility.IO.StandaloneInputModule">
            <summary>
            Class StandaloneInputModule.
            </summary>
            <summary>
            Class StandaloneInputModule.
            </summary>
            <seealso cref="T:UnityEngine.EventSystems.PointerInputModule" />
        </member>
        <member name="T:TeamUtility.IO.StandaloneInputModule.InputMode">
            <summary>
            Enum InputMode
            </summary>
        </member>
        <member name="F:TeamUtility.IO.StandaloneInputModule.InputMode.Mouse">
            <summary>
            The mouse
            </summary>
        </member>
        <member name="F:TeamUtility.IO.StandaloneInputModule.InputMode.Buttons">
            <summary>
            The buttons
            </summary>
        </member>
        <member name="F:TeamUtility.IO.StandaloneInputModule.VERSION">
            <summary>
            The version
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.StandaloneInputModule"/> class.
            </summary>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.inputMode">
            <summary>
            Gets the input mode.
            </summary>
            <value>The input mode.</value>
        </member>
        <member name="F:TeamUtility.IO.StandaloneInputModule.m_VerticalAxis">
            <summary>
            Name of the vertical axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="F:TeamUtility.IO.StandaloneInputModule.m_SubmitButton">
            <summary>
            Name of the submit button.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.StandaloneInputModule.m_CancelButton">
            <summary>
            Name of the submit button.
            </summary>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.allowActivationOnMobileDevice">
            <summary>
            Gets or sets a value indicating whether [allow activation on mobile device].
            </summary>
            <value><c>true</c> if [allow activation on mobile device]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.forceModuleActive">
            <summary>
            Gets or sets a value indicating whether [force module active].
            </summary>
            <value><c>true</c> if [force module active]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.inputActionsPerSecond">
            <summary>
            Gets or sets the input actions per second.
            </summary>
            <value>The input actions per second.</value>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.repeatDelay">
            <summary>
            Gets or sets the repeat delay.
            </summary>
            <value>The repeat delay.</value>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.horizontalAxis">
            <summary>
            Name of the horizontal axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.verticalAxis">
            <summary>
            Name of the vertical axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.submitButton">
            <summary>
            Gets or sets the submit button.
            </summary>
            <value>The submit button.</value>
        </member>
        <member name="P:TeamUtility.IO.StandaloneInputModule.cancelButton">
            <summary>
            Gets or sets the cancel button.
            </summary>
            <value>The cancel button.</value>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.UpdateModule">
            <summary>
            Updates the module.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.IsModuleSupported">
            <summary>
            Determines whether [is module supported].
            </summary>
            <returns><c>true</c> if [is module supported]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ShouldActivateModule">
            <summary>
            Shoulds the activate module.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ActivateModule">
            <summary>
            Activates the module.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.DeactivateModule">
            <summary>
            Deactivates the module.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ProcessTouchPress(UnityEngine.EventSystems.PointerEventData,System.Boolean,System.Boolean)">
            <summary>
            Processes the touch press.
            </summary>
            <param name="pointerEvent">The pointer event.</param>
            <param name="pressed">if set to <c>true</c> [pressed].</param>
            <param name="released">if set to <c>true</c> [released].</param>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.SendSubmitEventToSelectedObject">
            <summary>
            Process submit keys.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.SendMoveEventToSelectedObject">
            <summary>
            Process keyboard events.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ProcessMouseEvent">
            <summary>
            Processes the mouse event.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ForceAutoSelect">
            <summary>
            Forces the automatic select.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ProcessMouseEvent(System.Int32)">
            <summary>
            Process all mouse events.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.SendUpdateEventToSelectedObject">
            <summary>
            Sends the update event to selected object.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.StandaloneInputModule.ProcessMousePress(UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData)">
            <summary>
            Process the current mouse press.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputType">
            <summary>
            Enum InputType
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.Button">
            <summary>
            The button
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.MouseAxis">
            <summary>
            The mouse axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.DigitalAxis">
            <summary>
            The digital axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.AnalogAxis">
            <summary>
            The analog axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.RemoteAxis">
            <summary>
            The remote axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.RemoteButton">
            <summary>
            The remote button
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputType.AnalogButton">
            <summary>
            The analog button
            </summary>
        </member>
        <member name="T:TeamUtility.IO.PlayerID">
            <summary>
            Enum PlayerID
            </summary>
        </member>
        <member name="F:TeamUtility.IO.PlayerID.One">
            <summary>
            The one
            </summary>
        </member>
        <member name="F:TeamUtility.IO.PlayerID.Two">
            <summary>
            The two
            </summary>
        </member>
        <member name="F:TeamUtility.IO.PlayerID.Three">
            <summary>
            The three
            </summary>
        </member>
        <member name="F:TeamUtility.IO.PlayerID.Four">
            <summary>
            The four
            </summary>
        </member>
        <member name="T:TeamUtility.IO.ScanFlags">
            <summary>
            Enum ScanFlags
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanFlags.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanFlags.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanFlags.JoystickButton">
            <summary>
            The joystick button
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanFlags.JoystickAxis">
            <summary>
            The joystick axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanFlags.MouseAxis">
            <summary>
            The mouse axis
            </summary>
        </member>
        <member name="T:TeamUtility.IO.AdvancedInputEditor">
            <summary>
            Class AdvancedInputEditor. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions">
            <summary>
            Enum FileMenuOptions
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.OverriteInputSettings">
            <summary>
            The overrite input settings
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.CreateSnapshot">
            <summary>
            The create snapshot
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.LoadSnapshot">
            <summary>
            The load snapshot
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.Export">
            <summary>
            The export
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.Import">
            <summary>
            The import
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.ImportJoystickMapping">
            <summary>
            The import joystick mapping
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.ConfigureForInputAdapter">
            <summary>
            The configure for input adapter
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.FileMenuOptions.CreateDefaultInputConfig">
            <summary>
            The create default input configuration
            </summary>
        </member>
        <member name="T:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions">
            <summary>
            Enum EditMenuOptions
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.NewInputConfiguration">
            <summary>
            The new input configuration
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.NewAxisConfiguration">
            <summary>
            The new axis configuration
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.Duplicate">
            <summary>
            The duplicate
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.Delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.DeleteAll">
            <summary>
            The delete all
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.SelectTarget">
            <summary>
            The select target
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.IgnoreTimescale">
            <summary>
            The ignore timescale
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.DontDestroyOnLoad">
            <summary>
            The dont destroy on load
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.Copy">
            <summary>
            The copy
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AdvancedInputEditor.EditMenuOptions.Paste">
            <summary>
            The paste
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputAdapter">
            <summary>
            Class InputAdapter. This class cannot be inherited.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="E:TeamUtility.IO.InputAdapter.InputDeviceChanged">
            <summary>
            Occurs when [input device changed].
            </summary>
        </member>
        <member name="P:TeamUtility.IO.InputAdapter.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:TeamUtility.IO.InputAdapter.inputDevice">
            <summary>
            Gets or sets the input device.
            </summary>
            <value>The input device.</value>
        </member>
        <member name="P:TeamUtility.IO.InputAdapter.KeyboardConfiguration">
            <summary>
            Gets the keyboard configuration.
            </summary>
            <value>The keyboard configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputAdapter.JoystickConfiguration">
            <summary>
            Gets the joystick configuration.
            </summary>
            <value>The joystick configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputAdapter.mousePosition">
            <summary>
            Gets the mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetAxis(System.String)">
            <summary>
            Gets the axis.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetTriggerAxis(TeamUtility.IO.InputTriggerAxis)">
            <summary>
            Gets the trigger axis.
            </summary>
            <param name="axis">The axis.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetDPADAxis(TeamUtility.IO.InputDPADAxis)">
            <summary>
            Gets the dpad axis.
            </summary>
            <param name="axis">The axis.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="buttonName">Name of the button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetButtonDown(System.String)">
            <summary>
            Gets the button down.
            </summary>
            <param name="buttonName">Name of the button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetButtonUp(System.String)">
            <summary>
            Gets the button up.
            </summary>
            <param name="buttonName">Name of the button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetMouseButton(System.Int32)">
            <summary>
            Gets the mouse button.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetMouseButtonDown(System.Int32)">
            <summary>
            Gets the mouse button down.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetMouseButtonUp(System.Int32)">
            <summary>
            Gets the mouse button up.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetDPADButton(TeamUtility.IO.InputDPADButton)">
            <summary>
            Gets the dpad button.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetDPADButtonDown(TeamUtility.IO.InputDPADButton)">
            <summary>
            Gets the dpad button down.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetDPADButtonUp(TeamUtility.IO.InputDPADButton)">
            <summary>
            Gets the dpad button up.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetTriggerButton(TeamUtility.IO.InputTriggerButton)">
            <summary>
            Gets the trigger button.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetTriggerButtonDown(TeamUtility.IO.InputTriggerButton)">
            <summary>
            Gets the trigger button down.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetTriggerButtonUp(TeamUtility.IO.InputTriggerButton)">
            <summary>
            Gets the trigger button up.
            </summary>
            <param name="button">The button.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.ResetInputAxes">
            <summary>
            Resets the input axes.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.GetJoystickNames">
            <summary>
            Gets the joystick names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.IsUsingJoystick">
            <summary>
            Determines whether [is using joystick].
            </summary>
            <returns><c>true</c> if [is using joystick]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputAdapter.IsUsingKeyboardAndMouse">
            <summary>
            Determines whether [is using keyboard and mouse].
            </summary>
            <returns><c>true</c> if [is using keyboard and mouse]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TeamUtility.IO.InputEvent">
            <summary>
            Class InputEvent.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputEvent.AxisEvent">
            <summary>
            Class AxisEvent.
            </summary>
            <seealso cref="!:UnityEngine.Events.UnityEvent&lt;System.Single&gt;" />
        </member>
        <member name="T:TeamUtility.IO.InputEvent.ActionEvent">
            <summary>
            Class ActionEvent.
            </summary>
            <seealso cref="T:UnityEngine.Events.UnityEvent" />
        </member>
        <member name="F:TeamUtility.IO.InputEvent.name">
            <summary>
            Do not change the name of an event at runtime because it will invalidate the lookup table.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.axisName">
            <summary>
            The axis name
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.buttonName">
            <summary>
            The button name
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.keyCode">
            <summary>
            The key code
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.eventType">
            <summary>
            The event type
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.inputState">
            <summary>
            The input state
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.playerID">
            <summary>
            The player identifier
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.onAction">
            <summary>
            The on action
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputEvent.onAxis">
            <summary>
            The on axis
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputEvent"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TeamUtility.IO.InputEvent.Evaluate">
            <summary>
            Evaluates this instance.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.InputEventManager">
            <summary>
            Class InputEventManager.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:TeamUtility.IO.InputEventManager.EventCount">
            <summary>
            Gets the event count.
            </summary>
            <value>The event count.</value>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.CreateAxisEvent(System.String,System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Creates the axis event.
            </summary>
            <param name="name">The name.</param>
            <param name="axisName">Name of the axis.</param>
            <param name="playerID">The player identifier.</param>
            <returns>InputEvent.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.CreateButtonEvent(System.String,System.String,TeamUtility.IO.InputState,TeamUtility.IO.PlayerID)">
            <summary>
            Creates the button event.
            </summary>
            <param name="name">The name.</param>
            <param name="buttonName">Name of the button.</param>
            <param name="inputState">State of the input.</param>
            <param name="playerID">The player identifier.</param>
            <returns>InputEvent.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.CreateKeyEvent(System.String,UnityEngine.KeyCode,TeamUtility.IO.InputState)">
            <summary>
            Creates the key event.
            </summary>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="inputState">State of the input.</param>
            <returns>InputEvent.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.CreateEmptyEvent(System.String)">
            <summary>
            Creates the empty event.
            </summary>
            <param name="name">The name.</param>
            <returns>InputEvent.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.DeleteEvent(System.String)">
            <summary>
            Deletes the event.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.GetEvent(System.String)">
            <summary>
            Searches for an event based on the specified name. If an event can't be found the return value will be null.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputEventManager.GetEvent(System.Int32)">
            <summary>
            Gets the event at the specified index. If the index is out of range the return value will be null.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.AxisMapping">
            <summary>
            Class AxisMapping.
            </summary>
        </member>
        <member name="P:TeamUtility.IO.AxisMapping.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TeamUtility.IO.AxisMapping.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:TeamUtility.IO.AxisMapping.JoystickAxis">
            <summary>
            Gets the joystick axis.
            </summary>
            <value>The joystick axis.</value>
        </member>
        <member name="P:TeamUtility.IO.AxisMapping.ScanType">
            <summary>
            Gets the type of the scan.
            </summary>
            <value>The type of the scan.</value>
        </member>
        <member name="M:TeamUtility.IO.AxisMapping.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.AxisMapping"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:TeamUtility.IO.AxisMapping.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.AxisMapping"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="joystickAxis">The joystick axis.</param>
        </member>
        <member name="T:TeamUtility.IO.JoystickMapping">
            <summary>
            Class JoystickMapping.
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;TeamUtility.IO.AxisMapping&gt;" />
        </member>
        <member name="P:TeamUtility.IO.JoystickMapping.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TeamUtility.IO.JoystickMapping.AxisCount">
            <summary>
            Gets the axis count.
            </summary>
            <value>The axis count.</value>
        </member>
        <member name="M:TeamUtility.IO.JoystickMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.JoystickMapping"/> class.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.JoystickMapping.Load(System.String)">
            <summary>
            Loads the specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:TeamUtility.IO.JoystickMapping.LoadFromResources(System.String)">
            <summary>
            Loads from resources.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:TeamUtility.IO.JoystickMapping.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;AxisMapping&gt;.</returns>
        </member>
        <member name="T:TeamUtility.IO.MappingWizardItem">
            <summary>
            Class MappingWizardItem.
            </summary>
        </member>
        <member name="P:TeamUtility.IO.MappingWizardItem.AxisName">
            <summary>
            Gets the name of the axis.
            </summary>
            <value>The name of the axis.</value>
        </member>
        <member name="P:TeamUtility.IO.MappingWizardItem.ScanType">
            <summary>
            Gets the type of the scan.
            </summary>
            <value>The type of the scan.</value>
        </member>
        <member name="M:TeamUtility.IO.MappingWizardItem.#ctor(System.String,TeamUtility.IO.MappingWizard.ScanType)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.MappingWizardItem"/> class.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <param name="scanType">Type of the scan.</param>
        </member>
        <member name="T:TeamUtility.IO.CloneControllerConfiguration">
            <summary>
            Class CloneControllerConfiguration.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:TeamUtility.IO.AxisConfiguration">
            <summary>
            Class AxisConfiguration. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.Neutral">
            <summary>
            The neutral
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.Positive">
            <summary>
            The positive
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.Negative">
            <summary>
            The negative
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.MaxMouseAxes">
            <summary>
            The maximum mouse axes
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.MaxJoystickAxes">
            <summary>
            The maximum joystick axes
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.MaxJoysticks">
            <summary>
            The maximum joysticks
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.name">
            <summary>
            Do not change the name of an axis at runtime because it will invalidate the lookup tables.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.description">
            <summary>
            The description
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.positive">
            <summary>
            The positive
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.negative">
            <summary>
            The negative
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.altPositive">
            <summary>
            The alt positive
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.altNegative">
            <summary>
            The alt negative
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.deadZone">
            <summary>
            The dead zone
            </summary>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "F:TeamUtility.IO.AxisConfiguration.gravity" -->
        <member name="F:TeamUtility.IO.AxisConfiguration.sensitivity">
            <summary>
            The speed(in units/sec) at which a digital axis moves towards the target value.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.snap">
            <summary>
            If input switches direction, do we snap to neutral and continue from there?
            Only for digital axes.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.invert">
            <summary>
            The invert
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.axis">
            <summary>
            The axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.joystick">
            <summary>
            The joystick
            </summary>
        </member>
        <member name="F:TeamUtility.IO.AxisConfiguration.ButtonState.Pressed">
            <summary>
            The pressed
            </summary>
        </member>
        <member name="P:TeamUtility.IO.AxisConfiguration.AnyInput">
            <summary>
            Gets a value indicating whether [any input].
            </summary>
            <value><c>true</c> if [any input]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.AxisConfiguration.AnyKey">
            <summary>
            Gets a value indicating whether [any key].
            </summary>
            <value><c>true</c> if [any key]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.AxisConfiguration.AnyKeyDown">
            <summary>
            Gets a value indicating whether [any key down].
            </summary>
            <value><c>true</c> if [any key down]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.AxisConfiguration.AnyKeyUp">
            <summary>
            Gets a value indicating whether [any key up].
            </summary>
            <value><c>true</c> if [any key up]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.AxisConfiguration"/> class.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.AxisConfiguration"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.GetAxis">
            <summary>
            Gets the axis.
            </summary>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.GetAxisRaw">
            <summary>
            	Returns raw input with no sensitivity or smoothing applyed.
             </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.GetButton">
            <summary>
            Gets the button.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.GetButtonDown">
            <summary>
            Gets the button down.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.GetButtonUp">
            <summary>
            Gets the button up.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.SetMouseAxis(System.Int32)">
            <summary>
            Sets the mouse axis.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.SetAnalogAxis(System.Int32,System.Int32)">
            <summary>
            Sets the analog axis.
            </summary>
            <param name="joystick">The joystick.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.SetAnalogButton(System.Int32,System.Int32)">
            <summary>
            Sets the analog button.
            </summary>
            <param name="joystick">The joystick.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.SetRemoteAxisValue(System.Single)">
            <summary>
            If the axis' input type is set to "RemoteAxis" the axis value will be changed, else nothing will happen.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.SetRemoteButtonValue(System.Boolean,System.Boolean)">
            <summary>
            If the axis' input type is set to "RemoteButton" the axis state will be changed, else nothing will happen.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.Copy(TeamUtility.IO.AxisConfiguration)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.StringToKey(System.String)">
            <summary>
            Strings to key.
            </summary>
            <param name="value">The value.</param>
            <returns>KeyCode.</returns>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.StringToInputType(System.String)">
            <summary>
            Strings the type of to input.
            </summary>
            <param name="value">The value.</param>
            <returns>InputType.</returns>
        </member>
        <member name="M:TeamUtility.IO.AxisConfiguration.Duplicate(TeamUtility.IO.AxisConfiguration)">
            <summary>
            Duplicates the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="T:TeamUtility.IO.InputConfiguration">
            <summary>
            Class InputConfiguration. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputConfiguration.name">
            <summary>
            Do not change the name of an input configuration at runtime because it will invalidate the lookup tables.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputConfiguration.axes">
            <summary>
            The axes
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputConfiguration.isExpanded">
            <summary>
            The is expanded
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputConfiguration"/> class.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputConfiguration"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TeamUtility.IO.InputConfiguration.Duplicate(TeamUtility.IO.InputConfiguration)">
            <summary>
            Duplicates the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns>InputConfiguration.</returns>
        </member>
        <member name="T:TeamUtility.IO.KeyScanHandler">
            <summary>
            Encapsulates a method that takes one parameter(the key) and returns 'true' if
            the key is accepted or 'false' if it isn't.
            The 'userData' parameter is used to send additional user data.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.AxisScanHandler">
            <summary>
            Encapsulates a method that takes one parameter(the axis) and returns 'true' if
            the axis is accepted or 'false' if it isn't.
            The 'userData' parameter is used to send additional user data.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.ScanHandler">
            <summary>
            Encapsulates a method that takes one parameter(the scan result) and returns 'true' if
            the scan result is accepted or 'false' if it isn't.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.RemoteUpdateDelegate">
            <summary>
            Delegate RemoteUpdateDelegate
            </summary>
            <param name="playerID">The player identifier.</param>
        </member>
        <member name="T:TeamUtility.IO.InputManager">
            <summary>
            Class InputManager.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
            <summary>
            Class InputManager.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="E:TeamUtility.IO.InputManager.ConfigurationChanged">
            <summary>
            Occurs when [configuration changed].
            </summary>
        </member>
        <member name="E:TeamUtility.IO.InputManager.ConfigurationDirty">
            <summary>
            Occurs when [configuration dirty].
            </summary>
        </member>
        <member name="E:TeamUtility.IO.InputManager.Loaded">
            <summary>
            Occurs when [loaded].
            </summary>
        </member>
        <member name="E:TeamUtility.IO.InputManager.Saved">
            <summary>
            Occurs when [saved].
            </summary>
        </member>
        <member name="E:TeamUtility.IO.InputManager.RemoteUpdate">
            <summary>
            Occurs when [remote update].
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.inputConfigurations">
            <summary>
            The input configurations
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.playerOneDefault">
            <summary>
            The player one default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.playerTwoDefault">
            <summary>
            The player two default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.playerThreeDefault">
            <summary>
            The player three default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.playerFourDefault">
            <summary>
            The player four default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.dontDestroyOnLoad">
            <summary>
            The dont destroy on load
            </summary>
        </member>
        <member name="F:TeamUtility.IO.InputManager.ignoreTimescale">
            <summary>
            The ignore timescale
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Load(TeamUtility.IO.SaveLoadParameters)">
            <summary>
            Loads the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetSaveParameters">
            <summary>
            Gets the save parameters.
            </summary>
            <returns>SaveLoadParameters.</returns>
        </member>
        <member name="P:TeamUtility.IO.InputManager.Instance">
            <summary>
            A reference to the input manager instance. Use it to check if an input manager exists in the scene and
            to subscribe to the input manager's events.
            </summary>
        </member>
        <member name="P:TeamUtility.IO.InputManager.CurrentConfiguration">
            <summary>
            Gets the current configuration.
            </summary>
            <value>The current configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.PlayerOneConfiguration">
            <summary>
            Gets the player one configuration.
            </summary>
            <value>The player one configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.PlayerTwoConfiguration">
            <summary>
            Gets the player two configuration.
            </summary>
            <value>The player two configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.PlayerThreeConfiguration">
            <summary>
            Gets the player three configuration.
            </summary>
            <value>The player three configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.PlayerFourConfiguration">
            <summary>
            Gets the player four configuration.
            </summary>
            <value>The player four configuration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.IsScanning">
            <summary>
            Gets a value indicating whether this instance is scanning.
            </summary>
            <value><c>true</c> if this instance is scanning; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.IgnoreTimescale">
            <summary>
            Gets a value indicating whether [ignore timescale].
            </summary>
            <value><c>true</c> if [ignore timescale]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TeamUtility.IO.InputManager.AnyInput">
            <summary>
            Returns true if any axis of any active input configuration is receiving input.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.AnyInput(TeamUtility.IO.PlayerID)">
            <summary>
            Returns true if any axis of the input configuration is receiving input.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.AnyInput(System.String)">
            <summary>
            Returns true if any axis of the specified input configuration is receiving input.
            If the specified input configuration is not active and the axis is of type
            DigialAxis, RemoteAxis, RemoteButton or AnalogButton this method will return false.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetRemoteAxisValue(System.String,System.Single)">
            <summary>
            If an axis with the requested name exists, and it is of type 'RemoteAxis', the axis' value will be changed.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetRemoteAxisValue(System.String,System.String,System.Single)">
            <summary>
            If an axis with the requested name exists, and it is of type 'RemoteAxis', the axis' value will be changed.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetRemoteButtonValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            If an button with the requested name exists, and it is of type 'RemoteButton', the button's state will be changed.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetRemoteButtonValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            If an button with the requested name exists, and it is of type 'RemoteButton', the button's state will be changed.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Reinitialize">
            <summary>
            Resets the internal state of the input manager.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.ResetInputConfiguration(TeamUtility.IO.PlayerID)">
            <summary>
            Resets the input configuration.
            </summary>
            <param name="playerID">The player identifier.</param>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetInputConfiguration(System.String)">
            <summary>
            Changes the active input configuration.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetInputConfiguration(System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Changes the active input configuration.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetInputConfiguration(System.String)">
            <summary>
            Gets the input configuration.
            </summary>
            <param name="name">The name.</param>
            <returns>InputConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetInputConfiguration(TeamUtility.IO.PlayerID)">
            <summary>
            Gets the input configuration.
            </summary>
            <param name="playerID">The player identifier.</param>
            <returns>InputConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetAxisConfiguration(System.String,System.String)">
            <summary>
            Gets the axis configuration.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetAxisConfiguration(TeamUtility.IO.PlayerID,System.String)">
            <summary>
            Gets the axis configuration.
            </summary>
            <param name="playerID">The player identifier.</param>
            <param name="axisName">Name of the axis.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateInputConfiguration(System.String)">
            <summary>
            Creates the input configuration.
            </summary>
            <param name="name">The name.</param>
            <returns>InputConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.DeleteInputConfiguration(System.String)">
            <summary>
            Deletes the specified input configuration. If the speficied input configuration is
            active for any player then the active input configuration for the respective player will be set to null.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateButton(System.String,System.String,UnityEngine.KeyCode)">
            <summary>
            Creates the button.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="buttonName">Name of the button.</param>
            <param name="primaryKey">The primary key.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateButton(System.String,System.String,UnityEngine.KeyCode,UnityEngine.KeyCode)">
            <summary>
            Creates the button.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="buttonName">Name of the button.</param>
            <param name="primaryKey">The primary key.</param>
            <param name="secondaryKey">The secondary key.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateDigitalAxis(System.String,System.String,UnityEngine.KeyCode,UnityEngine.KeyCode,System.Single,System.Single)">
            <summary>
            Creates the digital axis.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <param name="positive">The positive.</param>
            <param name="negative">The negative.</param>
            <param name="gravity">The gravity.</param>
            <param name="sensitivity">The sensitivity.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateDigitalAxis(System.String,System.String,UnityEngine.KeyCode,UnityEngine.KeyCode,UnityEngine.KeyCode,UnityEngine.KeyCode,System.Single,System.Single)">
            <summary>
            Creates the digital axis.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <param name="positive">The positive.</param>
            <param name="negative">The negative.</param>
            <param name="altPositive">The alt positive.</param>
            <param name="altNegative">The alt negative.</param>
            <param name="gravity">The gravity.</param>
            <param name="sensitivity">The sensitivity.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateMouseAxis(System.String,System.String,System.Int32,System.Single)">
            <summary>
            Creates the mouse axis.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <param name="axis">The axis.</param>
            <param name="sensitivity">The sensitivity.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateAnalogAxis(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates the analog axis.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <param name="joystick">The joystick.</param>
            <param name="axis">The axis.</param>
            <param name="sensitivity">The sensitivity.</param>
            <param name="deadZone">The dead zone.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateRemoteAxis(System.String,System.String)">
            <summary>
            Creates the remote axis.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateRemoteButton(System.String,System.String)">
            <summary>
            Creates the remote button.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="buttonName">Name of the button.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateAnalogButton(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates the analog button.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="buttonName">Name of the button.</param>
            <param name="joystick">The joystick.</param>
            <param name="axis">The axis.</param>
            <returns>AxisConfiguration.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CreateEmptyAxis(System.String,System.String)">
            <summary>
            Creates an uninitialized axis configuration. It's your responsability to configure the axis properly.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.DeleteAxisConfiguration(System.String,System.String)">
            <summary>
            Deletes the axis configuration.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <param name="axisName">Name of the axis.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.StartKeyScan(TeamUtility.IO.KeyScanHandler,System.Single,System.String,System.Object[])">
            <summary>
            Scans for keyboard input and calls the handler with the result.
            Returns KeyCode.None if timeout is reached or the scan is canceled.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.StartKeyboardButtonScan(TeamUtility.IO.KeyScanHandler,System.Single,System.String,System.Object[])">
            <summary>
            Scans for keyboard input and calls the handler with the result.
            Returns KeyCode.None if timeout is reached or the scan is canceled.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.StartMouseAxisScan(TeamUtility.IO.AxisScanHandler,System.Single,System.String,System.Object[])">
            <summary>
            Scans for mouse input and calls the handler with the result.
            Returns -1 if timeout is reached or the scan is canceled.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.StartJoystickButtonScan(TeamUtility.IO.KeyScanHandler,System.Nullable{System.Int32},System.Single,System.String,System.Object[])">
            <summary>
            Scans for joystick button input and calls the handler with the result.
            Returns KeyCode.None if timeout is reached or the scan is canceled.
            <param name="joystick">The index of the joystick to scan for input. If null all joysticks will be scanned.</param>
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.StartJoystickAxisScan(TeamUtility.IO.AxisScanHandler,System.Nullable{System.Int32},System.Single,System.String,System.Object[])">
            <summary>
            Scans for joystick input and calls the handler with the result.
            Returns -1 if timeout is reached or the scan is canceled.
            <param name="joystick">The index of the joystick to scan for input. If null all joysticks will be scanned.</param>
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.StartScan(TeamUtility.IO.ScanSettings,TeamUtility.IO.ScanHandler)">
            <summary>
            Starts the scan.
            </summary>
            <param name="settings">The settings.</param>
            <param name="scanHandler">The scan handler.</param>
        </member>
        <member name="M:TeamUtility.IO.InputManager.CancelScan">
            <summary>
            Cancels the scan.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.SetConfigurationDirty(System.String)">
            <summary>
            Triggers the ConfigurationDirty event.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Save">
            <summary>
            Saves the input configurations in the XML format, in Application.persistentDataPath.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Save(System.String)">
            <summary>
            Saves the input configurations in the XML format, at the specified location.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Save(TeamUtility.IO.IInputSaver)">
            <summary>
            Saves the specified input saver.
            </summary>
            <param name="inputSaver">The input saver.</param>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Load">
            <summary>
            Loads the input configurations saved in the XML format, from Application.persistentDataPath.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Load(System.String)">
            <summary>
            Loads the input configurations saved in the XML format, from the specified location.
            </summary>
        </member>
        <member name="M:TeamUtility.IO.InputManager.Load(TeamUtility.IO.IInputLoader)">
            <summary>
            Loads the specified input loader.
            </summary>
            <param name="inputLoader">The input loader.</param>
        </member>
        <member name="P:TeamUtility.IO.InputManager.acceleration">
            <summary>
            Gets the acceleration.
            </summary>
            <value>The acceleration.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.accelerationEventCount">
            <summary>
            Gets the acceleration event count.
            </summary>
            <value>The acceleration event count.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.accelerationEvents">
            <summary>
            Gets the acceleration events.
            </summary>
            <value>The acceleration events.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.anyKey">
            <summary>
            Gets a value indicating whether [any key].
            </summary>
            <value><c>true</c> if [any key]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.anyKeyDown">
            <summary>
            Gets a value indicating whether [any key down].
            </summary>
            <value><c>true</c> if [any key down]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.compass">
            <summary>
            Gets the compass.
            </summary>
            <value>The compass.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.compositionString">
            <summary>
            Gets the composition string.
            </summary>
            <value>The composition string.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.deviceOrientation">
            <summary>
            Gets the device orientation.
            </summary>
            <value>The device orientation.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.gyro">
            <summary>
            Gets the gyro.
            </summary>
            <value>The gyro.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.imeIsSelected">
            <summary>
            Gets a value indicating whether [IME is selected].
            </summary>
            <value><c>true</c> if [IME is selected]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.inputString">
            <summary>
            Gets the input string.
            </summary>
            <value>The input string.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.mousePosition">
            <summary>
            Gets the mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.mousePresent">
            <summary>
            Gets a value indicating whether [mouse present].
            </summary>
            <value><c>true</c> if [mouse present]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.touchSupported">
            <summary>
            Gets a value indicating whether [touch supported].
            </summary>
            <value><c>true</c> if [touch supported]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.touchCount">
            <summary>
            Gets the touch count.
            </summary>
            <value>The touch count.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.touches">
            <summary>
            Gets the touches.
            </summary>
            <value>The touches.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.compensateSensors">
            <summary>
            Gets or sets a value indicating whether [compensate sensors].
            </summary>
            <value><c>true</c> if [compensate sensors]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.compositionCursorPos">
            <summary>
            Gets or sets the composition cursor position.
            </summary>
            <value>The composition cursor position.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.imeCompositionMode">
            <summary>
            Gets or sets the IME composition mode.
            </summary>
            <value>The IME composition mode.</value>
        </member>
        <member name="P:TeamUtility.IO.InputManager.multiTouchEnabled">
            <summary>
            Gets or sets a value indicating whether [multi touch enabled].
            </summary>
            <value><c>true</c> if [multi touch enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetAccelerationEvent(System.Int32)">
            <summary>
            Gets the acceleration event.
            </summary>
            <param name="index">The index.</param>
            <returns>AccelerationEvent.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetAxis(System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Gets the axis.
            </summary>
            <param name="name">The name.</param>
            <param name="playerID">The player identifier.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetAxisRaw(System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Gets the axis raw.
            </summary>
            <param name="name">The name.</param>
            <param name="playerID">The player identifier.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetButton(System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Gets the button.
            </summary>
            <param name="name">The name.</param>
            <param name="playerID">The player identifier.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetButtonDown(System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Gets the button down.
            </summary>
            <param name="name">The name.</param>
            <param name="playerID">The player identifier.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetButtonUp(System.String,TeamUtility.IO.PlayerID)">
            <summary>
            Gets the button up.
            </summary>
            <param name="name">The name.</param>
            <param name="playerID">The player identifier.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetKey(UnityEngine.KeyCode)">
            <summary>
            Gets the key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            Gets the key down.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            Gets the key up.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetMouseButton(System.Int32)">
            <summary>
            Gets the mouse button.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetMouseButtonDown(System.Int32)">
            <summary>
            Gets the mouse button down.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetMouseButtonUp(System.Int32)">
            <summary>
            Gets the mouse button up.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetTouch(System.Int32)">
            <summary>
            Gets the touch.
            </summary>
            <param name="index">The index.</param>
            <returns>Touch.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.GetJoystickNames">
            <summary>
            Gets the joystick names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TeamUtility.IO.InputManager.ResetInputAxes">
            <summary>
            Resets the input axes.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.IInputLoader">
            <summary>
            Interface IInputLoader
            </summary>
        </member>
        <member name="M:TeamUtility.IO.IInputLoader.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>SaveLoadParameters.</returns>
        </member>
        <member name="M:TeamUtility.IO.IInputLoader.LoadSelective(System.String)">
            <summary>
            Loads the selective.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <returns>InputConfiguration.</returns>
        </member>
        <member name="T:TeamUtility.IO.IInputSaver">
            <summary>
            Interface IInputSaver
            </summary>
        </member>
        <member name="M:TeamUtility.IO.IInputSaver.Save(TeamUtility.IO.SaveLoadParameters)">
            <summary>
            Saves the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:TeamUtility.IO.InputLoaderXML">
            <summary>
            Class InputLoaderXML. This class cannot be inherited.
            </summary>
            <seealso cref="T:TeamUtility.IO.IInputLoader" />
        </member>
        <member name="M:TeamUtility.IO.InputLoaderXML.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputLoaderXML"/> class.
            </summary>
            <param name="filename">The filename.</param>
            <exception cref="T:System.ArgumentNullException">filename</exception>
        </member>
        <member name="M:TeamUtility.IO.InputLoaderXML.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputLoaderXML"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:TeamUtility.IO.InputLoaderXML.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputLoaderXML"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:TeamUtility.IO.InputLoaderXML.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>SaveLoadParameters.</returns>
        </member>
        <member name="M:TeamUtility.IO.InputLoaderXML.LoadSelective(System.String)">
            <summary>
            Loads the selective.
            </summary>
            <param name="inputConfigName">Name of the input configuration.</param>
            <returns>InputConfiguration.</returns>
        </member>
        <member name="T:TeamUtility.IO.InputSaverXML">
            <summary>
            Class InputSaverXML. This class cannot be inherited.
            </summary>
            <seealso cref="T:TeamUtility.IO.IInputSaver" />
        </member>
        <member name="M:TeamUtility.IO.InputSaverXML.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputSaverXML"/> class.
            </summary>
            <param name="filename">The filename.</param>
            <exception cref="T:System.ArgumentNullException">filename</exception>
        </member>
        <member name="M:TeamUtility.IO.InputSaverXML.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputSaverXML"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:TeamUtility.IO.InputSaverXML.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.InputSaverXML"/> class.
            </summary>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
        </member>
        <member name="M:TeamUtility.IO.InputSaverXML.Save(TeamUtility.IO.SaveLoadParameters)">
            <summary>
            Saves the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:TeamUtility.IO.ResourcePaths">
            <summary>
            Class ResourcePaths.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ResourcePaths.INPUT_ADAPTER_DEFAULT_CONFIG">
            <summary>
            The input adapter default configuration
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ResourcePaths.INPUT_MANAGER_DEFAULT_CONFIG">
            <summary>
            The input manager default configuration
            </summary>
        </member>
        <member name="T:TeamUtility.IO.SaveLoadParameters">
            <summary>
            Class SaveLoadParameters.
            </summary>
        </member>
        <member name="F:TeamUtility.IO.SaveLoadParameters.inputConfigurations">
            <summary>
            The input configurations
            </summary>
        </member>
        <member name="F:TeamUtility.IO.SaveLoadParameters.playerOneDefault">
            <summary>
            The player one default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.SaveLoadParameters.playerTwoDefault">
            <summary>
            The player two default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.SaveLoadParameters.playerThreeDefault">
            <summary>
            The player three default
            </summary>
        </member>
        <member name="F:TeamUtility.IO.SaveLoadParameters.playerFourDefault">
            <summary>
            The player four default
            </summary>
        </member>
        <member name="M:TeamUtility.IO.SaveLoadParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeamUtility.IO.SaveLoadParameters"/> class.
            </summary>
        </member>
        <member name="T:TeamUtility.IO.ScanResult">
            <summary>
            Struct ScanResult
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.scanFlags">
            <summary>
            The scan flags
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.key">
            <summary>
            The key
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.joystick">
            <summary>
            The joystick
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.joystickAxis">
            <summary>
            The joystick axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.joystickAxisValue">
            <summary>
            The joystick axis value
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.mouseAxis">
            <summary>
            The mouse axis
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanResult.userData">
            <summary>
            The user data
            </summary>
        </member>
        <member name="T:TeamUtility.IO.ScanSettings">
            <summary>
            Struct ScanSettings
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanSettings.scanFlags">
            <summary>
            The scan flags
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanSettings.joystick">
            <summary>
            The joystick
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanSettings.timeout">
            <summary>
            The timeout
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanSettings.cancelScanButton">
            <summary>
            The cancel scan button
            </summary>
        </member>
        <member name="F:TeamUtility.IO.ScanSettings.userData">
            <summary>
            The user data
            </summary>
        </member>
        <member name="T:UnityInputConverter.YamlDotNet.Core.Events.MappingStyle">
            <summary>
            Specifies the style of a mapping.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.Events.MappingStyle.Any">
            <summary>
            Let the emitter choose the style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.Events.MappingStyle.Block">
            <summary>
            The block mapping style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.Events.MappingStyle.Flow">
            <summary>
            The flow mapping style.
            </summary>
        </member>
        <member name="T:UnityInputConverter.YamlDotNet.Core.Events.SequenceStyle">
            <summary>
            Specifies the style of a sequence.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.Events.SequenceStyle.Any">
            <summary>
            Let the emitter choose the style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.Events.SequenceStyle.Block">
            <summary>
            The block sequence style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.Events.SequenceStyle.Flow">
            <summary>
            The flow sequence style.
            </summary>
        </member>
        <member name="T:UnityInputConverter.YamlDotNet.Core.ScalarStyle">
            <summary>
            Specifies the style of a YAML scalar.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.ScalarStyle.Any">
            <summary>
            Let the emitter choose the style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.ScalarStyle.Plain">
            <summary>
            The plain scalar style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.ScalarStyle.SingleQuoted">
            <summary>
            The single-quoted scalar style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.ScalarStyle.DoubleQuoted">
            <summary>
            The double-quoted scalar style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.ScalarStyle.Literal">
            <summary>
            The literal scalar style.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Core.ScalarStyle.Folded">
            <summary>
            The folded scalar style.
            </summary>
        </member>
        <member name="T:UnityInputConverter.YamlDotNet.RepresentationModel.YamlNodeType">
            <summary>
            Specifies the type of node in the representation model.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.RepresentationModel.YamlNodeType.Alias">
            <summary>
            The node is a <see cref="!:YamlAliasNode"/>.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.RepresentationModel.YamlNodeType.Mapping">
            <summary>
            The node is a <see cref="!:YamlMappingNode"/>.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.RepresentationModel.YamlNodeType.Scalar">
            <summary>
            The node is a <see cref="!:YamlScalarNode"/>.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.RepresentationModel.YamlNodeType.Sequence">
            <summary>
            The node is a <see cref="!:YamlSequenceNode"/>.
            </summary>
        </member>
        <member name="T:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions">
            <summary>
            Options that control the serialization process.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions.None">
            <summary>
            Serializes using the default options
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions.Roundtrip">
            <summary>
            Ensures that it will be possible to deserialize the serialized objects.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions.DisableAliases">
            <summary>
            If this flag is specified, if the same object appears more than once in the
            serialization graph, it will be serialized each time instead of just once.
            </summary>
            <remarks>
            If the serialization graph contains circular references and this flag is set,
            a StackOverflowException will be thrown.
            If this flag is not set, there is a performance penalty because the entire
            object graph must be walked twice.
            </remarks>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions.EmitDefaults">
            <summary>
            Forces every value to be serialized, even if it is the default value for that type.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions.JsonCompatible">
            <summary>
            Ensures that the result of the serialization is valid JSON.
            </summary>
        </member>
        <member name="F:UnityInputConverter.YamlDotNet.Serialization.SerializationOptions.DefaultToStaticType">
            <summary>
            Use the static type of values instead of their actual type.
            </summary>
        </member>
        <member name="T:UnityStandardAssets.ImageEffects.ColorCorrectionMode">
            <summary>
            Enum ColorCorrectionMode
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionMode.Simple">
            <summary>
            The simple
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionMode.Advanced">
            <summary>
            The advanced
            </summary>
        </member>
        <member name="T:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers">
            <summary>
            Class ColorCorrectionCurvesLayers.
            </summary>
            <seealso cref="T:M8.ImageEffects.PostEffectsBase" />
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.redChannel">
            <summary>
            The red channel
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.greenChannel">
            <summary>
            The green channel
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.blueChannel">
            <summary>
            The blue channel
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.useDepthCorrection">
            <summary>
            The use depth correction
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.zCurve">
            <summary>
            The z curve
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.depthRedChannel">
            <summary>
            The depth red channel
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.depthGreenChannel">
            <summary>
            The depth green channel
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.depthBlueChannel">
            <summary>
            The depth blue channel
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.saturation">
            <summary>
            The saturation
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.selectiveCc">
            <summary>
            The selective cc
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.selectiveFromColor">
            <summary>
            The selective from color
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.selectiveToColor">
            <summary>
            The selective to color
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.mode">
            <summary>
            The mode
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.updateTextures">
            <summary>
            The update textures
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.colorCorrectionCurvesShader">
            <summary>
            The color correction curves shader
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.simpleColorCorrectionCurvesShader">
            <summary>
            The simple color correction curves shader
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.colorCorrectionSelectiveShader">
            <summary>
            The color correction selective shader
            </summary>
        </member>
        <member name="F:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.excludeLayers">
            <summary>
            The exclude layers
            </summary>
        </member>
        <member name="M:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.CheckResources">
            <summary>
            Checks the resources.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityStandardAssets.ImageEffects.ColorCorrectionCurvesLayers.UpdateParameters">
            <summary>
            Updates the parameters.
            </summary>
        </member>
        <member name="T:Malee.Editor.ElementDisplayType">
            <summary>
            Enum ElementDisplayType
            </summary>
        </member>
        <member name="F:Malee.Editor.ElementDisplayType.Auto">
            <summary>
            The automatic
            </summary>
        </member>
        <member name="F:Malee.Editor.ElementDisplayType.Expandable">
            <summary>
            The expandable
            </summary>
        </member>
        <member name="F:Malee.Editor.ElementDisplayType.SingleLine">
            <summary>
            The single line
            </summary>
        </member>
        <member name="T:Malee.ReorderableAttribute">
            <summary>
            Class ReorderableAttribute.
            </summary>
            <seealso cref="T:UnityEngine.PropertyAttribute" />
        </member>
        <member name="F:Malee.ReorderableAttribute.add">
            <summary>
            The add
            </summary>
        </member>
        <member name="F:Malee.ReorderableAttribute.remove">
            <summary>
            The remove
            </summary>
        </member>
        <member name="F:Malee.ReorderableAttribute.draggable">
            <summary>
            The draggable
            </summary>
        </member>
        <member name="F:Malee.ReorderableAttribute.elementNameProperty">
            <summary>
            The element name property
            </summary>
        </member>
        <member name="F:Malee.ReorderableAttribute.elementNameOverride">
            <summary>
            The element name override
            </summary>
        </member>
        <member name="F:Malee.ReorderableAttribute.elementIconPath">
            <summary>
            The element icon path
            </summary>
        </member>
        <member name="M:Malee.ReorderableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableAttribute"/> class.
            </summary>
        </member>
        <member name="M:Malee.ReorderableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableAttribute"/> class.
            </summary>
            <param name="elementNameProperty">The element name property.</param>
        </member>
        <member name="M:Malee.ReorderableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableAttribute"/> class.
            </summary>
            <param name="elementNameProperty">The element name property.</param>
            <param name="elementIconPath">The element icon path.</param>
        </member>
        <member name="M:Malee.ReorderableAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableAttribute"/> class.
            </summary>
            <param name="elementNameProperty">The element name property.</param>
            <param name="elementNameOverride">The element name override.</param>
            <param name="elementIconPath">The element icon path.</param>
        </member>
        <member name="M:Malee.ReorderableAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableAttribute"/> class.
            </summary>
            <param name="add">if set to <c>true</c> [add].</param>
            <param name="remove">if set to <c>true</c> [remove].</param>
            <param name="draggable">if set to <c>true</c> [draggable].</param>
            <param name="elementNameProperty">The element name property.</param>
            <param name="elementIconPath">The element icon path.</param>
        </member>
        <member name="M:Malee.ReorderableAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableAttribute"/> class.
            </summary>
            <param name="add">if set to <c>true</c> [add].</param>
            <param name="remove">if set to <c>true</c> [remove].</param>
            <param name="draggable">if set to <c>true</c> [draggable].</param>
            <param name="elementNameProperty">The element name property.</param>
            <param name="elementNameOverride">The element name override.</param>
            <param name="elementIconPath">The element icon path.</param>
        </member>
        <member name="T:Malee.ReorderableArray`1">
            <summary>
            Class ReorderableArray.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.ICloneable" />
            <seealso cref="T:System.Collections.Generic.IList`1" />
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:Malee.ReorderableArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableArray`1"/> class.
            </summary>
        </member>
        <member name="M:Malee.ReorderableArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Malee.ReorderableArray`1"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="P:Malee.ReorderableArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="P:Malee.ReorderableArray`1.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Malee.ReorderableArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Malee.ReorderableArray`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Malee.ReorderableArray`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Malee.ReorderableArray`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Malee.ReorderableArray`1.IndexOf(`0)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Malee.ReorderableArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Malee.ReorderableArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Malee.ReorderableArray`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Malee.ReorderableArray`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Malee.ReorderableArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Malee.ReorderableArray`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Malee.ReorderableArray`1.ToArray">
            <summary>
            To the array.
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:Malee.ReorderableArray`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;T&gt;.</returns>
        </member>
        <member name="T:UniGif">
            <summary>
            Class UniGif.
            </summary>
        </member>
        <member name="M:UniGif.GetTextureList(System.Byte[],System.Int32@,System.Int32@,System.Int32@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean)">
            <summary>
            Get GIF texture list (This is a possibility of lock up)
            </summary>
            <param name="bytes">GIF file byte data</param>
            <param name="loopCount">out Animation loop count</param>
            <param name="width">out GIF image width (px)</param>
            <param name="height">out GIF image height (px)</param>
            <param name="filterMode">Textures filter mode</param>
            <param name="wrapMode">Textures wrap mode</param>
            <param name="debugLog">Debug Log Flag</param>
            <returns>GIF texture list</returns>
        </member>
        <member name="M:UniGif.GetTextureListCoroutine(UnityEngine.MonoBehaviour,System.Byte[],System.Action{System.Collections.Generic.List{UniGif.GifTexture},System.Int32,System.Int32,System.Int32},UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean)">
            <summary>
            Get GIF texture list Coroutine (Avoid lock up but more slow)
            </summary>
            <param name="mb">MonoBehaviour to start the coroutine</param>
            <param name="bytes">GIF file byte data</param>
            <param name="cb">Callback method(param is GIF texture list, Animation loop count, GIF image width (px), GIF image height (px))</param>
            <param name="filterMode">Textures filter mode</param>
            <param name="wrapMode">Textures wrap mode</param>
            <param name="debugLog">Debug Log Flag</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="T:UniGif.GifTexture">
            <summary>
            Struct GifTexture
            </summary>
        </member>
        <member name="F:UniGif.GifTexture.texture2d">
            <summary>
            The texture2d
            </summary>
        </member>
        <member name="F:UniGif.GifTexture.delaySec">
            <summary>
            The delay sec
            </summary>
        </member>
        <member name="M:UniGif.GifTexture.#ctor(UnityEngine.Texture2D,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:UniGif.GifTexture"/> struct.
            </summary>
            <param name="texture2d">The texture2d.</param>
            <param name="delaySec">The delay sec.</param>
        </member>
        <member name="T:UniGif.GifData">
            <summary>
            GIF Data Format
            </summary>
        </member>
        <member name="F:UniGif.GifData.sig0">
            <summary>
            The sig0
            </summary>
        </member>
        <member name="F:UniGif.GifData.sig1">
            <summary>
            The sig0
            </summary>
        </member>
        <member name="F:UniGif.GifData.sig2">
            <summary>
            The sig0
            </summary>
        </member>
        <member name="F:UniGif.GifData.ver0">
            <summary>
            The ver0
            </summary>
        </member>
        <member name="F:UniGif.GifData.ver1">
            <summary>
            The ver0
            </summary>
        </member>
        <member name="F:UniGif.GifData.ver2">
            <summary>
            The ver0
            </summary>
        </member>
        <member name="F:UniGif.GifData.logicalScreenWidth">
            <summary>
            The logical screen width
            </summary>
        </member>
        <member name="F:UniGif.GifData.logicalScreenHeight">
            <summary>
            The logical screen height
            </summary>
        </member>
        <member name="F:UniGif.GifData.globalColorTableFlag">
            <summary>
            The global color table flag
            </summary>
        </member>
        <member name="F:UniGif.GifData.colorResolution">
            <summary>
            The color resolution
            </summary>
        </member>
        <member name="F:UniGif.GifData.sortFlag">
            <summary>
            The sort flag
            </summary>
        </member>
        <member name="F:UniGif.GifData.sizeOfGlobalColorTable">
            <summary>
            The size of global color table
            </summary>
        </member>
        <member name="F:UniGif.GifData.bgColorIndex">
            <summary>
            The bg color index
            </summary>
        </member>
        <member name="F:UniGif.GifData.pixelAspectRatio">
            <summary>
            The pixel aspect ratio
            </summary>
        </member>
        <member name="F:UniGif.GifData.globalColorTable">
            <summary>
            The global color table
            </summary>
        </member>
        <member name="F:UniGif.GifData.imageBlockList">
            <summary>
            The image block list
            </summary>
        </member>
        <member name="F:UniGif.GifData.graphicCtrlExList">
            <summary>
            The graphic control ex list
            </summary>
        </member>
        <member name="F:UniGif.GifData.commentExList">
            <summary>
            The comment ex list
            </summary>
        </member>
        <member name="F:UniGif.GifData.plainTextExList">
            <summary>
            The plain text ex list
            </summary>
        </member>
        <member name="F:UniGif.GifData.appEx">
            <summary>
            The application ex
            </summary>
        </member>
        <member name="F:UniGif.GifData.trailer">
            <summary>
            The trailer
            </summary>
        </member>
        <member name="P:UniGif.GifData.signature">
            <summary>
            Gets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:UniGif.GifData.version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:UniGif.GifData.Dump">
            <summary>
            Dumps this instance.
            </summary>
        </member>
        <member name="T:UniGif.ImageBlock">
            <summary>
            Image Block
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.imageSeparator">
            <summary>
            The image separator
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.imageLeftPosition">
            <summary>
            The image left position
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.imageTopPosition">
            <summary>
            The image top position
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.imageWidth">
            <summary>
            The image width
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.imageHeight">
            <summary>
            The image height
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.localColorTableFlag">
            <summary>
            The local color table flag
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.interlaceFlag">
            <summary>
            The interlace flag
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.sortFlag">
            <summary>
            The sort flag
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.sizeOfLocalColorTable">
            <summary>
            The size of local color table
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.localColorTable">
            <summary>
            The local color table
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.LzwMinimumCodeSize">
            <summary>
            The LZW minimum code size
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.imageDataList">
            <summary>
            The image data list
            </summary>
        </member>
        <member name="T:UniGif.ImageBlock.ImageDataBlock">
            <summary>
            Struct ImageDataBlock
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.ImageDataBlock.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.ImageBlock.ImageDataBlock.imageData">
            <summary>
            The image data
            </summary>
        </member>
        <member name="T:UniGif.GraphicControlExtension">
            <summary>
            Graphic Control Extension
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.extensionIntroducer">
            <summary>
            The extension introducer
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.graphicControlLabel">
            <summary>
            The graphic control label
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.disposalMethod">
            <summary>
            The disposal method
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.transparentColorFlag">
            <summary>
            The transparent color flag
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.delayTime">
            <summary>
            The delay time
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.transparentColorIndex">
            <summary>
            The transparent color index
            </summary>
        </member>
        <member name="F:UniGif.GraphicControlExtension.blockTerminator">
            <summary>
            The block terminator
            </summary>
        </member>
        <member name="T:UniGif.CommentExtension">
            <summary>
            Comment Extension
            </summary>
        </member>
        <member name="F:UniGif.CommentExtension.extensionIntroducer">
            <summary>
            The extension introducer
            </summary>
        </member>
        <member name="F:UniGif.CommentExtension.commentLabel">
            <summary>
            The comment label
            </summary>
        </member>
        <member name="F:UniGif.CommentExtension.commentDataList">
            <summary>
            The comment data list
            </summary>
        </member>
        <member name="T:UniGif.CommentExtension.CommentDataBlock">
            <summary>
            Struct CommentDataBlock
            </summary>
        </member>
        <member name="F:UniGif.CommentExtension.CommentDataBlock.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.CommentExtension.CommentDataBlock.commentData">
            <summary>
            The comment data
            </summary>
        </member>
        <member name="T:UniGif.PlainTextExtension">
            <summary>
            Plain Text Extension
            </summary>
        </member>
        <member name="F:UniGif.PlainTextExtension.extensionIntroducer">
            <summary>
            The extension introducer
            </summary>
        </member>
        <member name="F:UniGif.PlainTextExtension.plainTextLabel">
            <summary>
            The plain text label
            </summary>
        </member>
        <member name="F:UniGif.PlainTextExtension.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.PlainTextExtension.plainTextDataList">
            <summary>
            The plain text data list
            </summary>
        </member>
        <member name="T:UniGif.PlainTextExtension.PlainTextDataBlock">
            <summary>
            Struct PlainTextDataBlock
            </summary>
        </member>
        <member name="F:UniGif.PlainTextExtension.PlainTextDataBlock.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.PlainTextExtension.PlainTextDataBlock.plainTextData">
            <summary>
            The plain text data
            </summary>
        </member>
        <member name="T:UniGif.ApplicationExtension">
            <summary>
            Application Extension
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.extensionIntroducer">
            <summary>
            The extension introducer
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.extensionLabel">
            <summary>
            The extension label
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId1">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId2">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId3">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId4">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId5">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId6">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId7">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appId8">
            <summary>
            The application id1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appAuthCode1">
            <summary>
            The application authentication code1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appAuthCode2">
            <summary>
            The application authentication code1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appAuthCode3">
            <summary>
            The application authentication code1
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.appDataList">
            <summary>
            The application data list
            </summary>
        </member>
        <member name="T:UniGif.ApplicationExtension.ApplicationDataBlock">
            <summary>
            Struct ApplicationDataBlock
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.ApplicationDataBlock.blockSize">
            <summary>
            The block size
            </summary>
        </member>
        <member name="F:UniGif.ApplicationExtension.ApplicationDataBlock.applicationData">
            <summary>
            The application data
            </summary>
        </member>
        <member name="P:UniGif.ApplicationExtension.applicationIdentifier">
            <summary>
            Gets the application identifier.
            </summary>
            <value>The application identifier.</value>
        </member>
        <member name="P:UniGif.ApplicationExtension.applicationAuthenticationCode">
            <summary>
            Gets the application authentication code.
            </summary>
            <value>The application authentication code.</value>
        </member>
        <member name="P:UniGif.ApplicationExtension.loopCount">
            <summary>
            Gets the loop count.
            </summary>
            <value>The loop count.</value>
        </member>
        <member name="M:UniGif.DecodeTextureCoroutine(UniGif.GifData,System.Action{System.Collections.Generic.List{UniGif.GifTexture}},UnityEngine.FilterMode,UnityEngine.TextureWrapMode)">
            <summary>
            Decode to textures from GIF data
            </summary>
            <param name="gifData">GIF data</param>
            <param name="gifTexList">GIF texture list</param>
            <param name="filterMode">Textures filter mode</param>
            <param name="wrapMode">Textures wrap mode</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:UniGif.DecodeTexture(UniGif.GifData,System.Collections.Generic.List{UniGif.GifTexture},UnityEngine.FilterMode,UnityEngine.TextureWrapMode)">
            <summary>
            Decode to textures from GIF data
            </summary>
            <param name="gifData">GIF data</param>
            <param name="gifTexList">GIF texture list</param>
            <param name="filterMode">Textures filter mode</param>
            <param name="wrapMode">Textures wrap mode</param>
            <returns>Result</returns>
        </member>
        <member name="M:UniGif.GetGlobalBgColor(UniGif.GifData)">
            <summary>
            Get background color from global color table
            </summary>
        </member>
        <member name="M:UniGif.GetDecodedData(UniGif.ImageBlock)">
            <summary>
            Get decoded image data from ImageBlock
            </summary>
        </member>
        <member name="M:UniGif.GetColorTable(UniGif.GifData,UniGif.ImageBlock,System.Nullable{UnityEngine.Color32}@)">
            <summary>
            Get color table (local or global)
            </summary>
        </member>
        <member name="M:UniGif.GetGraphicCtrlExt(UniGif.GifData,System.Int32)">
            <summary>
            Get GraphicControlExtension from GifData
            </summary>
        </member>
        <member name="M:UniGif.GetTransparentIndex(System.Nullable{UniGif.GraphicControlExtension})">
            <summary>
            Get transparent color index from GraphicControlExtension
            </summary>
        </member>
        <member name="M:UniGif.GetDelaySec(System.Nullable{UniGif.GraphicControlExtension})">
            <summary>
            Get delay seconds from GraphicControlExtension
            </summary>
        </member>
        <member name="M:UniGif.GetDisposalMethod(System.Nullable{UniGif.GraphicControlExtension})">
            <summary>
            Get disposal method from GraphicControlExtension
            </summary>
        </member>
        <member name="M:UniGif.CreateTexture2D(UniGif.GifData,System.Collections.Generic.List{UniGif.GifTexture},System.Int32,System.UInt16,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean@)">
            <summary>
            Create Texture2D object and initial settings
            </summary>
        </member>
        <member name="M:UniGif.SetTexturePixelRow(UnityEngine.Texture2D,System.Int32,UniGif.ImageBlock,System.Byte[],System.Int32@,System.Collections.Generic.List{System.Byte[]},System.Nullable{UnityEngine.Color32},System.Int32,System.Boolean)">
            <summary>
            Set texture pixel row
            </summary>
        </member>
        <member name="M:UniGif.DecodeGifLZW(System.Collections.Generic.List{System.Byte},System.Int32,System.Int32)">
            <summary>
            GIF LZW decode
            </summary>
            <param name="compData">LZW compressed data</param>
            <param name="lzwMinimumCodeSize">LZW minimum code size</param>
            <param name="needDataSize">Need decoded data size</param>
            <returns>Decoded data array</returns>
        </member>
        <member name="M:UniGif.InitDictionary(System.Collections.Generic.Dictionary{System.Int32,System.String},System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Initialize dictionary
            </summary>
            <param name="dic">Dictionary</param>
            <param name="lzwMinimumCodeSize">LZW minimum code size</param>
            <param name="lzwCodeSize">out LZW code size</param>
            <param name="clearCode">out Clear code</param>
            <param name="finishCode">out Finish code</param>
        </member>
        <member name="M:UniGif.SortInterlaceGifData(System.Byte[],System.Int32)">
            <summary>
            Sort interlace GIF data
            </summary>
            <param name="decodedData">Decoded GIF data</param>
            <param name="xNum">Pixel number of horizontal row</param>
            <returns>Sorted data</returns>
        </member>
        <member name="M:UniGif.SetGifData(System.Byte[],UniGif.GifData@,System.Boolean)">
            <summary>
            Set GIF data
            </summary>
            <param name="gifBytes">GIF byte data</param>
            <param name="gifData">ref GIF data</param>
            <param name="debugLog">Debug log flag</param>
            <returns>Result</returns>
        </member>
        <member name="T:Extension">
            <summary>
            Extension methods class
            </summary>
        </member>
        <member name="M:Extension.GetNumeral(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
            Convert BitArray to int (Specifies the start index and bit length)
            </summary>
            <param name="startIndex">Start index</param>
            <param name="bitLength">Bit length</param>
            <returns>Converted int</returns>
        </member>
        <member name="M:Extension.ToNumeral(System.Collections.BitArray)">
            <summary>
            Convert BitArray to int
            </summary>
            <returns>Converted int</returns>
        </member>
        <member name="T:Broadcaster">
            <summary>
            Class Broadcaster.
            </summary>
        </member>
        <member name="T:Broadcaster.Pair">
            <summary>
            Class Pair.
            </summary>
        </member>
        <member name="F:Broadcaster.Pair.target">
            <summary>
            The target
            </summary>
        </member>
        <member name="F:Broadcaster.Pair.interest">
            <summary>
            The interest
            </summary>
        </member>
        <member name="M:Broadcaster.RegisterInterest(System.Object,System.Object)">
            <summary>
            Registers the interest.
            </summary>
            <param name="target">The target.</param>
            <param name="interestedParty">The interested party.</param>
        </member>
        <member name="M:Broadcaster.UnregisterInterest(System.Object,System.Object)">
            <summary>
            Unregisters the interest.
            </summary>
            <param name="target">The target.</param>
            <param name="interestedParty">The interested party.</param>
        </member>
        <member name="M:Broadcaster.Broadcast(System.Object,System.String)">
            <summary>
            Broadcasts the specified message.
            </summary>
            <param name="obj">The object.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:DelegateSupport">
            <summary>
            A class that runs delegates using acceleration
            </summary>
        </member>
        <member name="M:DelegateSupport.ToOpenDelegate(System.Reflection.MethodInfo)">
            <summary>
            To the open delegate.
            </summary>
            <param name="mi">The mi.</param>
            <returns>Delegate.</returns>
        </member>
        <member name="M:DelegateSupport.ToDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>
            To the delegate.
            </summary>
            <param name="mi">The mi.</param>
            <param name="target">The target.</param>
            <returns>Delegate.</returns>
        </member>
        <member name="T:DelegateSupport.Index`2">
            <summary>
            Class Index. This class cannot be inherited.
            </summary>
            <typeparam name="TK">The type of the tk.</typeparam>
            <typeparam name="TR">The type of the tr.</typeparam>
        </member>
        <member name="M:DelegateSupport.Index`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DelegateSupport.Index`2"/> class.
            </summary>
        </member>
        <member name="P:DelegateSupport.Index`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TR"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>TR.</returns>
        </member>
        <member name="M:DelegateSupport.RegisterActionType``1">
            <summary>
            Registers an action type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterActionType``2">
            <summary>
            Registers an action type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterActionType``4">
            <summary>
            Registers an action type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterActionType``3">
            <summary>
            Registers an action type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterFunctionType``2">
            <summary>
            Registers a function type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterFunctionType``3">
            <summary>
            Registers a function type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterFunctionType``4">
            <summary>
            Registers a function type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.RegisterFunctionType``5">
            <summary>
            Registers a function type for acceleration
            </summary>
            <typeparam name='TType'>
            The type to accelerate
            </typeparam>
        </member>
        <member name="M:DelegateSupport.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invokes the method at high speed
            </summary>
            <returns>
            The result of the invocation
            </returns>
            <param name='mi'>
            The method to invoke
            </param>
            <param name='target'>
            The target on which to invoke it
            </param>
            <param name='parameters'>
            The parameters to pass to the method
            </param>
        </member>
        <member name="T:LoadAnimations">
            <summary>
            Class LoadAnimations.
            </summary>
        </member>
        <member name="F:LoadAnimations.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Loom.Current">
             <summary>
             Return the current instance
             </summary>
             <value>
            
             </value>
        </member>
        <member name="M:Loom.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:Loom.DelayedQueueItem">
            <summary>
            Class DelayedQueueItem.
            </summary>
        </member>
        <member name="F:Loom.DelayedQueueItem.time">
            <summary>
            The time
            </summary>
        </member>
        <member name="F:Loom.DelayedQueueItem.action">
            <summary>
            The action
            </summary>
        </member>
        <member name="M:Loom.QueueOnMainThread(System.Action)">
            <summary>
            Queues an action on the main thread
            </summary>
            <param name='action'>
            The action to execute
            </param>
        </member>
        <member name="M:Loom.QueueOnMainThread(System.Action,System.Single)">
            <summary>
            Queues an action on the main thread after a delay
            </summary>
            <param name='action'>
            The action to run
            </param>
            <param name='time'>
            The amount of time to delay
            </param>
        </member>
        <member name="M:Loom.RunAsync(System.Action)">
            <summary>
            Runs an action on another thread
            </summary>
            <param name='action'>
            The action to execute on another thread
            </param>
        </member>
        <member name="T:MonoBehaviourEx">
            <summary>
            A base class that enables using extended Radical Coroutines
            which allow serialization and resumption of the routines later
            using the standard function prototypes
            </summary>
        </member>
        <member name="M:MonoBehaviourEx.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts the coroutine in a resumable way
            </summary>
            <returns>
            The RadicalRoutine that enables cancellation etc
            </returns>
            <param name='func'>
            The coroutine to start
            </param>
        </member>
        <member name="M:MonoBehaviourEx.StartCoroutine(System.String)">
            <summary>
            Starts the coroutine in a resumable way
            </summary>
            <returns>
            The RadicalRoutine that enables cancellation etc
            </returns>
            <param name='func'>
            The coroutine to start
            </param>
        </member>
        <member name="T:WeakReference`1">
            <summary>
            Class WeakReference.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WeakReference`1.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:WeakReference`1.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WeakReference`1.op_Implicit(WeakReference{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:WeakReference`1"/> to <see cref="!:T"/>.
            </summary>
            <param name="re">The re.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:WeakReference`1.op_Implicit(`0)~WeakReference{`0}">
            <summary>
            Performs an implicit conversion from <see cref="!:T"/> to <see cref="T:WeakReference`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:ObservedList`1">
            <summary>
            Class ObservedList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:ObservedList`1.Changed">
            <summary>
            Occurs when [changed].
            </summary>
        </member>
        <member name="P:ObservedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="T:Lookup`2">
            <summary>
            Class Lookup.
            </summary>
            <typeparam name="TK">The type of the tk.</typeparam>
            <typeparam name="TR">The type of the tr.</typeparam>
        </member>
        <member name="M:Lookup`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lookup`2"/> class.
            </summary>
        </member>
        <member name="P:Lookup`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TR"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>TR.</returns>
        </member>
        <member name="M:Lookup`2.Get``1(`0)">
            <summary>
            Gets the specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="T:IChanged">
            <summary>
            Interface IChanged
            </summary>
        </member>
        <member name="M:IChanged.Changed(System.Object)">
            <summary>
            Changeds the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:INeedParent">
            <summary>
            Interface INeedParent
            </summary>
        </member>
        <member name="M:INeedParent.SetParent(IChanged,System.Object)">
            <summary>
            Sets the parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:Index`2">
            <summary>
            Class Index.
            </summary>
            <typeparam name="TK">The type of the tk.</typeparam>
            <typeparam name="TR">The type of the tr.</typeparam>
        </member>
        <member name="E:Index`2.Setting">
            <summary>
            Occurs when [setting].
            </summary>
        </member>
        <member name="E:Index`2.Getting">
            <summary>
            Occurs when [getting].
            </summary>
        </member>
        <member name="M:Index`2.Changed(System.Object)">
            <summary>
            Changeds the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Index`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TR"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>TR.</returns>
        </member>
        <member name="T:GUIBackgroundColor">
            <summary>
            Class GUIBackgroundColor. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:GUIBackgroundColor.#ctor(UnityEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GUIBackgroundColor"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:GUIBackgroundColor.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:GUIArea">
            <summary>
            Class GUIArea. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:GUIArea.Rotated">
            <summary>
            Class Rotated. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:GUIArea.Rotated.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GUIArea.Rotated"/> class.
            </summary>
        </member>
        <member name="M:GUIArea.Rotated.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:GUIArea.GetStandardArea">
            <summary>
            Gets the standard area.
            </summary>
            <returns>Rect.</returns>
        </member>
        <member name="M:GUIArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GUIArea"/> class.
            </summary>
        </member>
        <member name="M:GUIArea.#ctor(System.Nullable{UnityEngine.Rect})">
            <summary>
            Initializes a new instance of the <see cref="T:GUIArea"/> class.
            </summary>
            <param name="area">The area.</param>
        </member>
        <member name="M:GUIArea.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:GUIScale">
            <summary>
            Class GUIScale. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:GUIScale.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GUIScale"/> class.
            </summary>
        </member>
        <member name="M:GUIScale.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Horizontal">
            <summary>
            Class Horizontal. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Horizontal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Horizontal"/> class.
            </summary>
        </member>
        <member name="M:Horizontal.#ctor(UnityEngine.GUIStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Horizontal"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Horizontal.#ctor(UnityEngine.GUILayoutOption[])">
            <summary>
            Initializes a new instance of the <see cref="T:Horizontal"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Horizontal.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Vertical">
            <summary>
            Class Vertical. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Vertical.#ctor(UnityEngine.GUILayoutOption[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vertical"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Vertical.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ScrollView">
            <summary>
            Class ScrollView. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ScrollView.#ctor(UnityEngine.Vector2@)">
            <summary>
            Initializes a new instance of the <see cref="T:ScrollView"/> class.
            </summary>
            <param name="scroll">The scroll.</param>
        </member>
        <member name="M:ScrollView.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Box">
            <summary>
            Class Box. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Box.#ctor(UnityEngine.GUIStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Box"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Box.#ctor(UnityEngine.GUILayoutOption[])">
            <summary>
            Initializes a new instance of the <see cref="T:Box"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Box.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Box"/> class.
            </summary>
        </member>
        <member name="M:Box.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:HorizontalCentered">
            <summary>
            Class HorizontalCentered. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:HorizontalCentered.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HorizontalCentered"/> class.
            </summary>
        </member>
        <member name="M:HorizontalCentered.#ctor(UnityEngine.GUIStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:HorizontalCentered"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:HorizontalCentered.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:VerticalCentered">
            <summary>
            Class VerticalCentered. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:VerticalCentered.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VerticalCentered"/> class.
            </summary>
        </member>
        <member name="M:VerticalCentered.#ctor(UnityEngine.GUILayoutOption[])">
            <summary>
            Initializes a new instance of the <see cref="T:VerticalCentered"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:VerticalCentered.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:RightAligned">
            <summary>
            Class RightAligned. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:RightAligned.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RightAligned"/> class.
            </summary>
        </member>
        <member name="M:RightAligned.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:LeftAligned">
            <summary>
            Class LeftAligned. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:LeftAligned.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LeftAligned"/> class.
            </summary>
        </member>
        <member name="M:LeftAligned.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:BottomAligned">
            <summary>
            Class BottomAligned. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:BottomAligned.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BottomAligned"/> class.
            </summary>
        </member>
        <member name="M:BottomAligned.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:SceneIndex">
            <summary>
            Class SceneIndex.
            </summary>
        </member>
        <member name="T:Radical">
            <summary>
            Class Radical.
            </summary>
        </member>
        <member name="M:Radical.ActivateChildren(UnityEngine.Component)">
            <summary>
            Activates the children.
            </summary>
            <param name="co">The co.</param>
        </member>
        <member name="M:Radical.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Maximums the by.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>TSource.</returns>
        </member>
        <member name="M:Radical.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Maximums the by.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>TSource.</returns>
        </member>
        <member name="M:Radical.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Zips the specified seq2.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="seq1">The seq1.</param>
            <param name="seq2">The seq2.</param>
            <param name="resultSelector">The result selector.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Radical.CalledFrom(System.String)">
            <summary>
            Calleds from.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radical.MaskLayers(System.Int32[])">
            <summary>
            Masks the layers.
            </summary>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Radical.MaskLayers(System.String[])">
            <summary>
            Masks the layers.
            </summary>
            <param name="layers">The layers.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Radical.PlayOneShot(UnityEngine.GameObject,UnityEngine.AudioClip)">
            <summary>
            Plays the one shot.
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="clip">The clip.</param>
        </member>
        <member name="M:Radical.PlayAudio(UnityEngine.GameObject,UnityEngine.AudioClip)">
            <summary>
            Plays the audio.
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="clip">The clip.</param>
        </member>
        <member name="M:Radical.FadeVolume(UnityEngine.GameObject,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Fades the volume.
            </summary>
            <param name="component">The component.</param>
            <param name="toLevel">To level.</param>
            <param name="time">The time.</param>
            <param name="fromLevel">From level.</param>
        </member>
        <member name="M:Radical.DeactivateChildren(UnityEngine.Component)">
            <summary>
            Deactivates the children.
            </summary>
            <param name="co">The co.</param>
        </member>
        <member name="M:Radical.DestroyChildren(UnityEngine.Transform)">
            <summary>
            Destroys the children.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="T:Radical.PreferenceAccess">
            <summary>
            Class PreferenceAccess.
            </summary>
        </member>
        <member name="P:Radical.PreferenceAccess.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Radical.Preferences">
            <summary>
            The preferences
            </summary>
        </member>
        <member name="F:Radical.AllowDeferredLogging">
            <summary>
            The allow deferred logging
            </summary>
        </member>
        <member name="M:Radical.FindChildIncludingDeactivated(UnityEngine.Transform,System.String)">
            <summary>
            Finds the child including deactivated.
            </summary>
            <param name="t">The t.</param>
            <param name="name">The name.</param>
            <returns>Transform.</returns>
        </member>
        <member name="M:Radical.GetId(UnityEngine.GameObject)">
            <summary>
            Gets the identifier.
            </summary>
            <param name="go">The go.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radical.FindGameObject(System.String)">
            <summary>
            Finds the game object.
            </summary>
            <param name="name">The name.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Radical.GetFullName(UnityEngine.GameObject)">
            <summary>
            Gets the full name.
            </summary>
            <param name="gameObject">The game object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radical.ReIndexScene">
            <summary>
            Res the index scene.
            </summary>
        </member>
        <member name="M:Radical.Find``1(System.String)">
            <summary>
            Finds the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radical.Find``1(UnityEngine.GameObject,System.String)">
            <summary>
            Finds the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go">The go.</param>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radical.ToIndex``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            To the index.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="T"></typeparam>
            <typeparam name="TR">The type of the tr.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>Index&lt;T, List&lt;TR&gt;&gt;.</returns>
        </member>
        <member name="M:Radical.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Minimums the by.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>TSource.</returns>
        </member>
        <member name="M:Radical.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Minimums the by.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>TSource.</returns>
            <exception cref="T:System.InvalidOperationException">Sequence was empty</exception>
        </member>
        <member name="M:Radical.Discrete``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Discretes the specified function.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <typeparam name="T1">The type of the t1.</typeparam>
            <param name="seq">The seq.</param>
            <param name="func">The function.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Radical.ToIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            To the index.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns>Index&lt;T, List&lt;TSource&gt;&gt;.</returns>
        </member>
        <member name="M:Radical.FindInterface``1(UnityEngine.GameObject)">
            <summary>
            Finds the interface.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go">The go.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radical.FindImplementor``1(UnityEngine.GameObject)">
            <summary>
            Finds the implementor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go">The go.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radical.FindImplementors``1(UnityEngine.GameObject)">
            <summary>
            Finds the implementors.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go">The go.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:Radical.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:Radical.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Radical.RGBA(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rgbas the specified r.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <param name="a">a.</param>
            <returns>Color.</returns>
        </member>
        <member name="F:Radical.mergeMix">
            <summary>
            The merge mix
            </summary>
        </member>
        <member name="M:Radical.Merge(UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Merges the specified second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:Radical.Merge(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Merges the specified second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:Radical.GetInterface``1(UnityEngine.Transform)">
            <summary>
            Gets the interface.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tra">The tra.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radical.GetInterface``1(UnityEngine.GameObject)">
            <summary>
            Gets the interface.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go">The go.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radical.GetInterfaces``1(UnityEngine.GameObject)">
            <summary>
            Gets the interfaces.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go">The go.</param>
            <returns>IList&lt;T&gt;.</returns>
        </member>
        <member name="M:Radical.Instantiate(UnityEngine.Transform)">
            <summary>
            Instantiates the specified template.
            </summary>
            <param name="template">The template.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Radical.Instantiate(UnityEngine.Transform,UnityEngine.GameObject)">
            <summary>
            Instantiates the specified template.
            </summary>
            <param name="template">The template.</param>
            <param name="parent">The parent.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Radical.SetParent(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Sets the parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Radical.SetParent(UnityEngine.GameObject,UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <param name="setScale">if set to <c>true</c> [set scale].</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Radical.SetParent(UnityEngine.Transform,UnityEngine.GameObject)">
            <summary>
            Sets the parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <returns>Transform.</returns>
        </member>
        <member name="M:Radical.SetParent(UnityEngine.Transform,UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <param name="setScale">if set to <c>true</c> [set scale].</param>
            <returns>Transform.</returns>
        </member>
        <member name="M:Radical.SetParent(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Sets the parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <returns>Transform.</returns>
        </member>
        <member name="M:Radical.SetParent(UnityEngine.Transform,UnityEngine.Transform,System.Boolean)">
            <summary>
            Sets the parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <param name="setScale">if set to <c>true</c> [set scale].</param>
            <returns>Transform.</returns>
        </member>
        <member name="M:Radical.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single)">
            <summary>
            Smoothes the damp.
            </summary>
            <param name="current">The current.</param>
            <param name="target">The target.</param>
            <param name="velocity">The velocity.</param>
            <param name="time">The time.</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:Radical.AddChild(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>
            Adds the child.
            </summary>
            <param name="parent">The parent.</param>
            <param name="template">The template.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:Radical.EnsureComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            Ensures the component.
            </summary>
            <param name="obj">The object.</param>
            <param name="t">The t.</param>
        </member>
        <member name="M:Radical.RemoveComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            Removes the component.
            </summary>
            <param name="obj">The object.</param>
            <param name="t">The t.</param>
        </member>
        <member name="T:TextHelper">
            <summary>
            Class TextHelper.
            </summary>
        </member>
        <member name="M:TextHelper.FixTo(System.String,System.Single)">
            <summary>
            Fixes to.
            </summary>
            <param name="str">The string.</param>
            <param name="width">The width.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TextHelper.FixTo(System.String,System.Single,System.String)">
            <summary>
            Fixes to.
            </summary>
            <param name="str">The string.</param>
            <param name="width">The width.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ValueLookup`2">
            <summary>
            Class ValueLookup.
            </summary>
            <typeparam name="TK">The type of the tk.</typeparam>
            <typeparam name="TR">The type of the tr.</typeparam>
        </member>
        <member name="P:ValueLookup`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TR"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>TR.</returns>
        </member>
        <member name="M:ValueLookup`2.Get``1(`0)">
            <summary>
            Gets the specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="T:CoroutineReturn">
            <summary>
            A waitable coroutine return value
            </summary>
        </member>
        <member name="P:CoroutineReturn.finished">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CoroutineReturn"/> is finished.
            </summary>
            <value>
            <c>true</c> if finished; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CoroutineReturn.cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CoroutineReturn"/> is cancelled
            </summary>
            <value>
            <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaitForAnimation.name">
            <summary>
            Gets the name of the animation
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:WaitForAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaitForAnimation"/> class.
            </summary>
        </member>
        <member name="M:WaitForAnimation.#ctor(UnityEngine.GameObject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaitForAnimation"/> class.
            </summary>
            <param name='go'>
            The game object to run on
            </param>
            <param name='name'>
            The name of the animation to wait for
            </param>
        </member>
        <member name="M:WaitForAnimation.#ctor(UnityEngine.GameObject,System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaitForAnimation"/> class.
            </summary>
            <param name='go'>
            The game object to run on
            </param>
            <param name='name'>
            The name of the animation to wait for
            </param>
            <param name='time'>
            The proportion of the animation to wait for
            </param>
        </member>
        <member name="M:WaitForAnimation.#ctor(UnityEngine.GameObject,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaitForAnimation"/> class.
            </summary>
            <param name='go'>
            The game object to run on
            </param>
            <param name='name'>
            The name of the animation to wait for
            </param>
            <param name='time'>
            The proportion of the animation to wait for
            </param>
            <param name='weight'>
            The weight to target
            </param>
        </member>
        <member name="T:TaskHelpers">
            <summary>
            Class TaskHelpers.
            </summary>
        </member>
        <member name="M:TaskHelpers.WaitForAnimation(UnityEngine.GameObject,System.String)">
            <summary>
            Waits for animation.
            </summary>
            <param name="go">The go.</param>
            <param name="name">The name.</param>
            <returns>WaitForAnimation.</returns>
        </member>
        <member name="M:TaskHelpers.WaitForAnimation(UnityEngine.GameObject,System.String,System.Single)">
            <summary>
            Waits for animation.
            </summary>
            <param name="go">The go.</param>
            <param name="name">The name.</param>
            <param name="time">The time.</param>
            <returns>WaitForAnimation.</returns>
        </member>
        <member name="M:TaskHelpers.WaitForAnimationWeight(UnityEngine.GameObject,System.String)">
            <summary>
            Waits for animation weight.
            </summary>
            <param name="go">The go.</param>
            <param name="name">The name.</param>
            <returns>WaitForAnimation.</returns>
        </member>
        <member name="M:TaskHelpers.WaitForAnimationWeight(UnityEngine.GameObject,System.String,System.Single)">
            <summary>
            Waits for animation weight.
            </summary>
            <param name="go">The go.</param>
            <param name="name">The name.</param>
            <param name="weight">The weight.</param>
            <returns>WaitForAnimation.</returns>
        </member>
        <member name="T:IYieldInstruction">
            <summary>
            Interface IYieldInstruction
            </summary>
        </member>
        <member name="P:IYieldInstruction.Instruction">
            <summary>
            Gets the instruction.
            </summary>
            <value>The instruction.</value>
        </member>
        <member name="T:RadicalWaitForSeconds">
            <summary>
            Class RadicalWaitForSeconds.
            </summary>
        </member>
        <member name="M:RadicalWaitForSeconds.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalWaitForSeconds"/> class.
            </summary>
        </member>
        <member name="P:RadicalWaitForSeconds.TimeRemaining">
            <summary>
            Gets or sets the time remaining.
            </summary>
            <value>The time remaining.</value>
        </member>
        <member name="M:RadicalWaitForSeconds.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RadicalWaitForSeconds"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="P:RadicalWaitForSeconds.Instruction">
            <summary>
            Gets the instruction.
            </summary>
            <value>The instruction.</value>
        </member>
        <member name="T:INotifyStartStop">
            <summary>
            Interface that notifies a waiting
            coroutine function that it is stopped
            </summary>
        </member>
        <member name="M:INotifyStartStop.Stop">
            <summary>
            This instance has stopped
            </summary>
        </member>
        <member name="M:INotifyStartStop.Start">
            <summary>
            This instance has started
            </summary>
        </member>
        <member name="T:RadicalRoutine">
            <summary>
            A coroutine that can be serialized and
            resumed later
            </summary>
        </member>
        <member name="F:RadicalRoutine.cancel">
            <summary>
            Cancel the coroutine if true
            </summary>
        </member>
        <member name="F:RadicalRoutine.enumerator">
            <summary>
            The enumerator of the running coroutine
            </summary>
        </member>
        <member name="F:RadicalRoutine.Notify">
            <summary>
            The object to notify when completed
            </summary>
        </member>
        <member name="F:RadicalRoutine.Method">
            <summary>
            The method that will be called when
            the routine is complete
            </summary>
        </member>
        <member name="F:RadicalRoutine.finished">
            <summary>
            True when the coroutine is finished
            </summary>
        </member>
        <member name="F:RadicalRoutine.Target">
            <summary>
            The target
            </summary>
        </member>
        <member name="P:RadicalRoutine.trackedObject">
            <summary>
            Gets or sets the tracked object - which is the object
            that is running the coroutine
            </summary>
            <value>
            The tracked object.
            </value>
        </member>
        <member name="E:RadicalRoutine.Cancelled">
            <summary>
            Event raised if the routine is cancelled
            </summary>
        </member>
        <member name="E:RadicalRoutine.Finished">
            <summary>
            Event raised when the coroutine finished
            </summary>
        </member>
        <member name="M:RadicalRoutine.Cancel">
            <summary>
            Cancel this coroutine
            </summary>
        </member>
        <member name="M:RadicalRoutine.Run(System.Collections.IEnumerator)">
            <summary>
            Run the specified extendedCoRoutine
            </summary>
            <param name='extendedCoRoutine'>
            The coroutine to make serializable
            </param>
        </member>
        <member name="M:RadicalRoutine.Run(System.Collections.IEnumerator,System.String)">
            <summary>
            Run the specified coroutine, invoking a particular method on completion
            </summary>
            <param name='extendedCoRoutine'>
            The coroutine to exten
            </param>
            <param name='methodName'>
            Method to call
            </param>
        </member>
        <member name="M:RadicalRoutine.Run(System.Collections.IEnumerator,System.String,System.Object)">
            <summary>
            Runs the specified extended co routine.
            </summary>
            <param name="extendedCoRoutine">The extended co routine.</param>
            <param name="methodName">Name of the method.</param>
            <param name="target">The target.</param>
            <returns>RadicalRoutine.</returns>
        </member>
        <member name="M:RadicalRoutine.Create(System.Collections.IEnumerator)">
            <summary>
            Creates a radical coroutine for a specific function
            </summary>
            <param name='extendedCoRoutine'>
            The function to use as a coroutine
            </param>
        </member>
        <member name="M:RadicalRoutine.Run">
            <summary>
            Run this instance.
            </summary>
        </member>
        <member name="M:RadicalRoutine.Run(System.String)">
            <summary>
            Run this instance, calling a method at completion
            </summary>
            <param name='methodName'>
            Method to call
            </param>
        </member>
        <member name="M:RadicalRoutine.Run(System.String,System.Object)">
            <summary>
            Runs the routine calling a method on a target when complete
            </summary>
            <param name='methodName'>
            The method to call
            </param>
            <param name='target'>
            The target object to call it on
            </param>
        </member>
        <member name="M:RadicalRoutine.Deserialized">
            <summary>
            Deserializeds this instance.
            </summary>
        </member>
        <member name="T:RadicalRoutineExtensions">
            <summary>
            Radical routine extension class
            </summary>
        </member>
        <member name="T:RadicalRoutineExtensions.RadicalRoutineBehaviour">
            <summary>
            Class RadicalRoutineBehaviour.
            </summary>
        </member>
        <member name="M:RadicalRoutineExtensions.StartExtendedCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine that can be serialized and deserialized
            </summary>
            <returns>
            The running coroutine
            </returns>
            <param name='behaviour'>
            The monobehaviour to start the routine on
            </param>
            <param name='coRoutine'>
            The function to use as a coroutine
            </param>
        </member>
        <member name="M:RadicalRoutineExtensions.StartExtendedCoroutine(UnityEngine.GameObject,System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine that can be serialized and deserialized
            </summary>
            <returns>
            The running coroutine
            </returns>
            <param name='GameObject'>
            The Game Object to start the routine on
            </param>
            <param name='coRoutine'>
            The function to use as a coroutine
            </param>
        </member>
        <member name="M:RadicalRoutineExtensions.StartExtendedCoroutine(UnityEngine.Component,System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine that can be serialized and deserialized
            </summary>
            <returns>
            The running coroutine
            </returns>
            <param name='co'>
            The Component to start the routine on
            </param>
            <param name='coRoutine'>
            The function to use as a coroutine
            </param>
        </member>
        <member name="T:RadicalRoutineHelper">
            <summary>
            Class RadicalRoutineHelper. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:RadicalRoutineHelper.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="F:RadicalRoutineHelper.Running">
            <summary>
            The running
            </summary>
        </member>
        <member name="M:RadicalRoutineHelper.Run(RadicalRoutine)">
            <summary>
            Runs the specified routine.
            </summary>
            <param name="routine">The routine.</param>
        </member>
        <member name="M:RadicalRoutineHelper.Finished(RadicalRoutine)">
            <summary>
            Finisheds the specified routine.
            </summary>
            <param name="routine">The routine.</param>
        </member>
        <member name="T:TransformExtensions">
            <summary>
            Helper functions for transforms
            </summary>
        </member>
        <member name="M:TransformExtensions.FirstAncestorOfType``1(UnityEngine.GameObject)">
            <summary>
            Get the first ancestor of a particular type
            </summary>
            <returns>
            The instance of the type or null
            </returns>
            <param name='gameObject'>
            The game object
            </param>
            <typeparam name='T'>
            The type to get
            </typeparam>
        </member>
        <member name="M:TransformExtensions.LastAncestorOfType``1(UnityEngine.GameObject)">
            <summary>
            Get the last ancestor of a particular type
            </summary>
            <returns>
            The instance of the type or null
            </returns>
            <param name='gameObject'>
            The game object
            </param>
            <typeparam name='T'>
            The type to get
            </typeparam>
        </member>
        <member name="M:TransformExtensions.GetAllComponentsInChildren``1(UnityEngine.Transform)">
            <summary>
            Gets components in children, including disabled ones
            </summary>
            <returns>
            An array of the children found
            </returns>
            <param name='parent'>
            The parent to search from
            </param>
            <typeparam name='T'>
            The type to find
            </typeparam>
        </member>
        <member name="M:TransformExtensions.GetAllComponentsInChildren``1(UnityEngine.Component)">
            <summary>
            Gets components in children, including disabled ones
            </summary>
            <returns>
            An array of the children found
            </returns>
            <param name='comp'>
            The parent to search from
            </param>
            <typeparam name='T'>
            The type to find
            </typeparam>
        </member>
        <member name="M:TransformExtensions.GetAllComponentsInChildren``1(UnityEngine.GameObject)">
            <summary>
            Gets components in children, including disabled ones
            </summary>
            <returns>
            An array of the children found
            </returns>
            <param name='go'>
            The parent to search from
            </param>
            <typeparam name='T'>
            The type to find
            </typeparam>
        </member>
        <member name="T:XmlSupport">
            <summary>
            Class XmlSupport.
            </summary>
        </member>
        <member name="M:XmlSupport.DeserializeXml``1(System.String)">
            <summary>
            Deserializes the XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <returns>T.</returns>
        </member>
        <member name="M:XmlSupport.DeserializeXml(System.String,System.Type)">
            <summary>
            Deserializes the XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="tp">The tp.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:XmlSupport.SerializeXml(System.Object)">
            <summary>
            Serializes the XML.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ResultLogger">
            <summary>
            Class ResultLogger.
            </summary>
        </member>
        <member name="M:ResultLogger.logObject(System.Object)">
            <summary>
            Logs the object.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:ResultLogger.logArraylist(System.Collections.ArrayList)">
            <summary>
            Logs the arraylist.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:ResultLogger.logHashtable(System.Collections.Hashtable)">
            <summary>
            Logs the hashtable.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:ResultLogger.addHashtableToString(System.Text.StringBuilder,System.Collections.Hashtable)">
            <summary>
            Adds the hashtable to string.
            </summary>
            <param name="builder">The builder.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ResultLogger.addArraylistToString(System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds the arraylist to string.
            </summary>
            <param name="builder">The builder.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:UnitySerializerNG.ComponentDependencies">
            <summary>
            Class ComponentDependencies.
            </summary>
        </member>
        <member name="M:UnitySerializerNG.ComponentDependencies.ResolveTypeRequirement(System.Type)">
            <summary>
            Resolves the type requirement.
            </summary>
            <param name="requiredType">Type of the required.</param>
            <returns>Type.</returns>
        </member>
        <member name="T:UnitySerializerNG.FilePreferences.DataContainer`1">
            <summary>
            Class DataContainer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitySerializerNG.FilePreferences.DataContainer`1"/> class.
            </summary>
            <param name="filename">The filename.</param>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>T.</returns>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.Set(System.String,`0)">
            <summary>
            Sets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.DataContainer`1.Find(System.String)">
            <summary>
            Finds the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:UnitySerializerNG.FilePreferences.SaveOnQuit">
            <summary>
            Class SaveOnQuit.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:UnitySerializerNG.FilePreferences.SaveOnQuit.Instances">
            <summary>
            Gets the instances.
            </summary>
            <value>The instances.</value>
        </member>
        <member name="M:UnitySerializerNG.FilePreferences.SaveOnQuit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnitySerializerNG.FilePreferences.SaveOnQuit"/> class.
            </summary>
        </member>
        <member name="T:EmptyObjectIdentifier">
            <summary>
            Class EmptyObjectIdentifier.
            </summary>
        </member>
        <member name="M:EmptyObjectIdentifier.Awake">
            <summary>
            Awakes this instance.
            </summary>
        </member>
        <member name="M:EmptyObjectIdentifier.FlagAll(UnityEngine.GameObject)">
            <summary>
            Flags all.
            </summary>
            <param name="gameObject">The game object.</param>
        </member>
        <member name="T:InRangeItem">
            <summary>
            Class InRangeItem.
            </summary>
        </member>
        <member name="T:LevelLoader">
            <summary>
            Class LevelLoader.
            </summary>
        </member>
        <member name="T:LevelLoader.CreateObjectDelegate">
            <summary>
            Delegate CreateObjectDelegate
            </summary>
            <param name="prefab">The prefab.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
        </member>
        <member name="T:LevelLoader.SerializedComponentDelegate">
            <summary>
            Delegate SerializedComponentDelegate
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="componentName">Name of the component.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
        </member>
        <member name="T:LevelLoader.SerializedObjectDelegate">
            <summary>
            Delegate SerializedObjectDelegate
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
        </member>
        <member name="F:LevelLoader.Current">
            <summary>
            The current
            </summary>
        </member>
        <member name="F:LevelLoader.rootObject">
            <summary>
            The root object
            </summary>
        </member>
        <member name="F:LevelLoader.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:LevelLoader.DontDelete">
            <summary>
            The dont delete
            </summary>
        </member>
        <member name="F:LevelLoader.Last">
            <summary>
            The last
            </summary>
        </member>
        <member name="F:LevelLoader.showGUI">
            <summary>
            The show GUI
            </summary>
        </member>
        <member name="F:LevelLoader.timeScaleAfterLoading">
            <summary>
            The time scale after loading
            </summary>
        </member>
        <member name="F:LevelLoader.whenCompleted">
            <summary>
            The when completed
            </summary>
        </member>
        <member name="E:LevelLoader.CreateGameObject">
            <summary>
            Occurs when [create game object].
            </summary>
        </member>
        <member name="E:LevelLoader.OnDestroyObject">
            <summary>
            Occurs when [on destroy object].
            </summary>
        </member>
        <member name="E:LevelLoader.LoadData">
            <summary>
            Occurs when [load data].
            </summary>
        </member>
        <member name="E:LevelLoader.LoadComponent">
            <summary>
            Occurs when [load component].
            </summary>
        </member>
        <member name="E:LevelLoader.LoadedComponent">
            <summary>
            Occurs when [loaded component].
            </summary>
        </member>
        <member name="F:LevelLoader.guiColor">
            <summary>
            The GUI color
            </summary>
        </member>
        <member name="M:LevelLoader.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:LevelLoader.Load(System.Int32,System.Single)">
            <summary>
            Loads the specified number of frames.
            </summary>
            <param name="numberOfFrames">The number of frames.</param>
            <param name="timeScale">The time scale.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:ComponentSerializerFor">
            <summary>
              Declares a class that serializes a derivation of Component
            </summary>
        </member>
        <member name="F:ComponentSerializerFor.SerializesType">
            <summary>
            The serializes type
            </summary>
        </member>
        <member name="M:ComponentSerializerFor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentSerializerFor"/> class.
            </summary>
            <param name="serializesType">Type of the serializes.</param>
        </member>
        <member name="T:SerializerPlugIn">
            <summary>
            Class SerializerPlugIn.
            </summary>
        </member>
        <member name="T:SuspendLevelSerialization">
            <summary>
            Class SuspendLevelSerialization.
            </summary>
        </member>
        <member name="T:IComponentSerializer">
            <summary>
            Interface IComponentSerializer
            </summary>
        </member>
        <member name="M:IComponentSerializer.Serialize(UnityEngine.Component)">
            <summary>
              Serialize the specified component to a byte array
            </summary>
            <param name='component'> Component to be serialized </param>
        </member>
        <member name="M:IComponentSerializer.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
              Deserialize the specified data into the instance.
            </summary>
            <param name='data'> The data that represents the component, produced by Serialize </param>
            <param name='instance'> The instance to target </param>
        </member>
        <member name="T:IControlSerialization">
            <summary>
            Interface IControlSerialization
            </summary>
        </member>
        <member name="M:IControlSerialization.ShouldSave">
            <summary>
            Shoulds the save.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:IControlSerializationEx">
            <summary>
            Interface IControlSerializationEx
            </summary>
        </member>
        <member name="M:IControlSerializationEx.ShouldSaveWholeObject">
            <summary>
            Shoulds the save whole object.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:LevelSerializer">
            <summary>
              Level serializer - this class is the main interaction point for
            saving and loading Unity objects and whole scenes.
            </summary>
        </member>
        <member name="T:LevelSerializer.StoreQuery">
            <summary>
            Used when querying if an item should be stored.
            </summary>
        </member>
        <member name="T:LevelSerializer.StoreComponentQuery">
            <summary>
            Delegate StoreComponentQuery
            </summary>
            <param name="component">The component.</param>
            <param name="store">if set to <c>true</c> [store].</param>
        </member>
        <member name="F:LevelSerializer.IgnoreTypes">
            <summary>
            The types which should be ignored for serialization
            </summary>
        </member>
        <member name="F:LevelSerializer.PlayerName">
            <summary>
              The name of the player.
            </summary>
        </member>
        <member name="F:LevelSerializer.SaveResumeInformation">
            <summary>
            Whether resume information should be saved when saving the level
            </summary>
        </member>
        <member name="F:LevelSerializer.SerializationMode">
            <summary>
              The serialization caching mode
            </summary>
        </member>
        <member name="F:LevelSerializer.MaxGames">
            <summary>
              The max games that will be stored.
            </summary>
        </member>
        <member name="F:LevelSerializer.SavedGames">
            <summary>
              The saved games.
            </summary>
        </member>
        <member name="F:LevelSerializer.IsDeserializing">
            <summary>
            Indicates whether the system is deserializing a level
            </summary>
        </member>
        <member name="F:LevelSerializer.useCompression">
            <summary>
            Should the system use compression
            </summary>
        </member>
        <member name="M:LevelSerializer.SaveObjectTreeToFile(System.String,UnityEngine.GameObject)">
            <summary>
            Saves a particular object tree to a file.  The file will be
            saved beneath Application.persistentDataPath
            </summary>
            <param name='filename'>
            The filename to save the object tree into
            </param>
            <param name='rootOfTree'>
            The root of the tree
            </param>
        </member>
        <member name="M:LevelSerializer.LoadObjectTreeFromFile(System.String,System.Action{LevelLoader})">
            <summary>
            Loads an object tree into the current scene from a file
            </summary>
            <param name='filename'>
            The file that should be loaded (from within Application.persistentDataPath)
            </param>
            <param name='onComplete'>
            A method call to make when loading is complete
            </param>
        </member>
        <member name="M:LevelSerializer.SerializeLevelToFile(System.String,System.Boolean)">
            <summary>
            Serializes the level to a file
            </summary>
            <param name='filename'>
            The filename to use
            </param>
            <param name="usePersistentDataPath">
            Is filename just a filename in Application.persistentDataPath or a whole path?
            </param>
        </member>
        <member name="M:LevelSerializer.LoadSavedLevelFromFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a level from a file
            </summary>
            <param name='filename'>
            The filename to use
            </param>
            <param name="usePersistentDataPath">
            Is filename just a filename in Application.persistentDataPath or a whole path?
            </param>
            <param name="showGUI">
            Should the screen fade?
            </param>
        </member>
        <member name="M:LevelSerializer.SaveObjectTreeToServer(System.String,UnityEngine.GameObject,System.String,System.String,System.Action{System.Exception})">
            <summary>
            Saves an object tree to a server using POST or STOR
            </summary>
            <param name='uri'>
            The url to save the tree to e.g. ftp://whydoidoit.net/Downloads/someFile.txt
            </param>
            <param name='rootOfTree'>
            The object to be saved
            </param>
            <param name='userName'>
            The user name (if required)
            </param>
            <param name='password'>
            The password (if required)
            </param>
            <param name='onComplete'>
            A function to call when the upload is complete
            </param>
        </member>
        <member name="M:LevelSerializer.LoadObjectTreeFromServer(System.String,System.Action{LevelLoader})">
            <summary>
            Loads an object tree from a server
            </summary>
            <param name='uri'>
            The url to load the object tree from
            </param>
            <param name='onComplete'>
            A method to call when the load is complete
            </param>
        </member>
        <member name="M:LevelSerializer.SerializeLevelToServer(System.String,System.String,System.String,System.Action{System.Exception})">
            <summary>
            Serializes the level to a server.
            </summary>
            <param name='uri'>
            The url of the location for the stored data.  ftp://whydoidoit.net/Downloads/someFile.dat
            </param>
            <param name='userName'>
            User name if required
            </param>
            <param name='password'>
            Password if required
            </param>
            <param name='onComplete'>
            A method to call when the serialization is complete
            </param>
        </member>
        <member name="M:LevelSerializer.LoadSavedLevelFromServer(System.String)">
            <summary>
            Loads the saved level from a server url.
            </summary>
            <param name='uri'>
            The url of the server to load the data from
            </param>
        </member>
        <member name="P:LevelSerializer.CanResume">
            <summary>
            Gets a value indicating whether this instance can resume (there is resume data)
            </summary>
            <value>
            <c>true</c> if this instance can resume; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LevelSerializer.IsSuspended">
            <summary>
              Gets a value indicating whether this instance is suspended.
            </summary>
            <value> <c>true</c> if this instance is suspended; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:LevelSerializer.SuspensionCount">
            <summary>
              Gets the serialization suspension count.
            </summary>
            <value> The suspension count. </value>
        </member>
        <member name="E:LevelSerializer.Deserialized">
            <summary>
              Occurs when the level was deserialized
            </summary>
        </member>
        <member name="E:LevelSerializer.GameSaved">
            <summary>
              Occurs when the level was serialized.
            </summary>
        </member>
        <member name="E:LevelSerializer.SuspendingSerialization">
            <summary>
              Occurs when suspending serialization.
            </summary>
        </member>
        <member name="E:LevelSerializer.ResumingSerialization">
            <summary>
              Occurs when resuming serialization.
            </summary>
        </member>
        <member name="E:LevelSerializer.Store">
            <summary>
            Raised to check whehter a particular item should be stored
            </summary>
        </member>
        <member name="E:LevelSerializer.StoreComponent">
            <summary>
            Occurs when [store component].
            </summary>
        </member>
        <member name="M:LevelSerializer.Resume">
            <summary>
              Resume for a stored game state that wasn't directly saved
            </summary>
        </member>
        <member name="M:LevelSerializer.Checkpoint">
            <summary>
              Create a resumption checkpoint
            </summary>
        </member>
        <member name="M:LevelSerializer.ClearCheckpoint">
            <summary>
            Clears the checkpoint.
            </summary>
        </member>
        <member name="M:LevelSerializer.ClearCheckpoint(System.Boolean)">
            <summary>
            Clears the checkpoint.
            </summary>
            <param name="store">if set to <c>true</c> [store].</param>
        </member>
        <member name="M:LevelSerializer.SuspendSerialization">
            <summary>
              Suspends the serialization. Must resume as many times as you suspend
            </summary>
        </member>
        <member name="M:LevelSerializer.ResumeSerialization">
            <summary>
              Resumes the serialization. Must be balanced with calls to SuspendSerialization
            </summary>
        </member>
        <member name="M:LevelSerializer.IgnoreType(System.String)">
            <summary>
              Ignores the type of component when saving games.
            </summary>
            <param name='typename'> Typename of the component to ignore </param>
        </member>
        <member name="M:LevelSerializer.UnIgnoreType(System.String)">
            <summary>
            Remove a type from the ignore list
            </summary>
            <param name='typename'>
            Typename to remove
            </param>
        </member>
        <member name="M:LevelSerializer.IgnoreType(System.Type)">
            <summary>
              Ignores the type of component when saving games.
            </summary>
            <param name='tp'> The type of the component to ignore </param>
        </member>
        <member name="M:LevelSerializer.CreateSaveEntry(System.String,System.Boolean)">
            <summary>
              Creates a saved game for the current position
            </summary>
            <returns> The new save entry. </returns>
            <param name='name'> A name for the save entry </param>
            <param name='urgent'> An urgent save will store the current state, even if suspended. In this case it is likely that clean up will be necessary by handing Deserialized messages or responding to the LevelSerializer.Deserialized event </param>
        </member>
        <member name="M:LevelSerializer.SaveGame(System.String)">
            <summary>
              Saves the game.
            </summary>
            <param name='name'> The name to use for the game </param>
        </member>
        <member name="M:LevelSerializer.SaveGame(System.String,System.Boolean,System.Action{System.String,System.Boolean})">
            <summary>
            Saves the game.
            </summary>
            <param name="name">The name.</param>
            <param name="urgent">if set to <c>true</c> [urgent].</param>
            <param name="perform">The perform.</param>
        </member>
        <member name="M:LevelSerializer.SaveDataToFilePrefs">
            <summary>
              Saves the stored game data to player prefs.
            </summary>
        </member>
        <member name="M:LevelSerializer.RegisterAssembly">
            <summary>
              Registers the calling assembly as one providing serialization extensions.
            </summary>
        </member>
        <member name="M:LevelSerializer.AddPrefabPath(System.String)">
            <summary>
              Adds the prefab path.
            </summary>
            <param name='path'> A resource path that contains prefabs to be created for the game </param>
        </member>
        <member name="M:LevelSerializer.DontCollect">
            <summary>
            Dont garbage collect during deserialization
            </summary>
        </member>
        <member name="M:LevelSerializer.Collect">
            <summary>
            Enable garbage collection during deserialization
            </summary>
        </member>
        <member name="P:LevelSerializer.ShouldCollect">
            <summary>
            Gets a value indicating whether this <see cref="T:LevelSerializer"/> should garbage collect.
            </summary>
            <value>
            <c>true</c> if should collect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LevelSerializer.SerializeLevel">
            <summary>
              Serializes the level to a string
            </summary>
            <returns> The level data as a string </returns>
            <exception>Is thrown when the serization was suspended
              <cref>SerizationSuspendedException</cref>
            </exception>
        </member>
        <member name="M:LevelSerializer.SerializeLevel(System.Boolean)">
            <summary>
              Serializes the level.
            </summary>
            <returns> The level stored as a string. </returns>
            <param name='urgent'> Whether to ignore an suspension of serialization </param>
            <exception cref='T:LevelSerializer.SerializationSuspendedException'>Is thrown when the serialization was suspended and urgent was not specified</exception>
        </member>
        <member name="M:LevelSerializer.GetComponentsInChildrenWithClause(UnityEngine.GameObject)">
            <summary>
              Internal function
            </summary>
        </member>
        <member name="E:LevelSerializer.Progress">
            <summary>
            Occurs when progress occurs during the deserialization/serialization process
            </summary>
        </member>
        <member name="M:LevelSerializer.SaveObjectTree(UnityEngine.GameObject)">
            <summary>
            Save an objects tree so it can be reloaded later
            </summary>
            <param name="rootOfTree">The object at the root of the tree</param>
            <returns></returns>
        </member>
        <member name="E:LevelSerializer.BeginLoad">
            <summary>
            Occurs before any loading is done.
            </summary>
        </member>
        <member name="M:LevelSerializer.SerializeLevel(System.Boolean,System.String)">
            <summary>
              Serializes the level to a byte array, with an optional root item. The root item
              and its children, if specified, will be the only things saved
            </summary>
            <returns> The level data as a byte array </returns>
            <param name='urgent'> Whether to save even if serialization is suspended </param>
            <param name='id'> Identifier (or null) of an object to be the root of the data serialization </param>
        </member>
        <member name="M:LevelSerializer.LoadObjectTree(System.Byte[],System.Action{LevelLoader})">
            <summary>
            Reload an object tree
            </summary>
            <param name="data">The data for the tree to be loaded</param>
            <param name="onComplete">A function to call when the load is complete</param>
        </member>
        <member name="M:LevelSerializer.LoadNow(System.Object)">
            <summary>
            Loads the now.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:LevelSerializer.LoadNow(System.Object,System.Boolean)">
            <summary>
            Loads the now.
            </summary>
            <param name="data">The data.</param>
            <param name="dontDeleteExistingItems">if set to <c>true</c> [dont delete existing items].</param>
        </member>
        <member name="M:LevelSerializer.LoadNow(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Loads the now.
            </summary>
            <param name="data">The data.</param>
            <param name="dontDeleteExistingItems">if set to <c>true</c> [dont delete existing items].</param>
            <param name="showLoadingGUI">if set to <c>true</c> [show loading GUI].</param>
        </member>
        <member name="M:LevelSerializer.LoadNow(System.Object,System.Boolean,System.Boolean,System.Action{LevelLoader})">
            <summary>
            Loads the now.
            </summary>
            <param name="data">The data.</param>
            <param name="dontDeleteExistingItems">if set to <c>true</c> [dont delete existing items].</param>
            <param name="showLoadingGUI">if set to <c>true</c> [show loading GUI].</param>
            <param name="complete">The complete.</param>
            <exception cref="T:System.ArgumentException">data parameter must be either a byte[] or a base64 encoded string</exception>
        </member>
        <member name="M:LevelSerializer.LoadSavedLevel(System.String,System.Boolean)">
            <summary>
              Loads the saved level.
            </summary>
            <param name='data'> The data describing the level to load </param>
            <param name="showGUI"> Should the screen fade? </param>
        </member>
        <member name="M:LevelSerializer.CompareGameObjects.Equals(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Equalses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LevelSerializer.CompareGameObjects.GetHashCode(UnityEngine.GameObject)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="F:LevelSerializer.CompareGameObjects.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="T:LevelSerializer.LevelData">
            <summary>
            The data stored for a level
            </summary>
        </member>
        <member name="F:LevelSerializer.LevelData.Name">
            <summary>
            The name of the level that was saved
            </summary>
        </member>
        <member name="F:LevelSerializer.LevelData.StoredItems">
            <summary>
            All of the items that were saved
            </summary>
        </member>
        <member name="F:LevelSerializer.LevelData.StoredObjectNames">
            <summary>
            All of the names of items saved
            </summary>
        </member>
        <member name="F:LevelSerializer.LevelData.rootObject">
            <summary>
            The root object
            </summary>
        </member>
        <member name="M:LevelSerializer.ProgressHelper.SetProgress(System.Int64,System.Int64)">
            <summary>
            Sets the progress.
            </summary>
            <param name="inSize">Size of the in.</param>
            <param name="outSize">Size of the out.</param>
        </member>
        <member name="T:LevelSerializer.SaveEntry">
            <summary>
              A saved game entry
            </summary>
        </member>
        <member name="F:LevelSerializer.SaveEntry.Data">
            <summary>
              The data about the saved game
            </summary>
        </member>
        <member name="F:LevelSerializer.SaveEntry.Level">
            <summary>
              The name of the unity scene
            </summary>
        </member>
        <member name="F:LevelSerializer.SaveEntry.Name">
            <summary>
              The name provided for the saved game.
            </summary>
        </member>
        <member name="F:LevelSerializer.SaveEntry.When">
            <summary>
              The time that the game was saved
            </summary>
        </member>
        <member name="M:LevelSerializer.SaveEntry.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LevelSerializer.SaveEntry" /> class.
            </summary>
            <param name='contents'> The string representing the data of the saved game (use .ToString()) </param>
        </member>
        <member name="M:LevelSerializer.SaveEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LevelSerializer.SaveEntry"/> class.
            </summary>
        </member>
        <member name="P:LevelSerializer.SaveEntry.Caption">
            <summary>
              Gets the caption.
            </summary>
            <value> The caption which is a combination of the name, the level and the time that the game was saved </value>
        </member>
        <member name="M:LevelSerializer.SaveEntry.Load">
            <summary>
              Load this saved game
            </summary>
        </member>
        <member name="M:LevelSerializer.SaveEntry.Delete">
            <summary>
              Delete this saved game
            </summary>
        </member>
        <member name="M:LevelSerializer.SaveEntry.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents the current <see cref="T:LevelSerializer.SaveEntry" />.
            </summary>
            <returns> A <see cref="T:System.String" /> that represents the current <see cref="T:LevelSerializer.SaveEntry" /> . </returns>
        </member>
        <member name="T:LevelSerializer.SerializationHelper">
            <summary>
              Checks for the ability to serialize
            </summary>
        </member>
        <member name="F:LevelSerializer.SerializationHelper.gameName">
            <summary>
            The game name
            </summary>
        </member>
        <member name="F:LevelSerializer.SerializationHelper.perform">
            <summary>
            The perform
            </summary>
        </member>
        <member name="T:LevelSerializer.SerializationSuspendedException">
            <summary>
            Class SerializationSuspendedException.
            </summary>
        </member>
        <member name="M:LevelSerializer.SerializationSuspendedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LevelSerializer.SerializationSuspendedException"/> class.
            </summary>
        </member>
        <member name="T:LevelSerializer.StoredData">
            <summary>
            Class StoredData.
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredData.ClassId">
            <summary>
            The class identifier
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredData.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredData.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="T:LevelSerializer.StoredItem">
            <summary>
            Class StoredItem.
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.Active">
            <summary>
            The active
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.layer">
            <summary>
            The layer
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.setExtraData">
            <summary>
            The set extra data
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.ChildIds">
            <summary>
            The child ids
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.Children">
            <summary>
            The children
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.ClassId">
            <summary>
            The class identifier
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.Components">
            <summary>
            The components
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.GameObject">
            <summary>
            The game object
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.GameObjectName">
            <summary>
            The game object name
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.ParentName">
            <summary>
            The parent name
            </summary>
        </member>
        <member name="F:LevelSerializer.StoredItem.createEmptyObject">
            <summary>
            The create empty object
            </summary>
        </member>
        <member name="M:LevelSerializer.StoredItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:SerializeAnimations">
            <summary>
            Class SerializeAnimations.
            </summary>
        </member>
        <member name="T:SerializeAnimations.StoredState">
            <summary>
            Class StoredState.
            </summary>
        </member>
        <member name="F:SerializeAnimations.StoredState.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:SerializeAnimations.StoredState.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:SerializeAnimations.StoredState.asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="M:SerializeAnimations.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeAnimations.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:FieldSerializer">
            <summary>
            Class FieldSerializer.
            </summary>
        </member>
        <member name="M:FieldSerializer.SerializeFields(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.String[])">
            <summary>
            Serializes the fields.
            </summary>
            <param name="storage">The storage.</param>
            <param name="obj">The object.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:FieldSerializer.DeserializeFields(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            Deserializes the fields.
            </summary>
            <param name="storage">The storage.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:OnlyInRangeManager">
            <summary>
            Class OnlyInRangeManager.
            </summary>
        </member>
        <member name="T:OnlyInRangeManager.InRange">
            <summary>
            Class InRange.
            </summary>
        </member>
        <member name="F:OnlyInRangeManager.InRange.transform">
            <summary>
            The transform
            </summary>
        </member>
        <member name="F:OnlyInRangeManager.InRange.lastPosition">
            <summary>
            The last position
            </summary>
        </member>
        <member name="P:OnlyInRangeManager.InRange.inprogress">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:OnlyInRangeManager.InRange"/> is inprogress.
            </summary>
            <value><c>true</c> if inprogress; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:OnlyInRangeManager.InRange.id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:OnlyInRangeManager.InRange.count">
            <summary>
            The count
            </summary>
        </member>
        <member name="M:OnlyInRangeManager.InRange.Test(OnlyInRangeManager,UnityEngine.Vector3,System.Single)">
            <summary>
            Tests the specified manager.
            </summary>
            <param name="manager">The manager.</param>
            <param name="position">The position.</param>
            <param name="sqrRange">The SQR range.</param>
        </member>
        <member name="F:OnlyInRangeManager.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:OnlyInRangeManager.AddRangedItem(UnityEngine.GameObject)">
            <summary>
            Adds the ranged item.
            </summary>
            <param name="go">The go.</param>
        </member>
        <member name="M:OnlyInRangeManager.DestroyRangedItem(UnityEngine.GameObject)">
            <summary>
            Destroys the ranged item.
            </summary>
            <param name="go">The go.</param>
        </member>
        <member name="F:OnlyInRangeManager.range">
            <summary>
            The range
            </summary>
        </member>
        <member name="T:FilePrefs">
            <summary>
            Class FilePrefs.
            </summary>
        </member>
        <member name="M:FilePrefs.DeleteAll">
            <summary>
            Deletes all.
            </summary>
        </member>
        <member name="M:FilePrefs.DeleteKey(System.String)">
            <summary>
            Deletes the key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:FilePrefs.GetFloat(System.String)">
            <summary>
            Gets the float.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:FilePrefs.GetInt(System.String)">
            <summary>
            Gets the int.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FilePrefs.GetString(System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FilePrefs.HasKey(System.String)">
            <summary>
            Determines whether the specified key has key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key has key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FilePrefs.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:FilePrefs.SetFloat(System.String,System.Single)">
            <summary>
            Sets the float.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FilePrefs.SetInt(System.String,System.Int32)">
            <summary>
            Sets the int.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FilePrefs.SetString(System.String,System.String)">
            <summary>
            Sets the string.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:PrefabIdentifier">
            <summary>
            Class PrefabIdentifier.
            </summary>
        </member>
        <member name="M:PrefabIdentifier.IsInScene">
            <summary>
            Determines whether [is in scene].
            </summary>
            <returns><c>true</c> if [is in scene]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PrefabIdentifier.Awake">
            <summary>
            Awakes this instance.
            </summary>
        </member>
        <member name="T:PreWarm">
            <summary>
            This class is used to compress metadata that would otherwise inflate the size of the save files.
            Instead of serializing the complete type and property information, only the index inside these array
            is serialized.
            </summary>
        </member>
        <member name="F:PreWarm.PrewarmNames">
            <summary>
            The prewarm names
            </summary>
        </member>
        <member name="F:PreWarm.PrewarmTypes">
            <summary>
            The prewarm types
            </summary>
        </member>
        <member name="T:RemoveEditors">
            <summary>
            Class RemoveEditors.
            </summary>
        </member>
        <member name="T:DontStoreObjectInRoom">
            <summary>
            Class DontStoreObjectInRoom.
            </summary>
        </member>
        <member name="F:DontStoreObjectInRoom.preserveThisObjectWhenLoading">
            <summary>
            The preserve this object when loading
            </summary>
        </member>
        <member name="M:DontStoreObjectInRoom.ShouldSaveWholeObject">
            <summary>
            Shoulds the save whole object.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DontStoreObjectInRoom.ShouldSave">
            <summary>
            Shoulds the save.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:PlayerLocator">
            <summary>
            Class PlayerLocator.
            </summary>
        </member>
        <member name="F:PlayerLocator.Current">
            <summary>
            The current
            </summary>
        </member>
        <member name="F:PlayerLocator.PlayerGameObject">
            <summary>
            The player game object
            </summary>
        </member>
        <member name="T:PlayerSpawnPoint">
            <summary>
            Class PlayerSpawnPoint.
            </summary>
        </member>
        <member name="F:PlayerSpawnPoint.currentSpawnPoint">
            <summary>
            The current spawn point
            </summary>
        </member>
        <member name="P:PlayerSpawnPoint.current">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:PlayerSpawnPoint"/> is current.
            </summary>
            <value><c>true</c> if current; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:PreserveObjectWhenLoading">
            <summary>
            Class PreserveObjectWhenLoading.
            </summary>
        </member>
        <member name="T:Room">
            <summary>
            Class Room.
            </summary>
        </member>
        <member name="F:Room.Current">
            <summary>
            The current
            </summary>
        </member>
        <member name="M:Room.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="T:RoomDataSaveGameStorage">
            <summary>
            Class RoomDataSaveGameStorage.
            </summary>
        </member>
        <member name="P:RoomDataSaveGameStorage.roomData">
            <summary>
            Gets or sets the room data.
            </summary>
            <value>The room data.</value>
        </member>
        <member name="T:RoomLoader">
            <summary>
            Class RoomLoader.
            </summary>
        </member>
        <member name="T:RoomManager">
            <summary>
            Class RoomManager.
            </summary>
        </member>
        <member name="F:RoomManager.savingRoom">
            <summary>
            The saving room
            </summary>
        </member>
        <member name="F:RoomManager.loadingRoom">
            <summary>
            The loading room
            </summary>
        </member>
        <member name="F:RoomManager.rooms">
            <summary>
            The rooms
            </summary>
        </member>
        <member name="M:RoomManager.SaveCurrentRoom">
            <summary>
            Saves the current room.
            </summary>
        </member>
        <member name="M:RoomManager.LoadRoom(System.String)">
            <summary>
            Loads the room.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:RoomManager.LoadRoom(System.String,System.Boolean)">
            <summary>
            Loads the room.
            </summary>
            <param name="name">The name.</param>
            <param name="showGUI">if set to <c>true</c> [show GUI].</param>
        </member>
        <member name="T:SaveGameManager">
            <summary>
            Class SaveGameManager.
            </summary>
        </member>
        <member name="F:SaveGameManager.requiredObjects">
            <summary>
            The required objects
            </summary>
        </member>
        <member name="P:SaveGameManager.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="F:SaveGameManager.hasRun">
            <summary>
            The has run
            </summary>
        </member>
        <member name="M:SaveGameManager.Loaded">
            <summary>
            Loadeds this instance.
            </summary>
        </member>
        <member name="T:SaveGameManager.StoredEntry">
            <summary>
            Class StoredEntry.
            </summary>
        </member>
        <member name="F:SaveGameManager.StoredEntry.gameObject">
            <summary>
            The game object
            </summary>
        </member>
        <member name="F:SaveGameManager.StoredEntry.Id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:SaveGameManager.Reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="M:SaveGameManager.GetById(System.String)">
            <summary>
            Gets the by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:SaveGameManager.SetId(UnityEngine.GameObject,System.String)">
            <summary>
            Sets the identifier.
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:SaveGameManager.GetId(UnityEngine.GameObject)">
            <summary>
            Gets the identifier.
            </summary>
            <param name="gameObject">The game object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:SaveGameManager.Initialize(System.Action)">
            <summary>
            Initializes the specified a.
            </summary>
            <param name="a">a.</param>
        </member>
        <member name="M:SaveGameManager.GetAssetId(UnityEngine.Object)">
            <summary>
            Gets the asset identifier.
            </summary>
            <param name="referencedObject">The referenced object.</param>
            <returns>AssetReference.</returns>
        </member>
        <member name="T:SaveGameManager.AssetReference">
            <summary>
            Class AssetReference.
            </summary>
        </member>
        <member name="F:SaveGameManager.AssetReference.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:SaveGameManager.AssetReference.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:SaveGameManager.AssetReference.index">
            <summary>
            The index
            </summary>
        </member>
        <member name="M:SaveGameManager.GetAsset(SaveGameManager.AssetReference)">
            <summary>
            Gets the asset.
            </summary>
            <param name="id">The identifier.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Storage">
            <summary>
            Class Storage.
            </summary>
        </member>
        <member name="M:Storage.SerializeToString(System.Object)">
            <summary>
            Serializes to string.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Storage.Deserialize(System.String)">
            <summary>
            Deserializes the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:StoredReferences">
            <summary>
            Class StoredReferences.
            </summary>
        </member>
        <member name="M:StoredReferences.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:StoredReferences.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:StoredReferences.AllReferences">
            <summary>
            Gets all references.
            </summary>
            <value>All references.</value>
        </member>
        <member name="F:StoredReferences.entries">
            <summary>
            The entries
            </summary>
        </member>
        <member name="P:StoredReferences.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:SaveGameManager.StoredEntry"/> with the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>SaveGameManager.StoredEntry.</returns>
        </member>
        <member name="P:StoredReferences.Item(UnityEngine.GameObject)">
            <summary>
            Gets or sets the <see cref="T:SaveGameManager.StoredEntry"/> with the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>SaveGameManager.StoredEntry.</returns>
        </member>
        <member name="M:StoredReferences.Remove(UnityEngine.GameObject)">
            <summary>
            Removes the specified go.
            </summary>
            <param name="go">The go.</param>
        </member>
        <member name="M:StoredReferences.Alive">
            <summary>
            Alives this instance.
            </summary>
            <returns>StoredReferences.</returns>
        </member>
        <member name="T:StoreInformation">
            <summary>
            Class StoreInformation.
            </summary>
        </member>
        <member name="F:StoreInformation.StoreAllComponents">
            <summary>
            The store all components
            </summary>
        </member>
        <member name="F:StoreInformation.Components">
            <summary>
            The components
            </summary>
        </member>
        <member name="M:StoreInformation.Awake">
            <summary>
            Awakes this instance.
            </summary>
        </member>
        <member name="T:StoreMesh">
            <summary>
            Class StoreMesh.
            </summary>
        </member>
        <member name="F:StoreMesh.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:StoreMesh.normals">
            <summary>
            The normals
            </summary>
        </member>
        <member name="F:StoreMesh.uv">
            <summary>
            The uv
            </summary>
        </member>
        <member name="F:StoreMesh.uv1">
            <summary>
            The uv1
            </summary>
        </member>
        <member name="F:StoreMesh.uv2">
            <summary>
            The uv2
            </summary>
        </member>
        <member name="F:StoreMesh.colors">
            <summary>
            The colors
            </summary>
        </member>
        <member name="F:StoreMesh.triangles">
            <summary>
            The triangles
            </summary>
        </member>
        <member name="F:StoreMesh.tangents">
            <summary>
            The tangents
            </summary>
        </member>
        <member name="F:StoreMesh.subMeshCount">
            <summary>
            The sub mesh count
            </summary>
        </member>
        <member name="T:TimeAsFloat">
            <summary>
            Class TimeAsFloat.
            </summary>
        </member>
        <member name="M:TimeAsFloat.Serialize(System.Object)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TimeAsFloat.Deserialize(System.Object)">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:StoreComponent">
            <summary>
            Store this component when saving data
            </summary>
        </member>
        <member name="T:DontStoreAttribute">
            <summary>
            Class DontStoreAttribute.
            </summary>
        </member>
        <member name="T:UniqueIdentifier">
            <summary>
            Class UniqueIdentifier.
            </summary>
        </member>
        <member name="F:UniqueIdentifier.IsDeserializing">
            <summary>
            The is deserializing
            </summary>
        </member>
        <member name="F:UniqueIdentifier._id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="P:UniqueIdentifier.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:UniqueIdentifier.AllIdentifiers">
            <summary>
            Gets or sets all identifiers.
            </summary>
            <value>All identifiers.</value>
        </member>
        <member name="F:UniqueIdentifier.classId">
            <summary>
            The class identifier
            </summary>
        </member>
        <member name="P:UniqueIdentifier.ClassId">
            <summary>
            Gets or sets the class identifier.
            </summary>
            <value>The class identifier.</value>
        </member>
        <member name="M:UniqueIdentifier.Awake">
            <summary>
            Awakes this instance.
            </summary>
        </member>
        <member name="M:UniqueIdentifier.FullConfigure">
            <summary>
            Fulls the configure.
            </summary>
        </member>
        <member name="M:UniqueIdentifier.GetByName(System.String)">
            <summary>
            Gets the name of the by.
            </summary>
            <param name="id">The identifier.</param>
            <returns>GameObject.</returns>
        </member>
        <member name="T:SerializationHelper">
            <summary>
            Class SerializationHelper.
            </summary>
        </member>
        <member name="M:SerializationHelper.IsDeserializing(UnityEngine.GameObject)">
            <summary>
            Determines whether the specified go is deserializing.
            </summary>
            <param name="go">The go.</param>
            <returns><c>true</c> if the specified go is deserializing; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SerializeVector2">
            <summary>
            Class SerializeVector2.
            </summary>
        </member>
        <member name="M:SerializeVector2.Save(UnityEngine.Vector2)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeVector2.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeVector3">
            <summary>
            Class SerializeVector3.
            </summary>
        </member>
        <member name="M:SerializeVector3.Save(UnityEngine.Vector3)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeVector3.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeVector4">
            <summary>
            Class SerializeVector4.
            </summary>
        </member>
        <member name="M:SerializeVector4.Save(UnityEngine.Vector4)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeVector4.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeQuaternion">
            <summary>
            Class SerializeQuaternion.
            </summary>
        </member>
        <member name="M:SerializeQuaternion.Save(UnityEngine.Quaternion)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeQuaternion.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeColor">
            <summary>
            Class SerializeColor.
            </summary>
        </member>
        <member name="M:SerializeColor.Save(UnityEngine.Color)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeColor.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeAnimationState">
            <summary>
            Class SerializeAnimationState.
            </summary>
        </member>
        <member name="M:SerializeAnimationState.Save(UnityEngine.AnimationState)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeAnimationState.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeWaitForSeconds">
            <summary>
            Class SerializeWaitForSeconds.
            </summary>
        </member>
        <member name="M:SerializeWaitForSeconds.Save(UnityEngine.WaitForSeconds)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeWaitForSeconds.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeBounds">
            <summary>
            Class SerializeBounds.
            </summary>
        </member>
        <member name="M:SerializeBounds.Save(UnityEngine.Bounds)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeBounds.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ComponentSerializerExtensionBase`1">
            <summary>
            Class ComponentSerializerExtensionBase.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComponentSerializerExtensionBase`1.Save(`0)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ComponentSerializerExtensionBase`1.LoadInto(System.Object[],`0)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ComponentSerializerExtensionBase`1.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ComponentSerializerExtensionBase`1.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializerExtensionBase`1">
            <summary>
            Class SerializerExtensionBase.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SerializerExtensionBase`1.Serialize(System.Object)">
            <summary>
            Serializes the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:SerializerExtensionBase`1.Deserialize(System.Object[],System.Object)">
            <summary>
            Deserializes the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:SerializerExtensionBase`1.Save(`0)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializerExtensionBase`1.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:SerializerExtensionBase`1.CanSerialize(System.Type,System.Object)">
            <summary>
            Determines whether this instance can serialize the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance can serialize the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SerializerExtensionBase`1.CanBeSerialized(System.Type,System.Object)">
            <summary>
            Determines whether this instance [can be serialized] the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance [can be serialized] the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SerializeBoxCollider">
            <summary>
            Class SerializeBoxCollider.
            </summary>
        </member>
        <member name="M:SerializeBoxCollider.Save(UnityEngine.BoxCollider)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeBoxCollider.LoadInto(System.Object[],UnityEngine.BoxCollider)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeTerrain">
            <summary>
            Class SerializeTerrain.
            </summary>
        </member>
        <member name="M:SerializeTerrain.Save(UnityEngine.Terrain)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeTerrain.LoadInto(System.Object[],UnityEngine.Terrain)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeCollider">
            <summary>
            Class SerializeCollider.
            </summary>
        </member>
        <member name="M:SerializeCollider.Save(UnityEngine.TerrainCollider)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeCollider.LoadInto(System.Object[],UnityEngine.TerrainCollider)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeMeshCollider">
            <summary>
            Class SerializeMeshCollider.
            </summary>
        </member>
        <member name="M:SerializeMeshCollider.Save(UnityEngine.MeshCollider)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeMeshCollider.LoadInto(System.Object[],UnityEngine.MeshCollider)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeWheelCollider">
            <summary>
            Class SerializeWheelCollider.
            </summary>
        </member>
        <member name="T:SerializeWheelCollider.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.Enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.brakeTorque">
            <summary>
            The brake torque
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.center">
            <summary>
            The center
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.forceAppPointDistance">
            <summary>
            The force application point distance
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.forwardFriction">
            <summary>
            The forward friction
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.mass">
            <summary>
            The mass
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.motorTorque">
            <summary>
            The motor torque
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.radius">
            <summary>
            The radius
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.sidewaysFriction">
            <summary>
            The sideways friction
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.steerAngle">
            <summary>
            The steer angle
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.suspensionDistance">
            <summary>
            The suspension distance
            </summary>
        </member>
        <member name="F:SerializeWheelCollider.StoredInformation.suspensionSpring">
            <summary>
            The suspension spring
            </summary>
        </member>
        <member name="M:SerializeWheelCollider.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeWheelCollider.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeCapsuleCollider">
            <summary>
            Class SerializeCapsuleCollider.
            </summary>
        </member>
        <member name="M:SerializeCapsuleCollider.Save(UnityEngine.CapsuleCollider)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeCapsuleCollider.LoadInto(System.Object[],UnityEngine.CapsuleCollider)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeSphereCollider">
            <summary>
            Class SerializeSphereCollider.
            </summary>
        </member>
        <member name="M:SerializeSphereCollider.Save(UnityEngine.SphereCollider)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeSphereCollider.LoadInto(System.Object[],UnityEngine.SphereCollider)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeRigidBody2D">
            <summary>
            Class SerializeRigidBody2D.
            </summary>
        </member>
        <member name="T:SerializeRigidBody2D.RigidBodyInfo">
            <summary>
            Class RigidBodyInfo.
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.angularDrag">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.angularVelocity">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.drag">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.gravityScale">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.inertia">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.mass">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.rotation">
            <summary>
            The angular drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.centerOfMass">
            <summary>
            The center of mass
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.position">
            <summary>
            The center of mass
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.velocity">
            <summary>
            The center of mass
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.collisionDetectionMode">
            <summary>
            The collision detection mode
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.freezeRotation">
            <summary>
            The freeze rotation
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.isKinematic">
            <summary>
            The freeze rotation
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.simulated">
            <summary>
            The freeze rotation
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.useAutoMass">
            <summary>
            The freeze rotation
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.interpolation">
            <summary>
            The interpolation
            </summary>
        </member>
        <member name="F:SerializeRigidBody2D.RigidBodyInfo.sleepMode">
            <summary>
            The sleep mode
            </summary>
        </member>
        <member name="M:SerializeRigidBody2D.RigidBodyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SerializeRigidBody2D.RigidBodyInfo"/> class.
            </summary>
        </member>
        <member name="M:SerializeRigidBody2D.RigidBodyInfo.#ctor(UnityEngine.Rigidbody2D)">
            <summary>
            Initializes a new instance of the <see cref="T:SerializeRigidBody2D.RigidBodyInfo"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SerializeRigidBody2D.RigidBodyInfo.Configure(UnityEngine.Rigidbody2D)">
            <summary>
            Configures the specified body.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:SerializeRigidBody2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeRigidBody2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeBoxCollider2D">
            <summary>
            Class SerializeBoxCollider2D.
            </summary>
        </member>
        <member name="T:SerializeBoxCollider2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.hasRigidbody">
            <summary>
            The has rigidbody
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.isTrigger">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.usedByEffector">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.offset">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.sharedMaterial">
            <summary>
            The shared material
            </summary>
        </member>
        <member name="F:SerializeBoxCollider2D.StoredInformation.density">
            <summary>
            The density
            </summary>
        </member>
        <member name="M:SerializeBoxCollider2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeBoxCollider2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeCircleCollider2D">
            <summary>
            Class SerializeCircleCollider2D.
            </summary>
        </member>
        <member name="T:SerializeCircleCollider2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.hasRigidbody">
            <summary>
            The has rigidbody
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.isTrigger">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.usedByEffector">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.sharedMaterial">
            <summary>
            The shared material
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.radius">
            <summary>
            The radius
            </summary>
        </member>
        <member name="F:SerializeCircleCollider2D.StoredInformation.density">
            <summary>
            The radius
            </summary>
        </member>
        <member name="M:SerializeCircleCollider2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeCircleCollider2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeEdgeCollider2D">
            <summary>
            Class SerializeEdgeCollider2D.
            </summary>
        </member>
        <member name="T:SerializeEdgeCollider2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.hasRigidbody">
            <summary>
            The has rigidbody
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.isTrigger">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.usedByEffector">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.points">
            <summary>
            The points
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.sharedMaterial">
            <summary>
            The shared material
            </summary>
        </member>
        <member name="F:SerializeEdgeCollider2D.StoredInformation.density">
            <summary>
            The density
            </summary>
        </member>
        <member name="M:SerializeEdgeCollider2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeEdgeCollider2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializePolygonCollider2D">
            <summary>
            Class SerializePolygonCollider2D.
            </summary>
        </member>
        <member name="T:SerializePolygonCollider2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.hasRigidbody">
            <summary>
            The has rigidbody
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.isTrigger">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.usedByEffector">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.paths">
            <summary>
            The paths
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.sharedMaterial">
            <summary>
            The shared material
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.density">
            <summary>
            The density
            </summary>
        </member>
        <member name="F:SerializePolygonCollider2D.StoredInformation.pathCount">
            <summary>
            The path count
            </summary>
        </member>
        <member name="M:SerializePolygonCollider2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializePolygonCollider2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeDistanceJoint2D">
            <summary>
            Class SerializeDistanceJoint2D.
            </summary>
        </member>
        <member name="T:SerializeDistanceJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.distance">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.autoConfigureDistance">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.maxDistanceOnly">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeDistanceJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="M:SerializeDistanceJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeDistanceJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeFixedJoint2D">
            <summary>
            Class SerializeFixedJoint2D.
            </summary>
        </member>
        <member name="T:SerializeFixedJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.dampingRatio">
            <summary>
            The damping ratio
            </summary>
        </member>
        <member name="F:SerializeFixedJoint2D.StoredInformation.frequency">
            <summary>
            The damping ratio
            </summary>
        </member>
        <member name="M:SerializeFixedJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeFixedJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeFrictionJoint2D">
            <summary>
            Class SerializeFrictionJoint2D.
            </summary>
        </member>
        <member name="T:SerializeFrictionJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.maxForce">
            <summary>
            The maximum force
            </summary>
        </member>
        <member name="F:SerializeFrictionJoint2D.StoredInformation.maxTorque">
            <summary>
            The maximum force
            </summary>
        </member>
        <member name="M:SerializeFrictionJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeFrictionJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeHingeJoint2D">
            <summary>
            Class SerializeHingeJoint2D.
            </summary>
        </member>
        <member name="T:SerializeHingeJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.limits">
            <summary>
            The limits
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.motor">
            <summary>
            The motor
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.useLimits">
            <summary>
            The use limits
            </summary>
        </member>
        <member name="F:SerializeHingeJoint2D.StoredInformation.useMotor">
            <summary>
            The use limits
            </summary>
        </member>
        <member name="M:SerializeHingeJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeHingeJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeRelativeJoint2D">
            <summary>
            Class SerializeRelativeJoint2D.
            </summary>
        </member>
        <member name="T:SerializeRelativeJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.enableCollision">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.angularOffset">
            <summary>
            The angular offset
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.correctionScale">
            <summary>
            The angular offset
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.maxForce">
            <summary>
            The angular offset
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.maxTorque">
            <summary>
            The angular offset
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.autoConfigureOffset">
            <summary>
            The automatic configure offset
            </summary>
        </member>
        <member name="F:SerializeRelativeJoint2D.StoredInformation.linearOffset">
            <summary>
            The linear offset
            </summary>
        </member>
        <member name="M:SerializeRelativeJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeRelativeJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeSliderJoint2D">
            <summary>
            Class SerializeSliderJoint2D.
            </summary>
        </member>
        <member name="T:SerializeSliderJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.angle">
            <summary>
            The angle
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.autoConfigureAngle">
            <summary>
            The automatic configure angle
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.useLimits">
            <summary>
            The automatic configure angle
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.useMotor">
            <summary>
            The automatic configure angle
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.limits">
            <summary>
            The limits
            </summary>
        </member>
        <member name="F:SerializeSliderJoint2D.StoredInformation.motor">
            <summary>
            The motor
            </summary>
        </member>
        <member name="M:SerializeSliderJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeSliderJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeSpringJoint2D">
            <summary>
            Class SerializeSpringJoint2D.
            </summary>
        </member>
        <member name="T:SerializeSpringJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.dampingRatio">
            <summary>
            The damping ratio
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.distance">
            <summary>
            The damping ratio
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.frequency">
            <summary>
            The damping ratio
            </summary>
        </member>
        <member name="F:SerializeSpringJoint2D.StoredInformation.autoConfigureDistance">
            <summary>
            The automatic configure distance
            </summary>
        </member>
        <member name="M:SerializeSpringJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeSpringJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeWheelJoint2D">
            <summary>
            Class SerializeWheelJoint2D.
            </summary>
        </member>
        <member name="T:SerializeWheelJoint2D.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.breakForce">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.breakTorque">
            <summary>
            The break force
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.enableCollision">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.enabled">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.autoConfigureConnectedAnchor">
            <summary>
            The enable collision
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.connectedAnchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.connectedBody">
            <summary>
            The connected body
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.motor">
            <summary>
            The motor
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.suspension">
            <summary>
            The suspension
            </summary>
        </member>
        <member name="F:SerializeWheelJoint2D.StoredInformation.useMotor">
            <summary>
            The use motor
            </summary>
        </member>
        <member name="M:SerializeWheelJoint2D.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeWheelJoint2D.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeAreaEffector2D">
            <summary>
            Class SerializeAreaEffector2D.
            </summary>
        </member>
        <member name="M:SerializeAreaEffector2D.Save(UnityEngine.AreaEffector2D)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeAreaEffector2D.LoadInto(System.Object[],UnityEngine.AreaEffector2D)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeBuoyancyEffector2D">
            <summary>
            Class SerializeBuoyancyEffector2D.
            </summary>
        </member>
        <member name="M:SerializeBuoyancyEffector2D.Save(UnityEngine.BuoyancyEffector2D)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeBuoyancyEffector2D.LoadInto(System.Object[],UnityEngine.BuoyancyEffector2D)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializePointEffector2D">
            <summary>
            Class SerializePointEffector2D.
            </summary>
        </member>
        <member name="M:SerializePointEffector2D.Save(UnityEngine.PointEffector2D)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializePointEffector2D.LoadInto(System.Object[],UnityEngine.PointEffector2D)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializePlatformEffector2D">
            <summary>
            Class SerializePlatformEffector2D.
            </summary>
        </member>
        <member name="M:SerializePlatformEffector2D.Save(UnityEngine.PlatformEffector2D)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializePlatformEffector2D.LoadInto(System.Object[],UnityEngine.PlatformEffector2D)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeSurfaceEffector2D">
            <summary>
            Class SerializeSurfaceEffector2D.
            </summary>
        </member>
        <member name="M:SerializeSurfaceEffector2D.Save(UnityEngine.SurfaceEffector2D)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeSurfaceEffector2D.LoadInto(System.Object[],UnityEngine.SurfaceEffector2D)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:SerializeTexture2D">
            <summary>
            Class SerializeTexture2D.
            </summary>
        </member>
        <member name="M:SerializeTexture2D.Save(UnityEngine.Texture2D)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeTexture2D.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:SerializeTexture2D.CanBeSerialized(System.Type,System.Object)">
            <summary>
            Determines whether this instance [can be serialized] the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance [can be serialized] the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SerializeMaterial">
            <summary>
            Class SerializeMaterial.
            </summary>
        </member>
        <member name="M:SerializeMaterial.Save(UnityEngine.Material)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeMaterial.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:SerializeMaterial.CanBeSerialized(System.Type,System.Object)">
            <summary>
            Determines whether this instance [can be serialized] the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance [can be serialized] the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SerializeAnimator">
            <summary>
            Class SerializeAnimator.
            </summary>
        </member>
        <member name="M:SerializeAnimator.LoadInto(System.Object[],UnityEngine.Animator)">
            <summary>
            Loads the into.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:SerializeAnimator.Save(UnityEngine.Animator)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="T:SerializeAssetReference">
            <summary>
            Class SerializeAssetReference.
            </summary>
        </member>
        <member name="F:SerializeAssetReference.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:SerializeAssetReference.Save(System.Object)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeAssetReference.CanBeSerialized(System.Type,System.Object)">
            <summary>
            Determines whether this instance [can be serialized] the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance [can be serialized] the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SerializeAssetReference.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeScriptableObjectReference">
            <summary>
            Class SerializeScriptableObjectReference.
            </summary>
        </member>
        <member name="M:SerializeScriptableObjectReference.Save(System.Object)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeScriptableObjectReference.CanBeSerialized(System.Type,System.Object)">
            <summary>
            Determines whether this instance [can be serialized] the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if this instance [can be serialized] the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SerializeScriptableObjectReference.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeGameObjectReference">
            <summary>
            Store a reference to a game object, first checking whether it is really another game
            object and not a prefab
            </summary>
        </member>
        <member name="M:SerializeGameObjectReference.Save(UnityEngine.GameObject)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeGameObjectReference.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:SerializeNavMeshAgent">
            <summary>
            Class SerializeNavMeshAgent.
            </summary>
        </member>
        <member name="T:SerializeNavMeshAgent.StoredInfo">
            <summary>
            Class StoredInfo.
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.hasPath">
            <summary>
            The has path
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.offMesh">
            <summary>
            The has path
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.autoBraking">
            <summary>
            The has path
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.autoTraverseOffMeshLink">
            <summary>
            The has path
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.autoRepath">
            <summary>
            The has path
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.y">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.z">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.speed">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.angularSpeed">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.height">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.offset">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.acceleration">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.radius">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.stoppingDistance">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.passable">
            <summary>
            The passable
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.avoidancePriority">
            <summary>
            The passable
            </summary>
        </member>
        <member name="F:SerializeNavMeshAgent.StoredInfo.obstacleAvoidanceType">
            <summary>
            The obstacle avoidance type
            </summary>
        </member>
        <member name="M:SerializeNavMeshAgent.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeNavMeshAgent.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeCamera">
            <summary>
            Class SerializeCamera.
            </summary>
        </member>
        <member name="T:SerializeCamera.CameraData">
            <summary>
            Class CameraData.
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.renderingPath">
            <summary>
            The rendering path
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.fieldOfView">
            <summary>
            The field of view
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.nearClipPlane">
            <summary>
            The near clip plane
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.farClipPlane">
            <summary>
            The far clip plane
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.depth">
            <summary>
            The depth
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.rect">
            <summary>
            The rect
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.useOcclusionCulling">
            <summary>
            The use occlusion culling
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.hdr">
            <summary>
            The HDR
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.targetTexture">
            <summary>
            The target texture
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.orthographic">
            <summary>
            The orthographic
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.orthographicSize">
            <summary>
            The orthographic size
            </summary>
        </member>
        <member name="F:SerializeCamera.CameraData.backgroundColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="M:SerializeCamera.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeCamera.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeRigidBody">
            <summary>
            Class SerializeRigidBody.
            </summary>
        </member>
        <member name="T:SerializeRigidBody.RigidBodyInfo">
            <summary>
            Class RigidBodyInfo.
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.isKinematic">
            <summary>
            The is kinematic
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.useGravity">
            <summary>
            The use gravity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.freezeRotation">
            <summary>
            The use gravity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.detectCollisions">
            <summary>
            The use gravity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.velocity">
            <summary>
            The velocity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.position">
            <summary>
            The velocity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.angularVelocity">
            <summary>
            The velocity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.centerOfMass">
            <summary>
            The velocity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.inertiaTensor">
            <summary>
            The velocity
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.rotation">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.inertiaTensorRotation">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.drag">
            <summary>
            The drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.angularDrag">
            <summary>
            The drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.mass">
            <summary>
            The drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.sleepThreshold">
            <summary>
            The drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.maxAngularVelocity">
            <summary>
            The drag
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.collisionDetectionMode">
            <summary>
            The collision detection mode
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.interpolation">
            <summary>
            The interpolation
            </summary>
        </member>
        <member name="F:SerializeRigidBody.RigidBodyInfo.solverIterationCount">
            <summary>
            The solver iteration count
            </summary>
        </member>
        <member name="M:SerializeRigidBody.RigidBodyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SerializeRigidBody.RigidBodyInfo"/> class.
            </summary>
        </member>
        <member name="M:SerializeRigidBody.RigidBodyInfo.#ctor(UnityEngine.Rigidbody)">
            <summary>
            Initializes a new instance of the <see cref="T:SerializeRigidBody.RigidBodyInfo"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SerializeRigidBody.RigidBodyInfo.Configure(UnityEngine.Rigidbody)">
            <summary>
            Configures the specified body.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:SerializeRigidBody.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeRigidBody.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:RagePixelSupport">
            <summary>
            Class RagePixelSupport.
            </summary>
        </member>
        <member name="T:SerializeRenderer">
            <summary>
            Class SerializeRenderer.
            </summary>
        </member>
        <member name="F:SerializeRenderer.Store">
            <summary>
            The store
            </summary>
        </member>
        <member name="T:SerializeRenderer.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.Enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.materials">
            <summary>
            The materials
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.shadowCastingMode">
            <summary>
            The shadow casting mode
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.receiveShadows">
            <summary>
            The receive shadows
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.lightProbeUsage">
            <summary>
            The light probe usage
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.reflectionProbeUsage">
            <summary>
            The reflection probe usage
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.lightProbeProxyVolumeOverride">
            <summary>
            The light probe proxy volume override
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.probeAnchor">
            <summary>
            The probe anchor
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.lightmapIndex">
            <summary>
            The lightmap index
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.realtimeLightmapIndex">
            <summary>
            The realtime lightmap index
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.lightmapScaleOffset">
            <summary>
            The lightmap scale offset
            </summary>
        </member>
        <member name="F:SerializeRenderer.StoredInformation.realtimeLightmapScaleOffset">
            <summary>
            The realtime lightmap scale offset
            </summary>
        </member>
        <member name="M:SerializeRenderer.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeRenderer.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeLineRenderer">
            <summary>
            Class SerializeLineRenderer.
            </summary>
        </member>
        <member name="F:SerializeLineRenderer.Store">
            <summary>
            The store
            </summary>
        </member>
        <member name="T:SerializeLineRenderer.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeLineRenderer.StoredInformation.useWorldSpace">
            <summary>
            The use world space
            </summary>
        </member>
        <member name="M:SerializeLineRenderer.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeLineRenderer.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeTrailRenderer">
            <summary>
            Class SerializeTrailRenderer.
            </summary>
        </member>
        <member name="F:SerializeTrailRenderer.Store">
            <summary>
            The store
            </summary>
        </member>
        <member name="T:SerializeTrailRenderer.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeTrailRenderer.StoredInformation.autodestruct">
            <summary>
            The autodestruct
            </summary>
        </member>
        <member name="F:SerializeTrailRenderer.StoredInformation.startWidth">
            <summary>
            The start width
            </summary>
        </member>
        <member name="F:SerializeTrailRenderer.StoredInformation.endWidth">
            <summary>
            The end width
            </summary>
        </member>
        <member name="F:SerializeTrailRenderer.StoredInformation.time">
            <summary>
            The time
            </summary>
        </member>
        <member name="M:SerializeTrailRenderer.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeTrailRenderer.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeSkinnedMeshRenderer">
            <summary>
            Class SerializeSkinnedMeshRenderer.
            </summary>
        </member>
        <member name="F:SerializeSkinnedMeshRenderer.Store">
            <summary>
            The store
            </summary>
        </member>
        <member name="T:SerializeSkinnedMeshRenderer.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeSkinnedMeshRenderer.StoredInformation.localBounds">
            <summary>
            The local bounds
            </summary>
        </member>
        <member name="F:SerializeSkinnedMeshRenderer.StoredInformation.quality">
            <summary>
            The quality
            </summary>
        </member>
        <member name="F:SerializeSkinnedMeshRenderer.StoredInformation.updateWhenOffscreen">
            <summary>
            The update when offscreen
            </summary>
        </member>
        <member name="M:SerializeSkinnedMeshRenderer.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeSkinnedMeshRenderer.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeAudioChorusFilter">
            <summary>
            Class SerializeAudioChorusFilter.
            </summary>
        </member>
        <member name="T:SerializeAudioChorusFilter.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.depth">
            <summary>
            The depth
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.dryMix">
            <summary>
            The dry mix
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.rate">
            <summary>
            The rate
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.wetMix1">
            <summary>
            The wet mix1
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.wetMix2">
            <summary>
            The wet mix2
            </summary>
        </member>
        <member name="F:SerializeAudioChorusFilter.StoredInformation.wetMix3">
            <summary>
            The wet mix3
            </summary>
        </member>
        <member name="M:SerializeAudioChorusFilter.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeAudioChorusFilter.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeAudioDistortionFilter">
            <summary>
            Class SerializeAudioDistortionFilter.
            </summary>
        </member>
        <member name="T:SerializeAudioDistortionFilter.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeAudioDistortionFilter.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeAudioDistortionFilter.StoredInformation.distortionLevel">
            <summary>
            The distortion level
            </summary>
        </member>
        <member name="M:SerializeAudioDistortionFilter.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeAudioDistortionFilter.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeAudioEchoFilter">
            <summary>
            Class SerializeAudioEchoFilter.
            </summary>
        </member>
        <member name="T:SerializeAudioEchoFilter.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeAudioEchoFilter.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeAudioEchoFilter.StoredInformation.decayRatio">
            <summary>
            The decay ratio
            </summary>
        </member>
        <member name="F:SerializeAudioEchoFilter.StoredInformation.delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="F:SerializeAudioEchoFilter.StoredInformation.dryMix">
            <summary>
            The dry mix
            </summary>
        </member>
        <member name="F:SerializeAudioEchoFilter.StoredInformation.wetMix">
            <summary>
            The wet mix
            </summary>
        </member>
        <member name="M:SerializeAudioEchoFilter.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeAudioEchoFilter.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeAudioLowPassFilter">
            <summary>
            Class SerializeAudioLowPassFilter.
            </summary>
        </member>
        <member name="T:SerializeAudioLowPassFilter.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeAudioLowPassFilter.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeAudioLowPassFilter.StoredInformation.cutoffFrequency">
            <summary>
            The cutoff frequency
            </summary>
        </member>
        <member name="F:SerializeAudioLowPassFilter.StoredInformation.lowpassResonanceQ">
            <summary>
            The lowpass resonance q
            </summary>
        </member>
        <member name="M:SerializeAudioLowPassFilter.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeAudioLowPassFilter.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeAudioHighPassFilter">
            <summary>
            Class SerializeAudioHighPassFilter.
            </summary>
        </member>
        <member name="T:SerializeAudioHighPassFilter.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeAudioHighPassFilter.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeAudioHighPassFilter.StoredInformation.cutoffFrequency">
            <summary>
            The cutoff frequency
            </summary>
        </member>
        <member name="F:SerializeAudioHighPassFilter.StoredInformation.highpassResonanceQ">
            <summary>
            The highpass resonance q
            </summary>
        </member>
        <member name="M:SerializeAudioHighPassFilter.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeAudioHighPassFilter.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeEventSystem">
            <summary>
            Class SerializeEventSystem.
            </summary>
        </member>
        <member name="T:SerializeEventSystem.StoredInformation">
            <summary>
            Class StoredInformation.
            </summary>
        </member>
        <member name="F:SerializeEventSystem.StoredInformation.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:SerializeEventSystem.StoredInformation.firstSelectedGameObject">
            <summary>
            The first selected game object
            </summary>
        </member>
        <member name="F:SerializeEventSystem.StoredInformation.pixelDragThreshold">
            <summary>
            The pixel drag threshold
            </summary>
        </member>
        <member name="F:SerializeEventSystem.StoredInformation.sendNavigationEvents">
            <summary>
            The send navigation events
            </summary>
        </member>
        <member name="M:SerializeEventSystem.Serialize(UnityEngine.Component)">
            <summary>
            Serialize the specified component to a byte array
            </summary>
            <param name="component">Component to be serialized</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SerializeEventSystem.Deserialize(System.Byte[],UnityEngine.Component)">
            <summary>
            Deserialize the specified data into the instance.
            </summary>
            <param name="data">The data that represents the component, produced by Serialize</param>
            <param name="instance">The instance to target</param>
        </member>
        <member name="T:SerializeComponentReference">
            <summary>
            Class SerializeComponentReference.
            </summary>
        </member>
        <member name="M:SerializeComponentReference.Save(UnityEngine.Component)">
            <summary>
            Saves the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:SerializeComponentReference.Load(System.Object[],System.Object)">
            <summary>
            Loads the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ProvideAttributes">
            <summary>
            Class ProvideAttributes.
            </summary>
        </member>
        <member name="F:ProvideAttributes.AllSimple">
            <summary>
            All simple
            </summary>
        </member>
        <member name="M:ProvideAttributes.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ProvideAttributes"/> class.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:ProvideAttributes.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ProvideAttributes"/> class.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="allSimple">if set to <c>true</c> [all simple].</param>
        </member>
        <member name="M:ProvideAttributes.GetAttributeList(System.Type)">
            <summary>
            Gets the attribute list.
            </summary>
            <param name="tp">The tp.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ProvideAttributes.AllowAllSimple(System.Type)">
            <summary>
            Allows all simple.
            </summary>
            <param name="tp">The tp.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ProvideCameraAttributes">
            <summary>
            Class ProvideCameraAttributes.
            </summary>
        </member>
        <member name="M:ProvideCameraAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProvideCameraAttributes"/> class.
            </summary>
        </member>
        <member name="T:ProviderTransformAttributes">
            <summary>
            Class ProviderTransformAttributes.
            </summary>
        </member>
        <member name="M:ProviderTransformAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProviderTransformAttributes"/> class.
            </summary>
        </member>
        <member name="T:ProviderRectTransformAttributes">
            <summary>
            Class ProviderRectTransformAttributes.
            </summary>
        </member>
        <member name="M:ProviderRectTransformAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProviderRectTransformAttributes"/> class.
            </summary>
        </member>
        <member name="T:ProvideColliderAttributes">
            <summary>
            Class ProvideColliderAttributes.
            </summary>
        </member>
        <member name="M:ProvideColliderAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProvideColliderAttributes"/> class.
            </summary>
        </member>
        <member name="T:ProviderRendererAttributes">
            <summary>
            Class ProviderRendererAttributes.
            </summary>
        </member>
        <member name="M:ProviderRendererAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProviderRendererAttributes"/> class.
            </summary>
        </member>
        <member name="T:Timing">
            <summary>
            Class Timing.
            </summary>
        </member>
        <member name="M:Timing.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Timing"/> class.
            </summary>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Timing.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:SerializeAll">
            <summary>
            Class SerializeAll.
            </summary>
        </member>
        <member name="T:DoNotSerializePublic">
            <summary>
              Indicates that a no public members should be saved by default
            </summary>
        </member>
        <member name="T:SerializeThis">
            <summary>
              Indicates that a property or field should be serialized
            </summary>
        </member>
        <member name="T:DoNotSerialize">
            <summary>
              Indicates that a property or field should not be serialized
            </summary>
        </member>
        <member name="T:DoNotChecksum">
            <summary>
              Used in checksum mode to flag a property as not being part
              of the "meaning" of an object - i.e. two objects with the
              same checksum "mean" the same thing, even if some of the
              properties are different, those properties would not be
              relevant to the purpose of the object
            </summary>
        </member>
        <member name="T:IDeserialized">
            <summary>
            Interface IDeserialized
            </summary>
        </member>
        <member name="M:IDeserialized.Deserialized">
            <summary>
            Deserializeds this instance.
            </summary>
        </member>
        <member name="T:CompressionHelper">
            <summary>
            Class CompressionHelper.
            </summary>
        </member>
        <member name="F:CompressionHelper.technique">
            <summary>
            The technique
            </summary>
        </member>
        <member name="M:CompressionHelper.Compress(System.Byte[])">
            <summary>
            Compresses the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CompressionHelper.Decompress(System.String)">
            <summary>
            Decompresses the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:UnitySerializerVersion">
            <summary>
            Class UnitySerializerVersion.
            </summary>
        </member>
        <member name="F:UnitySerializerVersion.version">
            <summary>
            The version
            </summary>
        </member>
        <member name="T:Types">
            <summary>
            Class Types.
            </summary>
        </member>
        <member name="M:Types.GetTypes(System.Type)">
            <summary>
            Gets the types.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>List&lt;Type&gt;.</returns>
        </member>
        <member name="M:Types.RequireAssembly(System.Reflection.Assembly)">
            <summary>
            Requires the assembly.
            </summary>
            <param name="asm">The asm.</param>
        </member>
        <member name="M:Types.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="T:TypeHelper">
            <summary>
            Class TypeHelper.
            </summary>
        </member>
        <member name="M:TypeHelper.Attribute``1(System.Type)">
            <summary>
            Attributes the specified tp.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tp">The tp.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TypeHelper.Attribute``1(System.Object)">
            <summary>
            Attributes the specified o.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o">The o.</param>
            <returns>T.</returns>
        </member>
        <member name="T:DebugLine">
            <summary>
            Class DebugLine.
            </summary>
        </member>
        <member name="F:DebugLine.destroy_time">
            <summary>
            The destroy time
            </summary>
        </member>
        <member name="F:DebugLine.fixed_destroy_time">
            <summary>
            The fixed destroy time
            </summary>
        </member>
        <member name="M:DebugLine.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws the ray.
            </summary>
            <param name="start">The start.</param>
            <param name="dir">The dir.</param>
        </member>
        <member name="M:DebugLine.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Draws the ray.
            </summary>
            <param name="start">The start.</param>
            <param name="dir">The dir.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:DebugLine.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:DebugLine.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:DebugLine.CalcPixelHeightAtDist(System.Single)">
            <summary>
            Calculates the pixel height at dist.
            </summary>
            <param name="dist">The dist.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:DebugLine.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:DebugLine.FixedUpdate">
            <summary>
            Fixeds the update.
            </summary>
        </member>
        <member name="T:GUILayoutx">
            <summary>
            Class GUILayoutx.
            </summary>
        </member>
        <member name="T:GUILayoutx.DoubleClickCallback">
            <summary>
            Delegate DoubleClickCallback
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,UnityEngine.GUIContent[])">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <param name="elementStyle">The element style.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,UnityEngine.GUIContent[],GUILayoutx.DoubleClickCallback)">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <param name="callback">The callback.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,GUILayoutx.DoubleClickCallback)">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <param name="elementStyle">The element style.</param>
            <param name="callback">The callback.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,System.String[])">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <param name="elementStyle">The element style.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,System.String[],GUILayoutx.DoubleClickCallback)">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <param name="callback">The callback.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GUILayoutx.SelectionList(System.Int32,System.String[],UnityEngine.GUIStyle,GUILayoutx.DoubleClickCallback)">
            <summary>
            Selections the list.
            </summary>
            <param name="selected">The selected.</param>
            <param name="list">The list.</param>
            <param name="elementStyle">The element style.</param>
            <param name="callback">The callback.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:MeshSerializer">
            <summary>
            Class MeshSerializer.
            </summary>
        </member>
        <member name="M:MeshSerializer.ReadMesh(System.Byte[])">
            <summary>
            Reads the mesh.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>Mesh.</returns>
            <exception cref="T:System.Exception">
            Invalid mesh file!
            or
            Invalid vertex count in the mesh data!
            or
            Invalid triangle count in the mesh data!
            or
            Invalid vertex format in the mesh data!
            </exception>
        </member>
        <member name="M:MeshSerializer.WriteMesh(UnityEngine.Mesh,System.Boolean)">
            <summary>
            Writes the mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="saveTangents">if set to <c>true</c> [save tangents].</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:PixelPerfectCamera">
            <summary>
            Class PixelPerfectCamera.
            </summary>
        </member>
        <member name="F:PixelPerfectCamera.pixelsToUnits">
            <summary>
            The pixels to units
            </summary>
        </member>
        <member name="T:ScaleCamera">
            <summary>
            Class ScaleCamera.
            </summary>
        </member>
        <member name="F:ScaleCamera.targetWidth">
            <summary>
            The target width
            </summary>
        </member>
        <member name="F:ScaleCamera.pixelsToUnits">
            <summary>
            The pixels to units
            </summary>
        </member>
        <member name="T:UnityLibrary.ScreenEdgeColliders">
            <summary>
            Class ScreenEdgeColliders.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:UnityLibrary.AssetBundleLoader">
            <summary>
            Class AssetBundleLoader.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:UnityLibrary.AssetBundleLoader.assetBundleURL">
            <summary>
            The asset bundle URL
            </summary>
        </member>
        <member name="M:UnityLibrary.AssetBundleLoader.DownloadAndCache(System.String,System.String)">
            <summary>
            asset bundle load and instantiate
            </summary>
            <param name="bundleURL">full url to the bundle file</param>
            <param name="assetName">optional asset name to instantiate from the bundle</param>
        </member>
        <member name="T:UnityLibrary.CameraSwitcher">
            <summary>
            Class CameraSwitcher.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:UnityLibrary.CameraSwitcher.cameras">
            <summary>
            The cameras
            </summary>
        </member>
        <member name="T:UnityLibrary.Timer">
            <summary>
            Class Timer.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:CBX.TileMapping.Unity.TileMap">
            <summary>
            Provides a component for tile mapping.
            </summary>
        </member>
        <member name="F:CBX.TileMapping.Unity.TileMap.Rows">
            <summary>
            Gets or sets the number of rows of tiles.
            </summary>
        </member>
        <member name="F:CBX.TileMapping.Unity.TileMap.Columns">
            <summary>
            Gets or sets the number of columns of tiles.
            </summary>
        </member>
        <member name="F:CBX.TileMapping.Unity.TileMap.TileWidth">
            <summary>
            Gets or sets the value of the tile width.
            </summary>
        </member>
        <member name="M:CBX.TileMapping.Unity.TileMap.SetTile(Lerp2API.Utility.UnityLib.Vector3Int,UnityEngine.WSA.Tile)">
            <summary>
            Sets the tile.
            </summary>
            <param name="tilePos">The tile position.</param>
            <param name="tile">The tile.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:CBX.TileMapping.Unity.TileMap.TileHeight">
            <summary>
            Gets or sets the value of the tile height.
            </summary>
        </member>
        <member name="F:CBX.TileMapping.Unity.TileMap.MarkerPosition">
            <summary>
            Used by editor components or game logic to indicate a tile location.
            </summary>
            <remarks>This will be hidden from the inspector window. See <see cref="T:UnityEngine.HideInInspector"/></remarks>
        </member>
        <member name="F:CBX.TileMapping.Unity.TileMap.color">
            <summary>
            The color
            </summary>
        </member>
        <member name="M:CBX.TileMapping.Unity.TileMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CBX.TileMapping.Unity.TileMap"/> class.
            </summary>
        </member>
        <member name="M:CBX.TileMapping.Unity.TileMap.OnDrawGizmosSelected">
            <summary>
            When the game object is selected this will draw the grid
            </summary>
            <remarks>Only called when in the Unity editor.</remarks>
        </member>
        <member name="T:CameraShake">
            <summary>
            Class CameraShake.
            </summary>
        </member>
        <member name="F:CameraShake.shakePosition">
            <summary>
            The shake position
            </summary>
        </member>
        <member name="F:CameraShake.shakeRotation">
            <summary>
            The shake rotation
            </summary>
        </member>
        <member name="F:CameraShake.shakeIntensityMin">
            <summary>
            The shake intensity minimum
            </summary>
        </member>
        <member name="F:CameraShake.shakeIntensityMax">
            <summary>
            The shake intensity maximum
            </summary>
        </member>
        <member name="F:CameraShake.shakeDecay">
            <summary>
            The shake decay
            </summary>
        </member>
        <member name="M:CameraShake.Shake">
            <summary>
            Shakes this instance.
            </summary>
        </member>
        <member name="T:SmoothMouseLook">
            <summary>
            Class SmoothMouseLook.
            </summary>
        </member>
        <member name="F:SmoothMouseLook.clampInDegrees">
            <summary>
            The clamp in degrees
            </summary>
        </member>
        <member name="F:SmoothMouseLook.lockCursor">
            <summary>
            The lock cursor
            </summary>
        </member>
        <member name="F:SmoothMouseLook.sensitivity">
            <summary>
            The sensitivity
            </summary>
        </member>
        <member name="F:SmoothMouseLook.smoothing">
            <summary>
            The smoothing
            </summary>
        </member>
        <member name="F:SmoothMouseLook.targetDirection">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="T:WowCamera">
            <summary>
            Class WowCamera.
            </summary>
        </member>
        <member name="F:WowCamera.target">
            <summary>
            The target
            </summary>
        </member>
        <member name="F:WowCamera.targetHeight">
            <summary>
            The target height
            </summary>
        </member>
        <member name="F:WowCamera.distance">
            <summary>
            The distance
            </summary>
        </member>
        <member name="F:WowCamera.offsetFromWall">
            <summary>
            The offset from wall
            </summary>
        </member>
        <member name="F:WowCamera.maxDistance">
            <summary>
            The maximum distance
            </summary>
        </member>
        <member name="F:WowCamera.minDistance">
            <summary>
            The minimum distance
            </summary>
        </member>
        <member name="F:WowCamera.xSpeed">
            <summary>
            The x speed
            </summary>
        </member>
        <member name="F:WowCamera.ySpeed">
            <summary>
            The y speed
            </summary>
        </member>
        <member name="F:WowCamera.targetSpeed">
            <summary>
            The target speed
            </summary>
        </member>
        <member name="F:WowCamera.yMinLimit">
            <summary>
            The y minimum limit
            </summary>
        </member>
        <member name="F:WowCamera.yMaxLimit">
            <summary>
            The y maximum limit
            </summary>
        </member>
        <member name="F:WowCamera.zoomRate">
            <summary>
            The zoom rate
            </summary>
        </member>
        <member name="F:WowCamera.rotationDampening">
            <summary>
            The rotation dampening
            </summary>
        </member>
        <member name="F:WowCamera.zoomDampening">
            <summary>
            The zoom dampening
            </summary>
        </member>
        <member name="F:WowCamera.collisionLayers">
            <summary>
            The collision layers
            </summary>
        </member>
        <member name="M:WowCamera.LateUpdate">
            Camera logic on LateUpdate to only update after all character movement logic has been handled.
        </member>
        <member name="T:ZoomWithMouse">
            <summary>
            Class ZoomWithMouse.
            </summary>
        </member>
        <member name="F:ZoomWithMouse.zoomSpeed">
            <summary>
            The zoom speed
            </summary>
        </member>
        <member name="T:DrawGLLine">
            <summary>
            Class DrawGLLine.
            </summary>
        </member>
        <member name="F:DrawGLLine.lineColor">
            <summary>
            The line color
            </summary>
        </member>
        <member name="T:DrawCrossHair">
            <summary>
            Class DrawCrossHair.
            </summary>
        </member>
        <member name="F:DrawCrossHair.mat">
            <summary>
            The mat
            </summary>
        </member>
        <member name="F:DrawCrossHair.lineLen">
            <summary>
            The line length
            </summary>
        </member>
        <member name="T:DrawRendererBounds">
            <summary>
            Class DrawRendererBounds.
            </summary>
        </member>
        <member name="T:FileSystemWatch">
            <summary>
            Class FileSystemWatch.
            </summary>
        </member>
        <member name="T:OpenExternalFile">
            <summary>
            Class OpenExternalFile.
            </summary>
        </member>
        <member name="M:OpenExternalFile.OpenFile(System.String)">
            <summary>
            Opens the file.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="T:FPSCounter">
            <summary>
            Class FPSCounter.
            </summary>
        </member>
        <member name="T:StringOperationUtil.OptimizedStringOperation">
             <summary>
             Using this,you can optimize string concat operation easily.
             To use this , you should put this on the top of code.
             ------
             using StrOpe = StringOperationUtil.OptimizedStringOperation;
             ------
            
             - before code
             string str = "aaa" + 20 + "bbbb";
            
             - after code
             string str = StrOpe.i + "aaa" + 20 + "bbbb";
            
             "StrOpe.i" is for MainThread , do not call from other theads.
             If "StrOpe.i" is called from Mainthread , reuse same object.
            
             You can also use "StrOpe.small" / "StrOpe.medium" / "StrOpe.large" instead of "StrOpe.i".
             These are creating instance.
             </summary>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.Create(System.Int32)">
            <summary>
            Creates the specified capacity.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="P:StringOperationUtil.OptimizedStringOperation.small">
            <summary>
            Gets the small.
            </summary>
            <value>The small.</value>
        </member>
        <member name="P:StringOperationUtil.OptimizedStringOperation.medium">
            <summary>
            Gets the medium.
            </summary>
            <value>The medium.</value>
        </member>
        <member name="P:StringOperationUtil.OptimizedStringOperation.large">
            <summary>
            Gets the large.
            </summary>
            <value>The large.</value>
        </member>
        <member name="P:StringOperationUtil.OptimizedStringOperation.i">
            <summary>
            Gets the i.
            </summary>
            <value>The i.</value>
        </member>
        <member name="P:StringOperationUtil.OptimizedStringOperation.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:StringOperationUtil.OptimizedStringOperation.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the specified start index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.Replace(System.String,System.String)">
            <summary>
            Replaces the specified old value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.ToLower">
            <summary>
            To the lower.
            </summary>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.ToUpper">
            <summary>
            To the upper.
            </summary>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.Trim">
            <summary>
            Trims this instance.
            </summary>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.TrimStart">
            <summary>
            Trims the start.
            </summary>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.TrimEnd">
            <summary>
            Trims the end.
            </summary>
            <returns>OptimizedStringOperation.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Implicit(StringOperationUtil.OptimizedStringOperation)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:StringOperationUtil.OptimizedStringOperation"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="t">The t.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Boolean)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="v">if set to <c>true</c> [v].</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Int32)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="v">The v.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Int16)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="v">The v.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Byte)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="v">The v.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Single)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="v">The v.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Char)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="c">The c.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Char[])">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="c">The c.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.String)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="str">The string.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:StringOperationUtil.OptimizedStringOperation.op_Addition(StringOperationUtil.OptimizedStringOperation,System.Text.StringBuilder)">
            <summary>
            Implements the +.
            </summary>
            <param name="t">The t.</param>
            <param name="sb">The sb.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Callback">
            <summary>
            Delegate Callback
            </summary>
        </member>
        <member name="T:Callback`1">
            <summary>
            Delegate Callback
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg1">The arg1.</param>
        </member>
        <member name="T:Callback`2">
            <summary>
            Delegate Callback
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
        </member>
        <member name="T:Callback`3">
            <summary>
            Delegate Callback
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
        </member>
        <member name="T:MeteorRing">
            <summary>
            Class MeteorRing.
            </summary>
        </member>
        <member name="F:MeteorRing.totalCount">
            <summary>
            The total count
            </summary>
        </member>
        <member name="F:MeteorRing.ringRadius">
            <summary>
            The ring radius
            </summary>
        </member>
        <member name="F:MeteorRing.ringHeight">
            <summary>
            The ring height
            </summary>
        </member>
        <member name="T:TexturePixels2Quads">
            <summary>
            Class TexturePixels2Quads.
            </summary>
        </member>
        <member name="F:TexturePixels2Quads.tex">
            <summary>
            The tex
            </summary>
        </member>
        <member name="F:TexturePixels2Quads.planePrefab">
            <summary>
            The plane prefab
            </summary>
        </member>
        <member name="T:M8.ImageEffects.PostEffectsBase">
            <summary>
            Class PostEffectsBase.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:M8.ImageEffects.PostEffectsBase.supportHDRTextures">
            <summary>
            The support HDR textures
            </summary>
        </member>
        <member name="F:M8.ImageEffects.PostEffectsBase.supportDX11">
            <summary>
            The support d X11
            </summary>
        </member>
        <member name="F:M8.ImageEffects.PostEffectsBase.isSupported">
            <summary>
            The is supported
            </summary>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CheckShaderAndCreateMaterial(UnityEngine.Shader,UnityEngine.Material)">
            <summary>
            Checks the shader and create material.
            </summary>
            <param name="s">The s.</param>
            <param name="m2Create">The m2 create.</param>
            <returns>Material.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CreateMaterial(UnityEngine.Shader,UnityEngine.Material)">
            <summary>
            Creates the material.
            </summary>
            <param name="s">The s.</param>
            <param name="m2Create">The m2 create.</param>
            <returns>Material.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CheckSupport">
            <summary>
            Checks the support.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CheckResources">
            <summary>
            Checks the resources.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CheckSupport(System.Boolean)">
            <summary>
            Checks the support.
            </summary>
            <param name="needDepth">if set to <c>true</c> [need depth].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CheckSupport(System.Boolean,System.Boolean)">
            <summary>
            Checks the support.
            </summary>
            <param name="needDepth">if set to <c>true</c> [need depth].</param>
            <param name="needHdr">if set to <c>true</c> [need HDR].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.Dx11Support">
            <summary>
            DX11s the support.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.ReportAutoDisable">
            <summary>
            Reports the automatic disable.
            </summary>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.CheckShader(UnityEngine.Shader)">
            <summary>
            Checks the shader.
            </summary>
            <param name="s">The s.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.NotSupported">
            <summary>
            Nots the supported.
            </summary>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.DrawBorder(UnityEngine.RenderTexture,UnityEngine.Material)">
            <summary>
            Draws the border.
            </summary>
            <param name="dest">The dest.</param>
            <param name="material">The material.</param>
        </member>
        <member name="M:M8.ImageEffects.PostEffectsBase.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
    </members>
</doc>
