<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lerp2APIEditor</name>
    </assembly>
    <members>
        <member name="T:Lerp2APIEditor.CustomIEditor.CommandsEditor">
            <summary>
            Class CommandsEditor.
            </summary>
            <seealso cref="T:UnityEditor.Editor" />
        </member>
        <member name="P:Lerp2APIEditor.CustomIEditor.CommandsEditor.commandPath">
            <summary>
            Gets the command path.
            </summary>
            <value>The command path.</value>
        </member>
        <member name="F:Lerp2APIEditor.CustomIEditor.CommandsEditor.myTarget">
            <summary>
            My target
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.CustomIEditor.CommandsEditor.OnInspectorGUI">
            <summary>
            Called when [inspector GUI].
            </summary>
        </member>
        <member name="T:Lerp2APIEditor.EditorHelpers">
            <summary>
            Class EditorHelpers.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.EditorHelpers.DefineTag(System.String)">
            <summary>
            Defines the tag.
            </summary>
            <param name="tagName">Name of the tag.</param>
        </member>
        <member name="M:Lerp2APIEditor.EditorHelpers.CheckTag(System.String)">
            <summary>
            Checks the tag.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lerp2APIEditor.EditorHelpers.DefineLayer(System.String,System.Int32)">
            <summary>
            Defines the layer.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="T:Lerp2APIEditor.EditorReflectionHelpers">
            <summary>
            Class EditorReflectionHelpers.
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorReflectionHelpers.fin">
            <summary>
            The fin
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.EditorReflectionHelpers.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.EditorReflectionHelpers"/> class.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:Lerp2APIEditor.EditorReflectionHelpers.WaitUntilClassIsAvailable(System.String)">
            <summary>
            Waits the until class is available.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Lerp2APIEditor.ThreadSafeEditor">
            <summary>
            Class ThreadSafeEditor.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.ThreadSafeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.ThreadSafeEditor"/> class.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.ThreadSafeEditor.Message(System.String[])">
            <summary>
            Messages the specified commands.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="T:Lerp2APIEditor.EditorWindows.BrowserWindow">
            <summary>
            Class BrowserWindow.
            </summary>
            <seealso cref="T:UnityEditor.EditorWindow" />
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.BrowserWindow.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.BrowserWindow.width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.BrowserWindow.height">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.BrowserWindow.fbt">
            <summary>
            The FBT
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.BrowserWindow.cb">
            <summary>
            The cb
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.EditorWindows.BrowserWindow.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.EditorWindows.BrowserWindow.OnGUIMain">
            <summary>
            Called when [GUI main].
            </summary>
        </member>
        <member name="T:Lerp2APIEditor.EditorWindows.LerpedPaths">
            <summary>
            Class LerpedPaths.
            </summary>
            <seealso cref="T:UnityEditor.EditorWindow" />
        </member>
        <member name="F:Lerp2APIEditor.EditorWindows.LerpedPaths.me">
            <summary>
            Me
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.EditorWindows.LerpedPaths.iInit(Lerp2APIEditor.EditorWindows.LerpedPaths,Lerp2APIEditor.EditorWindows.LerpedAPIChange)">
            <summary>
            is the initialize.
            </summary>
            <param name="rf">The rf.</param>
            <param name="change">The change.</param>
        </member>
        <member name="T:Lerp2APIEditor.LerpedEditorCore">
            <summary>
            Class LerpedEditorCore.
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.LerpedEditorCore.LerpedBuildTarget">
            <summary>
            The lerped build target
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.LerpedEditorCore.mainFolder">
            <summary>
            The main folder
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.LerpedEditorCore.availablePaths">
            <summary>
            Gets a value indicating whether [available paths].
            </summary>
            <value><c>true</c> if [available paths]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Lerp2APIEditor.LerpedEditorCore.UpdateDependencies">
            <summary>
            Updates the dependencies.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.LerpedEditorCore.AttachResource(System.String,System.String)">
            <summary>
            Attaches the resource.
            </summary>
            <param name="name">The name.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="T:Lerp2APIEditor.Utility.LerpedThread`1">
            <summary>
            Class LerpedThread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedThread`1.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedThread`1.isCalled">
            <summary>
            The is called
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedThread`1.methodCalled">
            <summary>
            The method called
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedThread`1.matchedMethods">
            <summary>
            The matched methods
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.LerpedThread`1.FSW">
            <summary>
            Gets the FSW.
            </summary>
            <value>The FSW.</value>
        </member>
        <member name="M:Lerp2APIEditor.Utility.LerpedThread`1.#ctor(System.String,Lerp2APIEditor.Utility.FSWParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.Utility.LerpedThread`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pars">The pars.</param>
        </member>
        <member name="M:Lerp2APIEditor.Utility.LerpedThread`1.StartFSW">
            <summary>
            Starts the FSW.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.LerpedThread`1.CancelFSW">
            <summary>
            Cancels the FSW.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.LerpedThread`1.ApplyChanges``1(``0)">
            <summary>
            Applies the changes.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Lerp2APIEditor.Utility.FSWParams">
            <summary>
            Class FSWParams.
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FSWParams.path">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FSWParams.filter">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FSWParams.notifiers">
            <summary>
            The notifiers
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FSWParams.includeSubfolders">
            <summary>
            The include subfolders
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FSWParams.#ctor(System.String,System.String,System.IO.NotifyFilters,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.Utility.FSWParams"/> class.
            </summary>
            <param name="p">The p.</param>
            <param name="f">The f.</param>
            <param name="nf">The nf.</param>
            <param name="isf">if set to <c>true</c> [isf].</param>
        </member>
        <member name="T:Lerp2APIEditor.Utility.FileBrowserEditor">
            <summary>
            Class FileBrowserEditor.
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.CurrentDirectory">
            <summary>
            Gets or sets the current directory.
            </summary>
            <value>The current directory.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_currentDirectory">
            <summary>
            The m current directory
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.SelectionPattern">
            <summary>
            Gets or sets the selection pattern.
            </summary>
            <value>The selection pattern.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_filePattern">
            <summary>
            The m file pattern
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.DirectoryImage">
            <summary>
            Gets or sets the directory image.
            </summary>
            <value>The directory image.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_directoryImage">
            <summary>
            The m directory image
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.FileImage">
            <summary>
            Gets or sets the file image.
            </summary>
            <value>The file image.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_fileImage">
            <summary>
            The m file image
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.BrowserType">
            <summary>
            Gets or sets the type of the browser.
            </summary>
            <value>The type of the browser.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_browserType">
            <summary>
            The m browser type
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_newDirectory">
            <summary>
            The m new directory
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_currentDirectoryParts">
            <summary>
            The m current directory parts
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_files">
            <summary>
            The m files
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_filesWithImages">
            <summary>
            The m files with images
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_selectedFile">
            <summary>
            The m selected file
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_nonMatchingFiles">
            <summary>
            The m non matching files
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_nonMatchingFilesWithImages">
            <summary>
            The m non matching files with images
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_selectedNonMatchingDirectory">
            <summary>
            The m selected non matching directory
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_directories">
            <summary>
            The m directories
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_directoriesWithImages">
            <summary>
            The m directories with images
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_selectedDirectory">
            <summary>
            The m selected directory
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_nonMatchingDirectories">
            <summary>
            The m non matching directories
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_nonMatchingDirectoriesWithImages">
            <summary>
            The m non matching directories with images
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_currentDirectoryMatches">
            <summary>
            The m current directory matches
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.CentredText">
            <summary>
            Gets the centred text.
            </summary>
            <value>The centred text.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_centredText">
            <summary>
            The m centred text
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_name">
            <summary>
            The m name
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_window">
            <summary>
            The m window
            </summary>
        </member>
        <member name="P:Lerp2APIEditor.Utility.FileBrowserEditor.screenRect">
            <summary>
            Gets the screen rect.
            </summary>
            <value>The screen rect.</value>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_scrollPosition">
            <summary>
            The m scroll position
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.FileBrowserEditor.m_callback">
            <summary>
            The m callback
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.#ctor(UnityEditor.EditorWindow,Lerp2API.Utility.FileBrowserType,System.String,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.Utility.FileBrowserEditor"/> class.
            </summary>
            <param name="window">The window.</param>
            <param name="browserType">Type of the browser.</param>
            <param name="name">The name.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.SetNewDirectory(System.String)">
            <summary>
            Sets the new directory.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.SwitchDirectoryNow">
            <summary>
            Switches the directory now.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.ReadDirectoryContents">
            <summary>
            Reads the directory contents.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.BuildContent">
            <summary>
            Builds the content.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.OnGUI">
            <summary>
            Called when [GUI].
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.FileDoubleClickCallback(System.Int32)">
            <summary>
            Files the double click callback.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.DirectoryDoubleClickCallback(System.Int32)">
            <summary>
            Directories the double click callback.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:Lerp2APIEditor.Utility.FileBrowserEditor.NonMatchingDirectoryDoubleClickCallback(System.Int32)">
            <summary>
            Nons the matching directory double click callback.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="T:Lerp2APIEditor.Utility.LerpedShortcuts">
            <summary>
            Class LerpedShortcuts.
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedShortcuts.keyActions">
            <summary>
            The key actions
            </summary>
        </member>
        <member name="T:Lerp2APIEditor.Utility.LerpedKeyAction">
            <summary>
            Class LerpedKeyAction.
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedKeyAction.keyCode">
            <summary>
            The key code
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.Utility.LerpedKeyAction.action">
            <summary>
            The action
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Utility.LerpedKeyAction.#ctor(UnityEngine.KeyCode,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.Utility.LerpedKeyAction"/> class.
            </summary>
            <param name="kc">The kc.</param>
            <param name="a">a.</param>
        </member>
        <member name="T:Lerp2APIEditor.Menu.DebugManager">
            <summary>
            Class DebugManager.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.Menu.DebugManager.__changeDebug">
            <summary>
            Changes the debug.
            </summary>
        </member>
        <member name="T:Lerp2APIEditor.LerpedUpdater">
            <summary>
            Class LerpedUpdater.
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.LerpedUpdater.noConnection">
            <summary>
            The no connection
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.LerpedUpdater.versionName">
            <summary>
            The version name
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.LerpedUpdater.versionStr">
            <summary>
            The version name
            </summary>
        </member>
        <member name="F:Lerp2APIEditor.LerpedUpdater.versionChangelog">
            <summary>
            The version name
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.LerpedUpdater.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.LerpedUpdater"/> class.
            </summary>
        </member>
        <member name="M:Lerp2APIEditor.LerpedUpdater.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2APIEditor.LerpedUpdater"/> class.
            </summary>
            <param name="vn">The vn.</param>
            <param name="vs">The vs.</param>
            <param name="vc">The vc.</param>
        </member>
        <member name="M:Lerp2APIEditor.LerpedUpdater.CheckForUpdates">
            <summary>
            Checks for updates.
            </summary>
        </member>
        <member name="T:Lerp2API.Utility.AssetDefineManager">
            <summary>
            Class AssetDefineManager.
            </summary>
            <seealso cref="T:UnityEditor.AssetPostprocessor" />
        </member>
        <member name="F:Lerp2API.Utility.AssetDefineManager.CustomDefines">
            <summary>
            Custom defines to add based on the file to detect the asset by, and the desired platforms
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.AssetDefineManager.AssetDefine.assetDetectionFile">
            <summary>
            The asset detection file
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.AssetDefineManager.AssetDefine.assetDefines">
            <summary>
            The asset defines
            </summary>
        </member>
        <member name="F:Lerp2API.Utility.AssetDefineManager.AssetDefine.definePlatforms">
            <summary>
            The define platforms
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.AssetDefine.#ctor(System.String,UnityEditor.BuildTargetGroup[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Lerp2API.Utility.AssetDefineManager.AssetDefine"/> struct.
            </summary>
            <param name="fileToDetectAsset">The file to detect asset.</param>
            <param name="platformsForDefine">The platforms for define.</param>
            <param name="definesForAsset">The defines for asset.</param>
        </member>
        <member name="P:Lerp2API.Utility.AssetDefineManager.AssetDefine.IsValid">
            <summary>
            Returns true if ... is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Lerp2API.Utility.AssetDefineManager.AssetDefine.Invalid">
            <summary>
            The invalid
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.AssetDefine.RemoveAllDefines">
            <summary>
            Removes all defines.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.AssetDefine.AddAllDefines">
            <summary>
            Adds all defines.
            </summary>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.AddCompileDefine(System.String,UnityEditor.BuildTargetGroup[])">
            <summary>
            Attempts to add a new #define constant to the Player Settings
            </summary>
            <param name="newDefineCompileConstant">constant to attempt to define</param>
            <param name="targetGroups">platforms to add this for (null will add to all platforms)</param>
        </member>
        <member name="M:Lerp2API.Utility.AssetDefineManager.RemoveCompileDefine(System.String,UnityEditor.BuildTargetGroup[])">
            <summary>
            Attempts to remove a #define constant from the Player Settings
            </summary>
            <param name="defineCompileConstant"></param>
            <param name="targetGroups"></param>
        </member>
        <member name="T:Lerp2API.Utility.DummyEditor">
            <summary>
            Class DummyEditor.
            </summary>
            <seealso cref="T:UnityEditor.EditorWindow" />
        </member>
        <member name="M:Lerp2API.Utility.DummyEditor.SaveEditorSkin(UnityEditor.EditorSkin)">
            <summary>
            Saves the editor skin.
            </summary>
            <param name="es">The es.</param>
        </member>
        <member name="T:GenericMenuExtensions">
            <summary>
            Extension methods for <see cref="T:UnityEditor.GenericMenu"/>.
            </summary>
        </member>
        <member name="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,UnityEngine.GUIContent)">
             <summary>
             Begin adding an item to the <see cref="T:UnityEditor.GenericMenu"/>.
             </summary>
             <example>
             <para>Here are some usage examples:</para>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem(new GUIContent("Reset"))
                 .Enable(Selection.activeObject != null)
                 .Action(() => {
                     // Place reset logic here...
                 });
            
             menu.AddItem(new GUIContent("Set as Default Object"))
                 .Enable(Selection.activeObject != null)
                 .On(Selection.activeObject == currentDefaultObject)
                 .Action(() => {
                     currentDefaultObject = Selection.activeObject;
                 });
            
             menu.ShowAsContext();
             ]]></code>
             </example>
             <param name="menu">The menu that is being constructed.</param>
             <param name="content">Content of menu item.</param>
             <returns>
             Context object used whilst adding a menu item.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <list type="bullet">
             <item>If <paramref name="menu"/> is a value of <c>null</c>.</item>
             <item>If <paramref name="content"/> is a value of <c>null</c>.</item>
             </list>
             </exception>
        </member>
        <member name="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,System.String)">
             <summary>
             Begin adding an item to the <see cref="T:UnityEditor.GenericMenu"/>.
             </summary>
             <example>
             <para>Here are some usage examples:</para>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Reset")
                 .Enable(Selection.activeObject != null)
                 .Action(() => {
                     // Place reset logic here...
                 });
            
             menu.AddItem("Set as Default Object")
                 .Enable(Selection.activeObject != null)
                 .On(Selection.activeObject == currentDefaultObject)
                 .Action(() => {
                     currentDefaultObject = Selection.activeObject;
                 });
            
             menu.ShowAsContext();
             ]]></code>
             </example>
             <param name="menu">The menu that is being constructed.</param>
             <param name="text">Text of menu item.</param>
             <returns>
             Context object used whilst adding a menu item.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <list type="bullet">
             <item>If <paramref name="menu"/> is a value of <c>null</c>.</item>
             <item>If <paramref name="text"/> is a value of <c>null</c>.</item>
             </list>
             </exception>
             <exception cref="T:System.ArgumentException">
             If <paramref name="text"/> is an empty string.
             </exception>
        </member>
        <member name="M:GenericMenuExtensions.AddSeparator(UnityEditor.GenericMenu)">
            <summary>
            Adds separator to the <see cref="T:UnityEditor.GenericMenu"/>.
            </summary>
            <param name="menu">The menu that is being constructed.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="menu"/> is a value of <c>null</c>.
            </exception>
        </member>
        <member name="T:IGenericMenuAddItemContext">
            <summary>
            Describes current context of adding an item to a <see cref="T:UnityEditor.GenericMenu"/>.
            </summary>
            <seealso cref="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,UnityEngine.GUIContent)"/>
            <seealso cref="M:GenericMenuExtensions.AddItem(UnityEditor.GenericMenu,System.String)"/>
        </member>
        <member name="M:IGenericMenuAddItemContext.Enable(System.Boolean)">
             <summary>
             Specifies whether menu item should be enabled.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("This item is disabled!")
                 .Enable(false)
                 .Action(() => {
                     Debug.Log("User cannot make this appear in log!");
                 });
             ]]></code>
             </example>
             <param name="enable">Specifies whether item is enabled.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
        </member>
        <member name="M:IGenericMenuAddItemContext.Enable(System.Func{System.Boolean})">
             <summary>
             Specifies whether menu item should be enabled.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("This item is disabled!")
                 .Enable(() => false)
                 .Action(() => {
                     Debug.Log("User cannot make this appear in log!");
                 });
             ]]></code>
             </example>
             <param name="predicate">Predicate that determines whether item is enabled by
             by returning a value of <c>true</c>.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="predicate"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.Visible(System.Boolean)">
             <summary>
             Specifies whether menu item should be visible in menu.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Visible when item is selected!")
                 .Visible(Selection.activeObject != null)
                 .Action(() => {
                     string objectName = Selection.activeObject.name;
                     Debug.Log(string.Format("Selected object is called '{0}'.", objectName));
                 });
             ]]></code>
             </example>
             <param name="visible">Specifies whether item is visible.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
        </member>
        <member name="M:IGenericMenuAddItemContext.Visible(System.Func{System.Boolean})">
             <summary>
             Specifies whether menu item should be visible.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Visible when item is selected!")
                 .Visible(() => Selection.activeObject != null)
                 .Action(() => {
                     string objectName = Selection.activeObject.name;
                     Debug.Log(string.Format("Selected object is called '{0}'.", objectName));
                 });
             ]]></code>
             </example>
             <param name="predicate">Predicate that determines whether item is visible by
             returning a value of <c>true</c>.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="predicate"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.On(System.Boolean)">
             <summary>
             Specifies whether menu item should be in an "on" state (aka checked).
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Item is checked!")
                 .On(true)
                 .Action(() => {
                     Debug.Log("Selected checked menu item!");
                 });
             ]]></code>
             </example>
             <param name="on">Indicates if menu item is "on".</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
        </member>
        <member name="M:IGenericMenuAddItemContext.On(System.Func{System.Boolean})">
             <summary>
             Specifies whether menu item should be in an "on" state (aka checked).
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Item is checked!")
                 .On(() => true)
                 .Action(() => {
                     Debug.Log("Selected checked menu item!");
                 });
             ]]></code>
             </example>
             <param name="predicate">Predicate that determines whether item is "on" by
             returning a value of <c>true</c>.</param>
             <returns>
             The <see cref="T:IGenericMenuAddItemContext"/> instance for chained method calls.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="predicate"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.Action(UnityEditor.GenericMenu.MenuFunction)">
             <summary>
             Finalize addition of menu item by assigning an action to it.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Log message to console!")
                 .Action(() => {
                     Debug.Log("Hello, world!");
                 });
             ]]></code>
             </example>
             <param name="action">Delegate to perform menu action.</param>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="action"/> is a value of <c>null</c>.
             </exception>
        </member>
        <member name="M:IGenericMenuAddItemContext.Action(UnityEditor.GenericMenu.MenuFunction2,System.Object)">
             <summary>
             Finalize addition of menu item by assigning an action to it.
             </summary>
             <example>
             <code language="csharp"><![CDATA[
             var menu = new GenericMenu();
            
             menu.AddItem("Log message to console!")
                 .Action(userData => {
                     Debug.Log("Hello, {0}!", (string)userData);
                 }, "my friend");
             ]]></code>
             </example>
             <param name="action">Delegate to perform menu action.</param>
             <param name="userData">Additional data that is made available to menu action.</param>
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="action"/> is a value of <c>null</c>.
             </exception>
        </member>
    </members>
</doc>
